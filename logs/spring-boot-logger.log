2020-08-13 14:10:24,692 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 19892 (D:\Spring-Batch\batch\target\classes started by Mani kandan in D:\Spring-Batch\batch)
2020-08-13 14:10:24,698 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 14:10:24,814 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 14:10:26,880 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 14:10:27,403 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 14:10:27,453 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 3.791 seconds (JVM running for 4.776)
2020-08-13 14:10:27,457 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 14:10:27,459 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 14:10:27,460 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 14:10:27,526 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 14:10:27,672 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 14:10:27,812 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 14:10:28,095 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:10:28,144 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:10:28,186 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:10:28,223 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:10:28,236 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:10:28,246 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:10:28,319 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:10:28,339 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:10:28,357 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:10:28,373 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:10:28,386 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:10:28,405 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:10:28,417 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:10:28,428 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:10:28,455 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:10:28,474 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:10:28,493 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:10:28,515 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:10:28,544 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:10:28,575 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:10:28,602 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:10:28,725 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:10:28,733 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:10:28,740 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:10:28,748 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:10:28,831 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:10:28,841 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:10:28,849 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:10:28,860 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:10:28,911 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:10:28,925 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:10:28,932 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:10:28,940 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:10:28,978 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:10:29,002 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:10:29,011 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:10:29,057 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:10:29,066 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:10:29,076 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:10:29,087 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:10:30,328 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:10:30,339 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:10:30,346 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:10:30,357 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:10:30,371 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:10:30,378 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:10:30,391 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:10:30,396 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:10:30,408 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:10:30,414 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:10:30,430 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:10:30,443 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:10:30,453 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:10:30,460 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:10:30,470 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:10:30,476 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:10:30,490 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:10:30,496 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:10:30,506 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:10:30,510 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:10:30,540 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:10:30,544 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:10:30,555 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:10:30,558 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:10:30,562 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:10:30,572 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:10:30,576 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:10:30,581 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:10:30,604 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:10:30,610 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:10:30,613 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:10:30,627 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:10:30,640 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:10:30,652 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:10:30,660 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:10:30,691 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:10:30,728 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:10:30,733 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:10:30,737 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:10:30,742 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:10:31,775 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:10:31,779 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:10:31,784 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:10:31,789 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:10:31,793 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:10:31,796 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:10:31,808 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:10:31,812 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:10:31,818 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:10:31,823 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:10:31,827 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:10:31,830 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:10:31,839 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:10:31,845 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:10:31,848 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:10:31,855 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:10:31,859 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:10:31,861 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:10:31,864 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:10:31,872 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:10:32,083 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:10:32,087 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:10:32,089 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:10:32,093 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:10:32,096 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:10:32,105 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:10:32,108 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:10:32,118 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:10:32,736 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:10:32,739 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:10:32,742 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:10:32,751 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:10:32,754 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:10:32,757 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:10:32,761 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:10:32,770 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:10:32,775 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:10:32,778 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:10:32,786 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:10:32,789 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:10:32,804 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:10:32,807 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:10:32,810 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:10:32,813 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:10:32,822 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:10:32,825 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:10:32,827 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:10:32,830 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:10:35,425 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:10:35,427 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:10:35,428 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:10:35,433 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:10:35,435 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:10:35,437 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:10:35,440 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:10:35,443 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:10:35,446 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:10:35,459 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:10:35,462 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:10:35,464 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:10:36,705 INFO org.springframework.batch.core.step.AbstractStep [task-5] Step: [myStep:partition2] executed in 8s737ms
2020-08-13 14:10:36,725 INFO org.springframework.batch.core.step.AbstractStep [task-4] Step: [myStep:partition0] executed in 8s764ms
2020-08-13 14:10:36,755 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition3] executed in 8s842ms
2020-08-13 14:10:36,772 INFO org.springframework.batch.core.step.AbstractStep [task-3] Step: [myStep:partition1] executed in 8s814ms
2020-08-13 14:10:36,793 INFO org.springframework.batch.core.step.AbstractStep [task-7] Step: [myStep:partition5] executed in 8s848ms
2020-08-13 14:10:36,809 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition6] executed in 8s858ms
2020-08-13 14:10:36,822 INFO org.springframework.batch.core.step.AbstractStep [task-6] Step: [myStep:partition4] executed in 8s874ms
2020-08-13 14:10:36,826 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 9s10ms
2020-08-13 14:10:36,834 INFO com.example.batch.JobCompletionNotificationListener [restartedMain] Job-Parameter: 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step parttioner 
ReadCount: 1400
WriteCount: 1400
SkipCount: 0
Filter: 0
Commits: 7147
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition3 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition2 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition5 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition4 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition6 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition1 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition0 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Log for myJob 
  Started     : Thu Aug 13 14:10:27 IST 2020
  Finished    : Thu Aug 13 14:10:36 IST 2020
  Exit-Code   : COMPLETED
  Exit-Descr. : 
  Status      : COMPLETED

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

2020-08-13 14:10:36,835 INFO com.example.batch.JobCompletionNotificationListener [restartedMain] JOB FINISHED! Time to verify the results
2020-08-13 14:10:36,839 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 9s92ms
2020-08-13 14:10:44,075 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [Thread-97] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 14:10:44,378 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 19892 (D:\Spring-Batch\batch\target\classes started by Mani kandan in D:\Spring-Batch\batch)
2020-08-13 14:10:44,380 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 14:10:45,137 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 14:10:45,374 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 14:10:45,408 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 1.189 seconds (JVM running for 22.73)
2020-08-13 14:10:45,410 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 14:10:45,412 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 14:10:45,414 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 14:10:45,438 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 14:10:45,444 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 14:10:45,453 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 14:10:45,578 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:10:45,592 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:10:45,599 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:10:45,603 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:10:45,606 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:10:45,634 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:10:45,638 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:10:45,651 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:10:45,654 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:10:45,657 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:10:45,666 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:10:45,671 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:10:45,675 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:10:45,682 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:10:45,701 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:10:45,706 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:10:45,709 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:10:45,726 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:10:45,753 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:10:45,759 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:10:46,938 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:10:46,940 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:10:46,943 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:10:46,950 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:10:46,953 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:10:46,956 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:10:46,959 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:10:46,967 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:10:46,969 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:10:46,975 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:10:46,980 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:10:46,987 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:10:46,990 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:10:46,992 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:10:47,005 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:10:47,021 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:10:47,026 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:10:47,034 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:10:47,041 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:10:47,055 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:10:47,828 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:10:47,836 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:10:47,839 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:10:47,851 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:10:47,854 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:10:47,858 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:10:47,866 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:10:47,871 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:10:47,876 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:10:47,887 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:10:47,906 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:10:47,908 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:10:47,916 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:10:47,919 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:10:47,921 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:10:47,924 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:10:47,927 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:10:47,937 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:10:47,940 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:10:47,943 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:10:49,134 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:10:49,137 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:10:49,140 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:10:49,142 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:10:49,149 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:10:49,152 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:10:49,155 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:10:49,157 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:10:49,160 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:10:49,165 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:10:49,168 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:10:49,170 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:10:49,173 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:10:49,177 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:10:49,188 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:10:49,191 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:10:49,193 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:10:49,205 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:10:49,209 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:10:49,223 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:10:50,072 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:10:50,076 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:10:50,089 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:10:50,092 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:10:50,099 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:10:50,101 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:10:50,104 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:10:50,106 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:10:50,117 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:10:50,120 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:10:50,123 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:10:50,126 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:10:50,135 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:10:50,138 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:10:50,140 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:10:50,150 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:10:50,154 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:10:50,156 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:10:50,158 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:10:50,168 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:10:51,076 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:10:51,080 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:10:51,085 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:10:51,088 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:10:51,090 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:10:51,093 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:10:51,101 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:10:51,104 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:10:51,106 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:10:51,109 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:10:51,117 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:10:51,121 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:10:51,123 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:10:51,125 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:10:51,130 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:10:51,136 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:10:51,140 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:10:51,142 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:10:51,151 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:10:51,154 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:10:51,807 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:10:51,809 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:10:51,811 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:10:51,816 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:10:51,819 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:10:51,820 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:10:51,822 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:10:51,824 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:10:51,826 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:10:51,828 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:10:51,833 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:10:51,838 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:10:51,840 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:10:51,843 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:10:51,853 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:10:51,856 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:10:51,859 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:10:51,867 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:10:51,869 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:10:51,872 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:10:52,357 INFO org.springframework.batch.core.step.AbstractStep [task-3] Step: [myStep:partition0] executed in 6s866ms
2020-08-13 14:10:52,368 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition1] executed in 6s879ms
2020-08-13 14:10:52,376 INFO org.springframework.batch.core.step.AbstractStep [task-4] Step: [myStep:partition2] executed in 6s885ms
2020-08-13 14:10:52,388 INFO org.springframework.batch.core.step.AbstractStep [task-6] Step: [myStep:partition5] executed in 6s899ms
2020-08-13 14:10:52,400 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition6] executed in 6s923ms
2020-08-13 14:10:52,407 INFO org.springframework.batch.core.step.AbstractStep [task-5] Step: [myStep:partition4] executed in 6s915ms
2020-08-13 14:10:52,417 INFO org.springframework.batch.core.step.AbstractStep [task-7] Step: [myStep:partition3] executed in 6s930ms
2020-08-13 14:10:52,418 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 6s965ms
2020-08-13 14:10:52,420 INFO com.example.batch.JobCompletionNotificationListener [restartedMain] Job-Parameter: 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step parttioner 
ReadCount: 1400
WriteCount: 1400
SkipCount: 0
Filter: 0
Commits: 7147
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition3 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition2 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition5 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition4 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition6 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition1 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition0 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Log for myJob 
  Started     : Thu Aug 13 14:10:45 IST 2020
  Finished    : Thu Aug 13 14:10:52 IST 2020
  Exit-Code   : COMPLETED
  Exit-Descr. : 
  Status      : COMPLETED

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

2020-08-13 14:10:52,421 INFO com.example.batch.JobCompletionNotificationListener [restartedMain] JOB FINISHED! Time to verify the results
2020-08-13 14:10:52,423 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 6s974ms
2020-08-13 14:10:52,432 INFO org.springframework.boot.devtools.autoconfigure.ConditionEvaluationDeltaLoggingListener [restartedMain] Condition evaluation unchanged
2020-08-13 14:11:52,430 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [SpringContextShutdownHook] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 14:12:07,353 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 6644 (D:\Spring-Batch\batch\target\classes started by Mani kandan in D:\Spring-Batch\batch)
2020-08-13 14:12:07,358 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 14:12:07,507 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 14:12:09,588 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 14:12:10,135 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 14:12:10,186 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 3.779 seconds (JVM running for 4.804)
2020-08-13 14:12:10,190 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 14:12:10,192 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 14:12:10,193 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 14:12:10,270 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 14:12:10,405 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 14:12:10,486 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 14:12:10,809 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:12:10,827 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:12:10,843 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:12:10,861 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:12:10,875 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:12:10,890 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:12:10,907 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:12:10,921 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:12:10,940 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:12:10,956 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:12:10,970 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:12:10,983 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:12:10,995 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:12:11,007 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:12:11,023 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:12:11,053 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:12:11,067 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:12:11,077 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:12:11,096 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:12:11,106 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:12:11,125 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:12:11,138 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:12:11,148 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:12:11,158 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:12:11,176 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:12:11,216 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:12:11,235 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:12:11,258 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:12:11,270 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:12:11,279 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:12:11,302 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:12:11,310 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:12:11,320 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:12:11,329 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:12:11,359 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:12:11,373 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:12:11,385 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:12:11,401 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:12:11,422 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:12:11,439 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:12:11,975 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:12:11,988 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:12:11,994 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:12:12,004 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:12:12,008 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:12:12,017 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:12:12,022 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:12:12,036 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:12:12,043 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:12:12,053 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:12:12,058 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:12:12,069 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:12:12,074 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:12:12,102 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:12:12,117 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:12:12,122 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:12:12,127 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:12:12,135 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:12:12,139 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:12:12,143 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:12:12,155 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:12:14,569 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:12:14,573 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:12:14,576 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:12:14,583 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:12:14,586 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:12:14,590 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:12:14,593 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:12:14,605 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:12:14,609 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:12:14,617 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:12:14,622 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:12:14,634 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:12:14,643 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:12:14,657 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:12:14,673 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:12:14,692 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:12:14,700 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:12:14,711 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:12:14,717 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:12:14,721 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:12:16,373 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:12:16,376 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:12:16,383 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:12:16,441 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:12:16,450 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:12:16,453 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:12:16,456 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:12:16,466 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:12:16,469 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:12:16,471 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:12:16,474 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:12:16,482 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:12:16,492 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:12:16,498 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:12:16,501 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:12:16,505 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:12:16,509 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:12:16,514 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:12:16,516 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:12:16,520 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:12:17,718 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:12:17,722 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:12:17,725 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:12:17,731 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:12:17,733 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:12:17,736 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:12:17,737 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:12:17,740 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:12:17,742 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:12:17,749 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:12:17,753 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:12:17,757 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:12:17,759 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:12:17,766 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:12:17,773 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:12:17,775 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:12:17,775 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [Thread-97] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 14:12:17,804 ERROR org.springframework.batch.core.step.AbstractStep [task-6] Encountered an error executing step myStep in job myJob
java.lang.NullPointerException: null
	at org.springframework.batch.repeat.exception.DefaultExceptionHandler.handleException(DefaultExceptionHandler.java:37)
	at org.springframework.batch.repeat.support.RepeatTemplate.doHandle(RepeatTemplate.java:300)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:220)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.tasklet.TaskletStep.doExecute(TaskletStep.java:258)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:208)
	at org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler$1.call(TaskExecutorPartitionHandler.java:138)
	at org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler$1.call(TaskExecutorPartitionHandler.java:135)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-08-13 14:12:17,804 ERROR org.springframework.batch.core.step.AbstractStep [task-3] Encountered an error executing step myStep in job myJob
java.lang.NullPointerException: null
	at org.springframework.batch.repeat.exception.DefaultExceptionHandler.handleException(DefaultExceptionHandler.java:37)
	at org.springframework.batch.repeat.support.RepeatTemplate.doHandle(RepeatTemplate.java:300)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:220)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.tasklet.TaskletStep.doExecute(TaskletStep.java:258)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:208)
	at org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler$1.call(TaskExecutorPartitionHandler.java:138)
	at org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler$1.call(TaskExecutorPartitionHandler.java:135)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
2020-08-13 14:12:17,924 INFO org.springframework.batch.core.step.AbstractStep [task-3] Step: [myStep:partition4] executed in 7s262ms
2020-08-13 14:12:17,924 INFO org.springframework.batch.core.step.AbstractStep [task-6] Step: [myStep:partition0] executed in 7s285ms
2020-08-13 14:12:18,206 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 6644 (D:\Spring-Batch\batch\target\classes started by Mani kandan in D:\Spring-Batch\batch)
2020-08-13 14:12:18,208 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 14:12:19,399 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 14:12:19,726 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 14:12:19,756 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 1.774 seconds (JVM running for 14.374)
2020-08-13 14:12:19,758 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 14:12:19,758 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 14:12:19,759 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 14:12:19,770 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 14:12:19,774 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 14:12:19,788 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 14:12:19,898 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:12:19,915 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:12:19,918 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:12:19,921 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:12:19,926 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:12:19,931 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:12:19,946 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:12:19,950 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:12:19,965 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:12:19,970 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:12:19,975 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:12:19,981 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:12:20,015 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:12:20,019 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:12:20,033 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:12:20,036 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:12:20,039 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:12:20,048 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:12:20,052 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:12:20,055 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:12:21,234 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:12:21,237 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:12:21,239 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:12:21,241 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:12:21,246 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:12:21,250 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:12:21,253 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:12:21,256 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:12:21,259 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:12:21,270 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:12:21,285 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:12:21,289 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:12:21,299 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:12:21,303 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:12:21,307 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:12:21,319 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:12:21,324 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:12:21,335 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:12:21,338 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:12:21,340 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:12:22,258 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:12:22,264 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:12:22,267 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:12:22,274 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:12:22,276 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:12:22,282 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:12:22,284 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:12:22,288 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:12:22,300 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:12:22,304 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:12:22,307 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:12:22,313 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:12:22,315 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:12:22,319 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:12:22,321 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:12:22,324 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:12:22,332 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:12:22,334 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:12:22,337 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:12:22,340 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:12:22,604 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:12:22,608 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:12:22,613 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:12:22,616 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:12:22,632 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:12:22,634 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:12:22,636 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:12:22,650 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:12:22,653 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:12:22,656 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:12:22,668 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:12:22,673 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:12:22,681 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:12:22,684 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:12:22,688 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:12:22,697 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:12:22,701 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:12:22,719 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:12:22,722 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:12:22,728 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:12:23,658 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:12:23,664 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:12:23,667 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:12:23,669 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:12:23,671 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:12:23,681 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:12:23,687 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:12:23,690 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:12:23,699 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:12:23,701 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:12:23,703 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:12:23,705 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:12:23,707 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:12:23,714 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:12:23,716 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:12:23,719 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:12:23,720 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:12:23,722 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:12:23,725 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:12:23,733 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:12:24,620 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:12:24,622 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:12:24,629 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:12:24,631 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:12:24,637 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:12:24,640 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:12:24,655 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:12:24,666 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:12:24,671 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:12:24,677 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:12:24,686 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:12:24,691 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:12:24,700 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:12:24,704 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:12:24,706 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:12:24,709 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:12:24,717 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:12:24,721 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:12:24,723 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:12:24,732 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:12:25,482 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:12:25,484 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:12:25,486 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:12:25,488 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:12:25,490 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:12:25,494 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:12:25,498 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:12:25,500 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:12:25,502 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:12:25,504 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:12:25,507 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:12:25,514 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:12:25,519 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:12:25,523 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:12:25,531 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:12:25,535 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:12:25,539 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:12:25,542 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:12:25,551 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:12:25,556 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:12:26,463 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition2] executed in 6s643ms
2020-08-13 14:12:26,487 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition4] executed in 6s655ms
2020-08-13 14:12:26,506 INFO org.springframework.batch.core.step.AbstractStep [task-5] Step: [myStep:partition5] executed in 6s670ms
2020-08-13 14:12:26,528 INFO org.springframework.batch.core.step.AbstractStep [task-6] Step: [myStep:partition0] executed in 6s702ms
2020-08-13 14:12:26,555 INFO org.springframework.batch.core.step.AbstractStep [task-3] Step: [myStep:partition1] executed in 6s724ms
2020-08-13 14:12:26,572 INFO org.springframework.batch.core.step.AbstractStep [task-4] Step: [myStep:partition3] executed in 6s738ms
2020-08-13 14:12:26,636 INFO org.springframework.batch.core.step.AbstractStep [task-7] Step: [myStep:partition6] executed in 6s801ms
2020-08-13 14:12:26,638 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 6s848ms
2020-08-13 14:12:26,654 INFO com.example.batch.JobCompletionNotificationListener [restartedMain] Job-Parameter: 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step parttioner 
ReadCount: 1400
WriteCount: 1400
SkipCount: 0
Filter: 0
Commits: 7147
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition3 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition2 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition5 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition4 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition6 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition1 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition0 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Log for myJob 
  Started     : Thu Aug 13 14:12:19 IST 2020
  Finished    : Thu Aug 13 14:12:26 IST 2020
  Exit-Code   : COMPLETED
  Exit-Descr. : 
  Status      : COMPLETED

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

2020-08-13 14:12:26,655 INFO com.example.batch.JobCompletionNotificationListener [restartedMain] JOB FINISHED! Time to verify the results
2020-08-13 14:12:26,673 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 6s871ms
2020-08-13 14:14:03,362 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 17240 (D:\Spring-Batch\batch\target\classes started by Mani kandan in D:\Spring-Batch\batch)
2020-08-13 14:14:03,367 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 14:14:03,503 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 14:14:05,514 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 14:14:06,170 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 14:14:06,219 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 3.865 seconds (JVM running for 4.995)
2020-08-13 14:14:06,223 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 14:14:06,229 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 14:14:06,229 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 14:14:06,284 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 14:14:06,416 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 14:14:06,527 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 14:14:06,839 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:14:06,866 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:14:06,883 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:14:06,901 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:14:06,918 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:14:06,955 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:14:06,976 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:14:06,985 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:14:06,999 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:14:07,031 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:14:07,041 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:14:07,052 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:14:07,071 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:14:07,084 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:14:07,099 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:14:07,115 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:14:07,128 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:14:07,144 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:14:07,181 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:14:07,191 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:14:07,219 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:14:07,350 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:14:07,447 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:14:07,462 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:14:07,471 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:14:07,480 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:14:07,556 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:14:07,565 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:14:07,575 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:14:07,583 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:14:07,613 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:14:07,620 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:14:07,633 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:14:07,646 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:14:07,676 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:14:07,693 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:14:07,729 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:14:07,755 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:14:07,782 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:14:07,797 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:14:10,235 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:14:10,243 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:14:10,248 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:14:10,259 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:14:10,264 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:14:10,269 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:14:10,277 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:14:10,282 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:14:10,285 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:14:10,293 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:14:10,300 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:14:10,309 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:14:10,315 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:14:10,320 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:14:10,326 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:14:10,329 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:14:10,332 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:14:10,335 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:14:10,351 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:14:10,359 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:14:10,600 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:14:10,610 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:14:10,613 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:14:10,616 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:14:10,619 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:14:10,626 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:14:10,629 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:14:10,632 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:14:10,635 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:14:10,637 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:14:10,645 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:14:10,648 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:14:10,652 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:14:10,659 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:14:10,662 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:14:10,665 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:14:10,695 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:14:10,701 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:14:10,708 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:14:10,713 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:14:11,564 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:14:11,567 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:14:11,570 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:14:11,577 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:14:11,580 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:14:11,583 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:14:11,586 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:14:11,592 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:14:11,595 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:14:11,598 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:14:11,601 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:14:11,604 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:14:11,612 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:14:11,615 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:14:11,618 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:14:11,625 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:14:11,631 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:14:11,636 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:14:11,646 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:14:11,651 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:14:12,133 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:14:12,135 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:14:12,144 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:14:12,147 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:14:12,151 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:14:12,159 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:14:12,163 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:14:12,166 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:14:12,169 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:14:12,176 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:14:12,178 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:14:12,181 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:14:12,183 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:14:12,186 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:14:12,193 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:14:12,195 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:14:12,199 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:14:12,209 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:14:12,213 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:14:12,222 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:14:13,138 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:14:13,143 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:14:13,146 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:14:13,150 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:14:13,152 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:14:13,158 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:14:13,168 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:14:13,180 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:14:13,182 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:14:13,185 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:14:13,193 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:14:13,196 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:14:13,199 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:14:13,203 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:14:13,213 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:14:13,216 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:14:13,219 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:14:13,226 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:14:13,230 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:14:13,234 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:14:14,627 INFO org.springframework.batch.core.step.AbstractStep [task-3] Step: [myStep:partition5] executed in 7s964ms
2020-08-13 14:14:14,695 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition3] executed in 8s74ms
2020-08-13 14:14:14,710 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition2] executed in 8s55ms
2020-08-13 14:14:14,734 INFO org.springframework.batch.core.step.AbstractStep [task-6] Step: [myStep:partition0] executed in 8s86ms
2020-08-13 14:14:14,795 INFO org.springframework.batch.core.step.AbstractStep [task-5] Step: [myStep:partition6] executed in 8s128ms
2020-08-13 14:14:14,822 INFO org.springframework.batch.core.step.AbstractStep [task-4] Step: [myStep:partition4] executed in 8s156ms
2020-08-13 14:14:14,827 INFO org.springframework.batch.core.step.AbstractStep [task-7] Step: [myStep:partition1] executed in 8s184ms
2020-08-13 14:14:14,829 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 8s297ms
2020-08-13 14:14:14,833 INFO com.example.batch.JobCompletionNotificationListener [restartedMain] Job-Parameter: 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step parttioner 
ReadCount: 1400
WriteCount: 1400
SkipCount: 0
Filter: 0
Commits: 7147
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition3 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition2 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition5 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition4 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition6 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition1 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition0 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Log for myJob 
  Started     : Thu Aug 13 14:14:06 IST 2020
  Finished    : Thu Aug 13 14:14:14 IST 2020
  Exit-Code   : COMPLETED
  Exit-Descr. : 
  Status      : COMPLETED

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

2020-08-13 14:14:14,834 INFO com.example.batch.JobCompletionNotificationListener [restartedMain] JOB FINISHED! Time to verify the results
2020-08-13 14:14:14,849 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 8s349ms
2020-08-13 14:15:16,198 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 22220 (D:\Spring-Batch\batch\target\classes started by Mani kandan in D:\Spring-Batch\batch)
2020-08-13 14:15:16,203 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 14:15:16,331 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 14:15:18,523 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 14:15:19,108 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 14:15:19,171 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 3.897 seconds (JVM running for 5.013)
2020-08-13 14:15:19,182 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 14:15:19,185 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 14:15:19,186 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 14:15:19,271 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 14:15:19,399 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 14:15:19,520 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 14:15:19,906 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:15:19,951 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:15:19,983 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:15:20,028 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:15:20,047 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:15:20,065 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:15:20,101 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:15:20,115 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:15:20,136 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:15:20,153 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:15:20,172 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:15:20,201 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:15:20,216 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:15:20,233 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:15:20,271 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:15:20,286 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:15:20,330 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:15:20,349 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:15:20,360 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:15:20,382 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:15:20,399 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:15:20,482 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:15:20,538 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:15:20,556 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:15:20,588 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:15:20,604 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:15:20,614 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:15:20,634 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:15:20,653 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:15:20,664 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:15:20,670 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:15:20,681 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:15:20,704 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:15:20,712 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:15:20,727 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:15:20,736 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:15:20,760 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:15:20,769 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:15:20,816 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:15:20,830 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:15:21,097 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:15:21,103 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:15:21,113 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:15:21,118 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:15:21,147 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:15:21,155 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:15:21,171 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:15:21,181 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:15:21,187 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:15:21,204 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:15:21,219 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:15:21,236 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:15:21,246 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:15:21,254 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:15:21,268 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:15:21,395 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:15:21,400 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:15:21,406 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:15:21,414 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:15:21,421 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:15:21,633 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:15:21,655 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:15:21,669 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:15:21,679 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:15:21,683 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:15:21,707 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:15:21,716 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:15:21,739 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:15:21,748 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:15:21,751 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:15:21,757 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:15:21,761 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:15:21,766 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:15:21,782 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:15:21,793 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:15:21,802 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:15:21,812 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:15:21,821 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:15:21,834 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:15:21,864 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:15:21,870 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:15:21,887 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:15:21,984 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:15:21,989 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:15:21,999 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:15:22,004 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:15:22,013 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:15:22,018 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:15:22,023 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:15:22,035 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:15:22,044 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:15:22,052 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:15:22,063 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:15:22,069 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:15:22,072 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:15:22,078 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:15:22,087 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:15:22,097 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:15:22,101 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:15:22,106 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:15:22,114 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:15:22,124 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:15:22,137 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:15:22,156 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:15:22,169 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:15:22,182 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:15:22,189 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:15:22,201 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:15:22,213 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:15:22,219 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:15:22,229 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:15:22,237 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:15:22,248 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:15:22,254 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:15:22,267 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:15:22,279 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:15:22,285 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:15:22,289 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:15:22,297 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:15:22,301 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:15:22,321 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:15:22,333 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:15:22,390 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:15:22,402 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:15:22,480 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:15:22,487 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:15:22,498 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:15:22,504 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:15:22,515 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:15:22,523 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:15:22,532 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:15:22,537 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:15:22,545 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:15:22,550 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:15:22,555 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:15:22,564 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:15:22,578 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:15:22,583 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:15:22,588 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:15:22,600 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:15:22,786 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [Thread-97] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 14:15:25,449 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 24436 (D:\Spring-Batch\batch\target\classes started by Mani kandan in D:\Spring-Batch\batch)
2020-08-13 14:15:25,454 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 14:15:25,590 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 14:15:27,596 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 14:15:28,200 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 14:15:28,249 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 3.81 seconds (JVM running for 4.879)
2020-08-13 14:15:28,252 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 14:15:28,255 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 14:15:28,260 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 14:15:28,352 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 14:15:28,528 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 14:15:28,698 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 14:15:29,011 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:15:29,035 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:15:29,052 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:15:29,078 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:15:29,095 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:15:29,110 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:15:29,126 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:15:29,143 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:15:29,165 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:15:29,180 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:15:29,210 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:15:29,237 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:15:29,254 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:15:29,282 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:15:29,298 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:15:29,310 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:15:29,333 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:15:29,343 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:15:29,361 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:15:29,369 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:15:29,394 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:15:29,472 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:15:29,483 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:15:29,492 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:15:29,501 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:15:29,511 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:15:29,532 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:15:29,549 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:15:29,562 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:15:29,586 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:15:29,600 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:15:29,612 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:15:29,631 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:15:29,651 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:15:29,693 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:15:29,717 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:15:29,731 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:15:29,746 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:15:29,769 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:15:29,779 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:15:31,171 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:15:31,181 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:15:31,186 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:15:31,196 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:15:31,202 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:15:31,212 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:15:31,217 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:15:31,221 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:15:31,228 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:15:31,234 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:15:31,248 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:15:31,253 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:15:31,261 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:15:31,266 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:15:31,269 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:15:31,272 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:15:31,281 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:15:31,287 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:15:31,298 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:15:31,306 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:15:32,464 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:15:32,466 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:15:32,470 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:15:32,478 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:15:32,482 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:15:32,486 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:15:32,499 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:15:32,503 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:15:32,511 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:15:32,515 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:15:32,518 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:15:32,521 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:15:32,532 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:15:32,535 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:15:32,544 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:15:32,547 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:15:32,553 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:15:32,564 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:15:32,570 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:15:32,580 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:15:33,722 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:15:33,726 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:15:33,729 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:15:33,732 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:15:33,736 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:15:33,744 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:15:33,749 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:15:33,760 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:15:33,774 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:15:33,781 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:15:33,785 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:15:33,793 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:15:33,798 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:15:33,850 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:15:33,854 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:15:33,859 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:15:33,862 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:15:33,869 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:15:33,871 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:15:33,874 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:15:34,882 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:15:34,884 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:15:34,886 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:15:34,892 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:15:34,895 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:15:34,898 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:15:34,900 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:15:34,902 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:15:34,904 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:15:34,909 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:15:34,910 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:15:34,913 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:15:34,915 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:15:34,917 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:15:34,920 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:15:34,922 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:15:34,927 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:15:34,930 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:15:34,932 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:15:34,935 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:15:35,626 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:15:35,629 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:15:35,631 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:15:35,633 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:15:35,634 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:15:35,636 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:15:35,638 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:15:35,646 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:15:35,648 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:15:35,650 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:15:35,652 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:15:35,654 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:15:35,659 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:15:35,662 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:15:35,665 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:15:35,668 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:15:35,670 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:15:35,675 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:15:35,677 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:15:35,680 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:15:36,599 INFO org.springframework.batch.core.step.AbstractStep [task-6] Step: [myStep:partition5] executed in 7s745ms
2020-08-13 14:15:36,616 INFO org.springframework.batch.core.step.AbstractStep [task-7] Step: [myStep:partition0] executed in 7s765ms
2020-08-13 14:15:36,636 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition2] executed in 7s791ms
2020-08-13 14:15:36,651 INFO org.springframework.batch.core.step.AbstractStep [task-4] Step: [myStep:partition4] executed in 7s800ms
2020-08-13 14:15:36,669 INFO org.springframework.batch.core.step.AbstractStep [task-3] Step: [myStep:partition1] executed in 7s818ms
2020-08-13 14:15:36,687 INFO org.springframework.batch.core.step.AbstractStep [task-5] Step: [myStep:partition3] executed in 7s835ms
2020-08-13 14:15:36,704 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition6] executed in 7s868ms
2020-08-13 14:15:36,709 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 8s10ms
2020-08-13 14:15:36,714 INFO com.example.batch.JobCompletionNotificationListener [restartedMain] Job-Parameter: 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step parttioner 
ReadCount: 1400
WriteCount: 1400
SkipCount: 0
Filter: 0
Commits: 7147
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition3 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition2 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition5 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition4 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition6 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition1 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition0 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Log for myJob 
  Started     : Thu Aug 13 14:15:28 IST 2020
  Finished    : Thu Aug 13 14:15:36 IST 2020
  Exit-Code   : COMPLETED
  Exit-Descr. : 
  Status      : COMPLETED

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

2020-08-13 14:15:36,715 INFO com.example.batch.JobCompletionNotificationListener [restartedMain] JOB FINISHED! Time to verify the results
2020-08-13 14:15:36,730 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 8s92ms
2020-08-13 14:15:46,282 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 11000 (D:\Spring-Batch\batch\target\classes started by Mani kandan in D:\Spring-Batch\batch)
2020-08-13 14:15:46,290 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 14:15:46,417 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 14:15:48,339 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 14:15:48,928 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 14:15:48,982 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 3.685 seconds (JVM running for 4.798)
2020-08-13 14:15:48,991 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 14:15:48,994 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 14:15:48,995 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 14:15:49,093 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 14:15:49,258 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 14:15:49,350 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 14:15:49,682 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:15:49,712 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:15:49,728 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:15:49,749 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:15:49,773 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:15:49,784 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:15:49,808 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:15:49,828 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:15:49,857 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:15:49,876 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:15:49,887 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:15:49,907 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:15:49,918 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:15:49,931 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:15:49,947 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:15:49,968 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:15:50,008 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:15:50,016 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:15:50,026 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:15:50,036 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:15:50,060 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:15:50,079 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:15:50,093 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:15:50,104 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:15:50,126 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:15:50,139 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:15:50,146 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:15:50,156 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:15:50,177 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:15:50,184 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:15:50,192 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:15:50,199 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:15:50,228 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:15:50,242 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:15:50,248 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:15:50,259 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:15:50,275 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:15:50,281 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:15:50,291 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:15:50,299 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:15:50,307 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:15:52,846 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:15:52,850 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:15:52,856 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:15:52,859 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:15:52,863 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:15:52,866 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:15:52,875 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:15:52,878 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:15:52,883 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:15:52,890 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:15:52,895 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:15:52,899 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:15:52,906 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:15:52,909 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:15:52,911 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:15:52,914 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:15:52,923 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:15:52,926 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:15:52,930 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:15:53,165 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:15:53,173 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:15:53,177 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:15:53,180 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:15:53,183 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:15:53,192 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:15:53,195 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:15:53,200 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:15:53,208 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:15:53,211 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:15:53,214 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:15:53,217 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:15:53,223 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:15:53,226 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:15:53,229 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:15:53,233 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:15:53,244 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:15:53,247 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:15:53,256 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:15:53,260 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:15:54,757 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:15:55,080 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:15:55,082 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:15:55,088 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:15:55,091 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:15:55,094 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:15:55,097 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:15:55,099 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:15:55,106 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:15:55,112 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:15:55,117 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:15:55,125 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:15:55,129 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:15:55,132 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:15:55,139 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:15:55,142 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:15:55,145 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:15:55,148 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:15:55,154 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:15:55,156 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:15:55,159 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:15:55,429 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:15:55,434 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:15:55,442 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:15:55,445 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:15:55,448 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:15:55,456 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:15:55,460 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:15:55,464 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:15:55,472 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:15:55,477 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:15:55,481 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:15:55,484 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:15:55,490 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:15:55,493 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:15:55,496 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:15:55,499 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:15:55,509 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:15:55,513 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:15:55,517 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:15:56,530 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:15:56,532 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:15:56,538 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:15:56,540 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:15:56,542 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:15:56,544 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:15:56,546 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:15:56,549 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:15:56,551 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:15:56,558 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:15:56,560 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:15:56,563 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:15:56,566 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:15:56,573 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:15:56,576 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:15:56,579 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:15:56,581 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:15:56,583 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:15:56,590 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:15:56,592 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:15:57,195 INFO org.springframework.batch.core.step.AbstractStep [task-3] Step: [myStep:partition5] executed in 7s680ms
2020-08-13 14:15:57,195 INFO org.springframework.batch.core.step.AbstractStep [task-5] Step: [myStep:partition3] executed in 7s682ms
2020-08-13 14:15:57,228 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition2] executed in 7s711ms
2020-08-13 14:15:57,246 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition0] executed in 7s759ms
2020-08-13 14:15:57,278 INFO org.springframework.batch.core.step.AbstractStep [task-4] Step: [myStep:partition1] executed in 7s763ms
2020-08-13 14:15:57,291 INFO org.springframework.batch.core.step.AbstractStep [task-6] Step: [myStep:partition4] executed in 7s768ms
2020-08-13 14:15:57,304 INFO org.springframework.batch.core.step.AbstractStep [task-7] Step: [myStep:partition6] executed in 7s810ms
2020-08-13 14:15:57,314 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 7s959ms
2020-08-13 14:15:57,320 INFO com.example.batch.JobCompletionNotificationListener [restartedMain] Job-Parameter: 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step parttioner 
ReadCount: 1400
WriteCount: 1400
SkipCount: 0
Filter: 0
Commits: 7147
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition3 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition2 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition5 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition4 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition6 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition1 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition0 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Log for myJob 
  Started     : Thu Aug 13 14:15:49 IST 2020
  Finished    : Thu Aug 13 14:15:57 IST 2020
  Exit-Code   : COMPLETED
  Exit-Descr. : 
  Status      : COMPLETED

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

2020-08-13 14:15:57,323 INFO com.example.batch.JobCompletionNotificationListener [restartedMain] JOB FINISHED! Time to verify the results
2020-08-13 14:15:57,331 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 8s0ms
2020-08-13 14:16:21,611 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [Thread-97] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 14:16:21,976 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 11000 (D:\Spring-Batch\batch\target\classes started by Mani kandan in D:\Spring-Batch\batch)
2020-08-13 14:16:21,978 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 14:16:22,738 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 14:16:22,987 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 14:16:23,038 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 1.268 seconds (JVM running for 38.853)
2020-08-13 14:16:23,039 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 14:16:23,040 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 14:16:23,040 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 14:16:23,048 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 14:16:23,055 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 14:16:23,059 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 14:16:23,217 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:16:23,226 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:16:23,230 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:16:23,234 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:16:23,236 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:16:23,239 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:16:23,242 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:16:23,256 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:16:23,266 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:16:23,269 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:16:23,276 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:16:23,279 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:16:23,282 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:16:23,285 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:16:23,296 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:16:23,298 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:16:23,301 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:16:23,310 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:16:23,320 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:16:23,325 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:16:24,726 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:16:24,735 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:16:24,738 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:16:24,741 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:16:24,744 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:16:24,753 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:16:24,759 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:16:24,770 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:16:24,774 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:16:24,777 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:16:24,792 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:16:24,803 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:16:24,806 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:16:24,815 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:16:24,820 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:16:24,823 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:16:24,825 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:16:24,827 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:16:24,836 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:16:24,854 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:16:25,812 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:16:25,818 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:16:25,821 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:16:25,824 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:16:25,826 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:16:25,830 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:16:25,836 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:16:25,840 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:16:25,842 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:16:25,850 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:16:25,854 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:16:25,857 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:16:25,871 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:16:25,874 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:16:25,877 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:16:25,887 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:16:25,890 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:16:25,893 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:16:25,903 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:16:25,906 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:16:26,652 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:16:26,654 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:16:26,656 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:16:26,659 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:16:26,661 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:16:26,666 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:16:26,687 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:16:26,689 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:16:26,692 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:16:26,694 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:16:26,699 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:16:26,701 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:16:26,703 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:16:26,706 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:16:26,708 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:16:26,710 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:16:26,716 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:16:26,718 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:16:26,721 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:16:26,727 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:16:27,285 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:16:27,287 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:16:27,290 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:16:27,293 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:16:27,300 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:16:27,302 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:16:27,305 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:16:27,307 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:16:27,310 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:16:27,316 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:16:27,318 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:16:27,324 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:16:27,326 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:16:27,335 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:16:27,339 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:16:27,342 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:16:27,352 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:16:27,354 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:16:27,356 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:16:27,359 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:16:28,020 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:16:28,022 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:16:28,024 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:16:28,026 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:16:28,027 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:16:28,034 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:16:28,036 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:16:28,038 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:16:28,040 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:16:28,042 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:16:28,045 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:16:28,050 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:16:28,052 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:16:28,054 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:16:28,056 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:16:28,059 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:16:28,069 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:16:28,071 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:16:28,073 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:16:28,075 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:16:28,625 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:16:28,627 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:16:28,633 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:16:28,635 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:16:28,636 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:16:28,638 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:16:28,640 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:16:28,641 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:16:28,643 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:16:28,648 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:16:28,650 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:16:28,651 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:16:28,653 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:16:28,657 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:16:28,667 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:16:28,671 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:16:28,674 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:16:28,676 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:16:28,684 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:16:28,688 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:16:29,282 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition3] executed in 6s171ms
2020-08-13 14:16:29,291 INFO org.springframework.batch.core.step.AbstractStep [task-4] Step: [myStep:partition4] executed in 6s156ms
2020-08-13 14:16:29,303 INFO org.springframework.batch.core.step.AbstractStep [task-5] Step: [myStep:partition1] executed in 6s170ms
2020-08-13 14:16:29,314 INFO org.springframework.batch.core.step.AbstractStep [task-7] Step: [myStep:partition6] executed in 6s187ms
2020-08-13 14:16:29,321 INFO org.springframework.batch.core.step.AbstractStep [task-3] Step: [myStep:partition5] executed in 6s179ms
2020-08-13 14:16:29,334 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition0] executed in 6s193ms
2020-08-13 14:16:29,342 INFO org.springframework.batch.core.step.AbstractStep [task-6] Step: [myStep:partition2] executed in 6s214ms
2020-08-13 14:16:29,344 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 6s285ms
2020-08-13 14:16:29,348 INFO com.example.batch.JobCompletionNotificationListener [restartedMain] Job-Parameter: 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step parttioner 
ReadCount: 1400
WriteCount: 1400
SkipCount: 0
Filter: 0
Commits: 7147
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition3 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition2 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition5 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition4 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition6 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition1 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition0 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Log for myJob 
  Started     : Thu Aug 13 14:16:23 IST 2020
  Finished    : Thu Aug 13 14:16:29 IST 2020
  Exit-Code   : COMPLETED
  Exit-Descr. : 
  Status      : COMPLETED

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

2020-08-13 14:16:29,348 INFO com.example.batch.JobCompletionNotificationListener [restartedMain] JOB FINISHED! Time to verify the results
2020-08-13 14:16:29,350 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 6s291ms
2020-08-13 14:16:29,354 INFO org.springframework.boot.devtools.autoconfigure.ConditionEvaluationDeltaLoggingListener [restartedMain] Condition evaluation unchanged
2020-08-13 14:16:45,652 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [Thread-99] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 14:16:45,899 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 11000 (D:\Spring-Batch\batch\target\classes started by Mani kandan in D:\Spring-Batch\batch)
2020-08-13 14:16:45,900 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 14:16:46,633 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 14:16:46,819 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 14:16:46,842 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 1.025 seconds (JVM running for 62.657)
2020-08-13 14:16:46,843 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 14:16:46,844 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 14:16:46,844 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 14:16:46,851 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 14:16:46,853 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 14:16:46,856 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 14:16:47,004 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:16:47,017 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:16:47,019 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:16:47,021 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:16:47,023 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:16:47,029 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:16:47,032 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:16:47,034 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:16:47,037 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:16:47,072 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:16:47,081 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:16:47,084 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:16:47,089 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:16:47,097 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:16:47,099 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:16:47,102 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:16:47,111 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:16:47,113 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:16:47,115 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:16:47,119 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:16:48,338 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:16:48,341 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:16:48,347 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:16:48,349 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:16:48,351 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:16:48,353 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:16:48,355 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:16:48,362 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:16:48,364 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:16:48,366 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:16:48,368 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:16:48,370 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:16:48,372 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:16:48,380 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:16:48,384 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:16:48,386 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:16:48,388 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:16:48,390 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:16:48,399 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:16:48,403 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:16:49,170 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:16:49,172 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:16:49,174 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:16:49,180 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:16:49,182 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:16:49,184 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:16:49,188 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:16:49,195 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:16:49,197 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:16:49,221 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:16:49,230 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:16:49,235 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:16:49,237 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:16:49,239 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:16:49,248 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:16:49,250 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:16:49,252 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:16:49,254 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:16:49,256 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:16:49,269 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:16:49,905 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:16:49,911 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:16:49,916 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:16:49,918 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:16:49,920 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:16:49,922 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:16:49,924 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:16:49,930 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:16:49,932 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:16:49,933 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:16:49,935 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:16:49,936 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:16:49,938 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:16:49,940 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:16:49,947 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:16:49,948 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:16:49,950 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:16:49,952 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:16:49,954 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:16:49,956 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:16:50,618 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:16:50,619 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:16:50,621 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:16:50,622 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:16:50,624 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:16:50,628 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:16:50,630 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:16:50,631 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:16:50,633 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:16:50,635 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:16:50,636 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:16:50,638 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:16:50,640 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:16:50,645 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:16:50,647 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:16:50,648 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:16:50,650 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:16:50,654 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:16:50,661 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:16:50,669 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:16:51,298 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:16:51,300 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:16:51,301 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:16:51,303 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:16:51,305 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:16:51,311 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:16:51,313 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:16:51,315 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:16:51,317 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:16:51,318 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:16:51,320 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:16:51,321 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:16:51,322 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:16:51,327 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:16:51,329 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:16:51,330 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:16:51,332 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:16:51,333 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:16:51,335 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:16:51,337 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:16:51,905 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:16:51,913 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:16:51,915 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:16:51,918 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:16:51,920 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:16:51,922 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:16:51,929 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:16:51,931 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:16:51,933 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:16:51,935 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:16:51,937 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:16:51,939 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:16:51,948 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:16:51,950 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:16:51,952 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:16:51,954 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:16:51,959 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:16:51,963 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:16:51,965 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:16:51,967 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:16:52,656 INFO org.springframework.batch.core.step.AbstractStep [task-4] Step: [myStep:partition1] executed in 5s751ms
2020-08-13 14:16:52,670 INFO org.springframework.batch.core.step.AbstractStep [task-5] Step: [myStep:partition0] executed in 5s733ms
2020-08-13 14:16:52,684 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition2] executed in 5s796ms
2020-08-13 14:16:52,698 INFO org.springframework.batch.core.step.AbstractStep [task-7] Step: [myStep:partition3] executed in 5s808ms
2020-08-13 14:16:52,716 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition4] executed in 5s819ms
2020-08-13 14:16:52,732 INFO org.springframework.batch.core.step.AbstractStep [task-6] Step: [myStep:partition5] executed in 5s792ms
2020-08-13 14:16:52,744 INFO org.springframework.batch.core.step.AbstractStep [task-3] Step: [myStep:partition6] executed in 5s846ms
2020-08-13 14:16:52,746 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 5s889ms
2020-08-13 14:16:52,749 INFO com.example.batch.JobCompletionNotificationListener [restartedMain] Job-Parameter: 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step parttioner 
ReadCount: 1400
WriteCount: 1400
SkipCount: 0
Filter: 0
Commits: 7147
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition3 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition2 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition5 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition4 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition6 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition1 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition0 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Log for myJob 
  Started     : Thu Aug 13 14:16:46 IST 2020
  Finished    : Thu Aug 13 14:16:52 IST 2020
  Exit-Code   : COMPLETED
  Exit-Descr. : 
  Status      : COMPLETED

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

2020-08-13 14:16:52,749 INFO com.example.batch.JobCompletionNotificationListener [restartedMain] JOB FINISHED! Time to verify the results
2020-08-13 14:16:52,751 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 5s895ms
2020-08-13 14:16:52,754 INFO org.springframework.boot.devtools.autoconfigure.ConditionEvaluationDeltaLoggingListener [restartedMain] Condition evaluation unchanged
2020-08-13 14:17:00,402 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [Thread-194] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 14:17:00,680 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 11000 (D:\Spring-Batch\batch\target\classes started by Mani kandan in D:\Spring-Batch\batch)
2020-08-13 14:17:00,681 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 14:17:01,282 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 14:17:01,544 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 14:17:01,553 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 0.972 seconds (JVM running for 77.368)
2020-08-13 14:17:01,560 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 14:17:01,561 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 14:17:01,562 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 14:17:01,570 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 14:17:01,579 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 14:17:01,582 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 14:17:01,645 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:17:01,656 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:17:01,660 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:17:01,662 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:17:01,664 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:17:01,666 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:17:01,678 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:17:01,680 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:17:01,696 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:17:01,700 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:17:01,713 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:17:01,715 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:17:01,717 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:17:01,719 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:17:01,725 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:17:01,732 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:17:01,735 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:17:01,747 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:17:01,751 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:17:01,765 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:17:02,682 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:17:02,683 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:17:02,685 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:17:02,686 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:17:02,692 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:17:02,694 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:17:02,700 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:17:02,702 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:17:02,711 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:17:02,716 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:17:02,718 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:17:02,725 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:17:02,728 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:17:02,730 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:17:02,732 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:17:02,735 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:17:02,736 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:17:02,744 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:17:02,748 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:17:02,750 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:17:03,433 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:17:03,435 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:17:03,436 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:17:03,438 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:17:03,444 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:17:03,446 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:17:03,448 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:17:03,449 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:17:03,451 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:17:03,452 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:17:03,454 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:17:03,459 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:17:03,461 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:17:03,463 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:17:03,464 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:17:03,466 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:17:03,467 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:17:03,468 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:17:03,469 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:17:03,472 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:17:03,520 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:17:03,522 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:17:03,525 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:17:03,527 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:17:03,529 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:17:03,530 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:17:03,532 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:17:03,534 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:17:03,536 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:17:03,538 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:17:03,542 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:17:03,544 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:17:03,546 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:17:03,548 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:17:03,549 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:17:03,551 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:17:03,553 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:17:03,554 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:17:03,559 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:17:03,561 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:17:03,792 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:17:03,794 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:17:03,796 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:17:03,798 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:17:03,800 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:17:03,801 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:17:03,803 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:17:03,806 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:17:03,810 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:17:03,812 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:17:03,814 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:17:03,816 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:17:03,818 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:17:03,820 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:17:03,822 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:17:03,832 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:17:03,834 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:17:03,836 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:17:03,843 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:17:03,846 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:17:05,308 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:17:05,310 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:17:05,312 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:17:05,314 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:17:05,316 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:17:05,317 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:17:05,319 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:17:05,320 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:17:05,325 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:17:05,327 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:17:05,329 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:17:05,330 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:17:05,332 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:17:05,333 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:17:05,335 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:17:05,337 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:17:05,343 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:17:05,346 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:17:05,348 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:17:05,350 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:17:05,352 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:17:05,356 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:17:05,358 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:17:05,360 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:17:05,363 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:17:05,366 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:17:05,368 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:17:05,370 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:17:05,377 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:17:05,379 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:17:05,381 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:17:05,384 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:17:05,386 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:17:05,392 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:17:05,394 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:17:05,396 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:17:05,398 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:17:05,413 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:17:05,415 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:17:05,419 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:17:06,650 INFO org.springframework.batch.core.step.AbstractStep [task-4] Step: [myStep:partition5] executed in 5s47ms
2020-08-13 14:17:06,665 INFO org.springframework.batch.core.step.AbstractStep [task-7] Step: [myStep:partition4] executed in 5s63ms
2020-08-13 14:17:06,680 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition0] executed in 5s74ms
2020-08-13 14:17:06,692 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition1] executed in 5s91ms
2020-08-13 14:17:06,700 INFO org.springframework.batch.core.step.AbstractStep [task-5] Step: [myStep:partition6] executed in 5s98ms
2020-08-13 14:17:06,717 INFO org.springframework.batch.core.step.AbstractStep [task-6] Step: [myStep:partition2] executed in 5s114ms
2020-08-13 14:17:06,717 INFO org.springframework.batch.core.step.AbstractStep [task-3] Step: [myStep:partition3] executed in 5s113ms
2020-08-13 14:17:06,719 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 5s135ms
2020-08-13 14:17:06,722 INFO com.example.batch.JobCompletionNotificationListener [restartedMain] Job-Parameter: 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step parttioner 
ReadCount: 1400
WriteCount: 1400
SkipCount: 0
Filter: 0
Commits: 7147
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition3 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition2 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition5 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition4 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition6 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition1 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Step myStep:partition0 
ReadCount: 200
WriteCount: 200
SkipCount: 0
Filter: 0
Commits: 1021
Rollbacks: 0

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 
Log for myJob 
  Started     : Thu Aug 13 14:17:01 IST 2020
  Finished    : Thu Aug 13 14:17:06 IST 2020
  Exit-Code   : COMPLETED
  Exit-Descr. : 
  Status      : COMPLETED

+++++++++++++++++++++++++++++++++++++++++++++++++++++++ 

2020-08-13 14:17:06,724 INFO com.example.batch.JobCompletionNotificationListener [restartedMain] JOB FINISHED! Time to verify the results
2020-08-13 14:17:06,730 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 5s141ms
2020-08-13 14:17:06,732 INFO org.springframework.boot.devtools.autoconfigure.ConditionEvaluationDeltaLoggingListener [restartedMain] Condition evaluation unchanged
2020-08-13 14:18:06,723 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [SpringContextShutdownHook] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 14:19:19,165 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 19224 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 14:19:19,170 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 14:19:19,277 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 14:19:20,742 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 14:19:21,216 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 14:19:21,255 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 2.784 seconds (JVM running for 4.278)
2020-08-13 14:19:21,259 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 14:19:21,265 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 14:19:21,266 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 14:19:21,307 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 14:19:21,388 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 14:19:21,473 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 14:19:21,724 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:19:21,760 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:19:21,781 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:19:21,799 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:19:21,817 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:19:21,833 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:19:21,849 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:19:21,874 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:19:21,891 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:19:21,915 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:19:21,932 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:19:21,949 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:19:21,959 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:19:21,981 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:19:22,004 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:19:22,017 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:19:22,049 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:19:22,067 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:19:22,084 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:19:22,098 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:19:22,113 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:19:22,123 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:19:22,138 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:19:22,187 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:19:22,199 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:19:22,228 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:19:22,249 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:19:22,271 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:19:22,306 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:19:22,354 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:19:22,376 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:19:22,401 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:19:22,408 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:19:22,426 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:19:22,435 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:19:22,442 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:19:22,463 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:19:22,486 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:19:22,502 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:19:22,515 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:19:24,066 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:19:24,070 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:19:24,074 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:19:24,082 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:19:24,086 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:19:24,091 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:19:24,100 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:19:24,104 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:19:24,109 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:19:24,118 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:19:24,124 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:19:24,132 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:19:24,140 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:19:24,147 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:19:24,151 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:19:24,155 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:19:24,158 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:19:24,166 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:19:24,170 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:19:24,174 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:19:24,248 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:19:24,256 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:19:24,266 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:19:24,271 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:19:24,284 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:19:24,288 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:19:24,302 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:19:24,308 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:19:24,320 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:19:24,325 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:19:24,336 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:19:24,341 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:19:24,352 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:19:24,357 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:19:24,372 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:19:25,318 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:19:25,322 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:19:25,325 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:19:25,332 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:19:25,339 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:19:26,768 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:19:26,771 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:19:26,775 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:19:26,783 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:19:26,788 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:19:26,791 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:19:26,801 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:19:26,804 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:19:26,807 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:19:26,814 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:19:26,818 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:19:26,822 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:19:26,833 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:19:26,837 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:19:26,840 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:19:26,847 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:19:26,849 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:19:26,852 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:19:26,855 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:19:26,857 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:19:27,505 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:19:27,507 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:19:27,514 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:19:27,517 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:19:27,519 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:19:27,522 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:19:27,525 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:19:27,534 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:19:27,536 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:19:27,538 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:19:27,540 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:19:27,542 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:19:27,547 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:19:27,549 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:19:27,551 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:19:27,554 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:19:27,556 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:19:27,564 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:19:27,568 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:19:27,570 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:19:28,233 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:19:28,236 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:19:28,240 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:19:28,243 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:19:28,248 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:19:28,250 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:19:28,251 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:19:28,253 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:19:28,255 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:19:28,257 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:19:28,265 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:19:28,268 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:19:28,270 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:19:28,272 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:19:28,275 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:19:28,283 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:19:28,287 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:19:28,290 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:19:28,293 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:19:28,300 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:19:28,865 INFO org.springframework.batch.core.step.AbstractStep [task-6] Step: [myStep:partition6] executed in 7s251ms
2020-08-13 14:19:28,883 INFO org.springframework.batch.core.step.AbstractStep [task-3] Step: [myStep:partition4] executed in 7s294ms
2020-08-13 14:19:28,920 INFO org.springframework.batch.core.step.AbstractStep [task-5] Step: [myStep:partition2] executed in 7s308ms
2020-08-13 14:19:28,938 INFO org.springframework.batch.core.step.AbstractStep [task-7] Step: [myStep:partition0] executed in 7s323ms
2020-08-13 14:19:28,952 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition5] executed in 7s367ms
2020-08-13 14:19:28,998 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition3] executed in 7s424ms
2020-08-13 14:19:29,001 INFO org.springframework.batch.core.step.AbstractStep [task-4] Step: [myStep:partition1] executed in 7s394ms
2020-08-13 14:19:29,003 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 7s530ms
2020-08-13 14:19:29,013 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 7s564ms
2020-08-13 14:20:08,029 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [Thread-99] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 14:20:08,216 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 19224 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 14:20:08,216 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 14:20:09,007 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 14:20:09,307 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 14:20:09,376 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 1.243 seconds (JVM running for 52.4)
2020-08-13 14:20:09,380 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 14:20:09,380 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 14:20:09,382 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 14:20:09,392 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 14:20:09,396 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 14:20:09,401 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 14:20:09,543 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:20:09,558 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:20:09,562 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:20:09,565 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:20:09,572 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:20:09,576 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:20:09,613 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:20:09,617 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:20:09,623 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:20:09,627 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:09,631 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:20:09,638 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:20:09,642 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:20:09,645 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:20:09,648 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:20:09,653 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:20:09,660 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:20:09,664 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:20:09,674 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:20:09,688 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:09,864 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:20:09,882 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:20:09,890 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:20:09,894 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:20:09,896 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:20:09,899 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:20:09,905 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:20:09,914 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:20:09,920 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:20:09,951 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:09,954 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:20:09,958 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:20:09,962 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:20:09,965 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:20:09,968 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:20:09,972 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:20:09,975 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:20:09,978 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:20:09,981 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:20:09,987 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:10,113 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:20:10,121 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:20:10,124 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:20:10,127 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:20:10,130 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:20:10,132 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:20:10,141 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:20:10,144 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:20:10,147 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:20:10,152 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:10,157 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:20:10,160 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:20:10,165 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:20:10,171 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:20:10,175 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:20:10,178 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:20:10,189 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:20:10,247 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:20:10,252 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:20:10,260 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:10,408 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:20:10,423 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:20:10,427 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:20:10,431 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:20:10,440 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:20:10,443 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:20:10,447 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:20:10,455 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:20:10,458 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:20:10,461 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:10,464 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:20:10,472 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:20:10,476 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:20:10,479 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:20:10,482 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:20:10,488 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:20:10,492 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:20:10,495 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:20:10,498 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:20:10,506 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:10,606 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:20:10,609 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:20:10,613 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:20:10,615 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:20:10,625 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:20:10,629 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:20:10,631 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:20:10,639 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:20:10,642 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:20:10,644 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:10,646 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:20:10,649 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:20:10,659 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:20:10,663 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:20:10,666 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:20:10,674 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:20:10,678 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:20:10,682 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:20:10,692 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:20:10,697 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:10,824 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:20:10,826 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:20:10,828 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:20:10,829 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:20:10,831 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:20:10,833 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:20:10,840 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:20:10,842 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:20:10,844 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:20:10,845 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:10,846 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:20:10,849 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:20:10,857 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:20:10,859 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:20:10,862 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:20:10,864 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:20:10,873 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:20:10,876 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:20:10,878 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:20:10,881 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:10,966 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:20:10,972 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:20:10,974 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:20:10,976 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:20:10,978 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:20:10,980 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:20:10,982 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:20:10,989 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:20:10,992 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:20:10,996 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:10,999 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:20:11,005 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:20:11,007 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:20:11,009 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:20:11,013 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:20:11,016 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:20:11,023 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:20:11,025 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:20:11,028 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:20:11,031 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:11,127 INFO org.springframework.batch.core.step.AbstractStep [task-4] Step: [myStep:partition4] executed in 1s638ms
2020-08-13 14:20:11,145 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition1] executed in 1s663ms
2020-08-13 14:20:11,161 INFO org.springframework.batch.core.step.AbstractStep [task-5] Step: [myStep:partition6] executed in 1s673ms
2020-08-13 14:20:11,206 INFO org.springframework.batch.core.step.AbstractStep [task-6] Step: [myStep:partition0] executed in 1s718ms
2020-08-13 14:20:11,210 INFO org.springframework.batch.core.step.AbstractStep [task-7] Step: [myStep:partition5] executed in 1s724ms
2020-08-13 14:20:11,225 INFO org.springframework.batch.core.step.AbstractStep [task-3] Step: [myStep:partition2] executed in 1s736ms
2020-08-13 14:20:11,239 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition3] executed in 1s750ms
2020-08-13 14:20:11,240 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 1s838ms
2020-08-13 14:20:11,243 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 1s845ms
2020-08-13 14:20:11,246 INFO org.springframework.boot.devtools.autoconfigure.ConditionEvaluationDeltaLoggingListener [restartedMain] Condition evaluation unchanged
2020-08-13 14:20:24,963 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [Thread-101] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 14:20:25,192 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 19224 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 14:20:25,193 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 14:20:25,680 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 14:20:25,810 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 14:20:25,824 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 0.712 seconds (JVM running for 68.847)
2020-08-13 14:20:25,826 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 14:20:25,826 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 14:20:25,827 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 14:20:25,838 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 14:20:25,841 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 14:20:25,844 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 14:20:25,909 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:20:25,919 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:20:25,920 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:20:25,923 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:20:25,925 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:20:25,927 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:20:25,929 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:20:25,939 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:20:25,941 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:20:25,943 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:25,952 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:20:25,955 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:20:25,957 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:20:25,959 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:20:25,962 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:20:25,968 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:20:25,970 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:20:25,972 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:20:25,975 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:20:25,977 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:25,980 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:20:25,986 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:20:25,989 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:20:25,996 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:20:26,009 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:20:26,012 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:20:26,021 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:20:26,025 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:20:26,028 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:20:26,038 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:26,043 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:20:26,045 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:20:26,048 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:20:26,053 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:20:26,058 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:20:26,060 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:20:26,063 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:20:26,072 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:20:26,075 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:20:26,077 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:26,080 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:20:26,085 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:20:26,087 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:20:26,089 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:20:26,091 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:20:26,093 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:20:26,095 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:20:26,097 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:20:26,107 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:20:26,122 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:26,128 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:20:26,152 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:20:26,154 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:20:26,156 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:20:26,160 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:20:26,164 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:20:26,169 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:20:26,171 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:20:26,175 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:20:26,177 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:26,181 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:20:26,190 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:20:26,193 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:20:26,207 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:20:26,212 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:20:26,220 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:20:26,223 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:20:26,225 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:20:26,227 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:20:26,229 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:26,239 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:20:26,242 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:20:26,246 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:20:26,253 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:20:26,256 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:20:26,269 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:20:26,290 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:20:26,293 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:20:26,295 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:20:26,298 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:26,300 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:20:26,302 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:20:26,304 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:20:26,306 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:20:26,308 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:20:26,310 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:20:26,312 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:20:26,314 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:20:26,316 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:20:26,319 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:26,321 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:20:26,329 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:20:26,335 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:20:26,338 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:20:26,344 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:20:26,353 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:20:26,356 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:20:26,360 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:20:26,362 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:20:26,369 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:26,371 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:20:26,373 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:20:26,375 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:20:26,385 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:20:26,414 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:20:26,422 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:20:26,425 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:20:26,427 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:20:26,429 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:20:26,436 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:26,438 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:20:26,441 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:20:26,443 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:20:26,445 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:20:26,447 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:20:26,452 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:20:26,454 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:20:26,456 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:20:26,463 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:20:26,475 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:26,477 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:20:26,479 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:20:26,482 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:20:26,488 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:20:26,489 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:20:26,491 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:20:26,493 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:20:26,495 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:20:26,497 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:20:26,503 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:26,507 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:20:26,509 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:20:26,554 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:20:26,557 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:20:26,560 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:20:26,564 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:20:26,571 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:20:26,573 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:20:26,575 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:20:26,578 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:26,706 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition0] executed in 843ms
2020-08-13 14:20:26,718 INFO org.springframework.batch.core.step.AbstractStep [task-6] Step: [myStep:partition4] executed in 849ms
2020-08-13 14:20:26,720 INFO org.springframework.batch.core.step.AbstractStep [task-3] Step: [myStep:partition3] executed in 849ms
2020-08-13 14:20:26,721 INFO org.springframework.batch.core.step.AbstractStep [task-4] Step: [myStep:partition5] executed in 851ms
2020-08-13 14:20:26,723 INFO org.springframework.batch.core.step.AbstractStep [task-5] Step: [myStep:partition2] executed in 853ms
2020-08-13 14:20:26,724 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition6] executed in 853ms
2020-08-13 14:20:26,725 INFO org.springframework.batch.core.step.AbstractStep [task-7] Step: [myStep:partition1] executed in 857ms
2020-08-13 14:20:26,728 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 883ms
2020-08-13 14:20:26,734 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 888ms
2020-08-13 14:20:26,736 INFO org.springframework.boot.devtools.autoconfigure.ConditionEvaluationDeltaLoggingListener [restartedMain] Condition evaluation unchanged
2020-08-13 14:20:37,375 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [Thread-198] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 14:20:37,625 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 19224 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 14:20:37,626 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 14:20:38,110 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 14:20:38,276 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 14:20:38,292 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 0.729 seconds (JVM running for 81.315)
2020-08-13 14:20:38,294 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 14:20:38,294 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 14:20:38,295 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 14:20:38,304 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 14:20:38,307 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 14:20:38,310 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 14:20:38,361 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:20:38,374 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:20:38,376 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:20:38,384 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:20:38,388 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:20:38,390 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:20:38,392 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:20:38,395 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:20:38,401 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:20:38,403 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:20:38,405 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:20:38,408 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:20:38,411 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:20:38,418 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:20:38,420 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:20:38,422 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:20:38,424 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:20:38,427 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:20:38,429 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:20:38,434 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:20:38,438 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:20:38,440 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:20:38,442 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:20:38,445 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:20:38,450 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:20:38,451 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:20:38,461 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:20:38,472 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:20:38,474 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:20:38,484 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:20:38,486 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:20:38,488 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:20:38,490 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:20:38,492 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:20:38,494 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:20:38,500 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:20:38,502 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:20:38,505 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:20:38,507 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:20:38,510 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:20:38,521 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:20:38,523 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:20:38,525 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:20:38,530 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:20:38,534 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:20:38,537 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:20:38,540 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:20:38,542 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:20:38,550 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:20:38,553 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:20:38,555 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:20:38,557 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:20:38,559 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:20:38,565 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:20:38,567 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:20:38,578 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:20:38,584 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:20:38,587 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:38,591 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:20:38,594 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:20:38,599 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:20:38,602 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:38,605 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:20:38,607 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:20:38,610 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:20:38,613 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:38,616 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:20:38,618 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:20:38,621 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:20:38,624 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:20:38,634 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:38,656 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:20:38,660 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:20:38,663 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:38,664 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:20:38,668 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:20:38,670 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:20:38,672 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:20:38,674 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:38,694 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:38,698 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:20:38,700 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:20:38,702 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:20:38,704 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:20:38,705 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:20:38,707 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:20:38,709 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:20:38,712 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:20:38,714 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:20:38,716 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:20:38,718 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:20:38,720 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:20:38,722 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:20:38,724 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:20:38,727 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:20:38,729 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:20:38,731 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:20:38,733 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:20:38,735 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:20:38,736 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:20:38,738 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:20:38,740 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:20:38,743 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:20:38,745 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:20:38,756 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:20:38,760 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:20:38,763 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:20:38,765 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:20:38,768 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:20:38,770 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:20:38,772 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:20:38,774 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:20:38,776 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:20:38,778 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:20:38,780 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:20:38,782 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:38,784 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:20:38,786 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:20:38,788 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:20:38,790 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:38,792 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:20:38,794 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:20:38,819 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:20:38,821 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:38,824 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:20:38,825 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:20:38,831 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:20:38,833 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:20:38,837 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:38,839 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:20:38,841 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:20:38,843 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:38,845 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:20:38,847 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:20:38,849 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:20:38,850 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:20:38,852 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:20:38,867 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:38,870 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:20:38,873 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:38,913 INFO org.springframework.batch.core.step.AbstractStep [task-7] Step: [myStep:partition1] executed in 587ms
2020-08-13 14:20:38,914 INFO org.springframework.batch.core.step.AbstractStep [task-6] Step: [myStep:partition0] executed in 588ms
2020-08-13 14:20:38,922 INFO org.springframework.batch.core.step.AbstractStep [task-4] Step: [myStep:partition6] executed in 594ms
2020-08-13 14:20:38,923 INFO org.springframework.batch.core.step.AbstractStep [task-5] Step: [myStep:partition5] executed in 596ms
2020-08-13 14:20:38,925 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition4] executed in 600ms
2020-08-13 14:20:38,926 INFO org.springframework.batch.core.step.AbstractStep [task-3] Step: [myStep:partition2] executed in 598ms
2020-08-13 14:20:38,933 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition3] executed in 603ms
2020-08-13 14:20:38,935 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 625ms
2020-08-13 14:20:38,939 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 629ms
2020-08-13 14:20:38,940 INFO org.springframework.boot.devtools.autoconfigure.ConditionEvaluationDeltaLoggingListener [restartedMain] Condition evaluation unchanged
2020-08-13 14:20:48,823 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [Thread-295] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 14:20:49,068 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 19224 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 14:20:49,068 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 14:20:49,500 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 14:20:49,608 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 14:20:49,619 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 0.613 seconds (JVM running for 92.643)
2020-08-13 14:20:49,621 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 14:20:49,622 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 14:20:49,622 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 14:20:49,632 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 14:20:49,636 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 14:20:49,639 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 14:20:49,733 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:49,746 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:49,755 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:49,840 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:49,854 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:49,861 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:49,870 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:49,875 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:49,940 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:49,955 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:50,003 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:50,009 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:50,020 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:50,030 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:20:50,038 INFO org.springframework.batch.core.step.AbstractStep [task-6] Step: [myStep:partition4] executed in 370ms
2020-08-13 14:20:50,040 INFO org.springframework.batch.core.step.AbstractStep [task-4] Step: [myStep:partition5] executed in 371ms
2020-08-13 14:20:50,048 INFO org.springframework.batch.core.step.AbstractStep [task-7] Step: [myStep:partition1] executed in 380ms
2020-08-13 14:20:50,050 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition2] executed in 380ms
2020-08-13 14:20:50,051 INFO org.springframework.batch.core.step.AbstractStep [task-5] Step: [myStep:partition3] executed in 382ms
2020-08-13 14:20:50,053 INFO org.springframework.batch.core.step.AbstractStep [task-3] Step: [myStep:partition6] executed in 383ms
2020-08-13 14:20:50,057 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition0] executed in 390ms
2020-08-13 14:20:50,058 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 418ms
2020-08-13 14:20:50,065 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 426ms
2020-08-13 14:20:50,067 INFO org.springframework.boot.devtools.autoconfigure.ConditionEvaluationDeltaLoggingListener [restartedMain] Condition evaluation unchanged
2020-08-13 14:20:59,141 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [Thread-392] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 14:20:59,335 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 19224 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 14:20:59,336 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 14:20:59,645 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 14:20:59,786 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 14:20:59,799 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 0.513 seconds (JVM running for 102.823)
2020-08-13 14:20:59,802 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 14:20:59,803 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 14:20:59,804 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 14:20:59,815 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 14:20:59,818 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 14:20:59,823 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 14:20:59,873 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 14:20:59,877 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 14:20:59,880 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 14:20:59,881 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 14:20:59,883 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 14:20:59,884 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 14:20:59,886 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 14:20:59,887 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 14:20:59,889 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 14:20:59,890 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 14:20:59,894 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 14:20:59,895 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 14:20:59,897 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 14:20:59,898 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 14:20:59,900 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 14:20:59,904 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 14:20:59,905 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 14:20:59,911 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 14:20:59,915 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 14:20:59,918 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 14:20:59,922 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 14:20:59,926 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 14:20:59,930 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 14:20:59,933 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 14:20:59,937 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 14:20:59,943 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 14:20:59,946 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 14:20:59,949 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 14:20:59,951 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 14:20:59,954 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 14:20:59,956 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 14:20:59,964 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 14:20:59,969 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 14:20:59,971 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 14:20:59,973 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 14:20:59,980 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 14:20:59,983 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 14:20:59,985 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 14:20:59,987 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 14:20:59,989 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 14:20:59,998 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 14:21:00,000 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 14:21:00,002 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 14:21:00,004 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 14:21:00,006 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 14:21:00,013 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 14:21:00,015 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 14:21:00,018 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 14:21:00,020 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 14:21:00,022 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 14:21:00,024 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 14:21:00,028 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 14:21:00,029 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 14:21:00,031 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 14:21:00,032 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 14:21:00,034 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 14:21:00,035 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 14:21:00,037 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:21:00,087 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 14:21:00,088 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 14:21:00,091 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 14:21:00,094 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:21:00,096 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 14:21:00,098 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 14:21:00,110 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 14:21:00,112 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:21:00,113 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 14:21:00,116 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 14:21:00,119 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 14:21:00,123 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:21:00,129 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 14:21:00,130 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 14:21:00,132 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 14:21:00,133 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:21:00,134 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 14:21:00,135 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 14:21:00,136 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 14:21:00,137 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:21:00,139 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 14:21:00,146 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 14:21:00,147 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 14:21:00,154 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:21:00,157 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 14:21:00,163 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 14:21:00,165 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 14:21:00,166 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 14:21:00,168 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 14:21:00,169 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 14:21:00,171 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 14:21:00,173 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 14:21:00,181 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 14:21:00,183 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 14:21:00,185 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 14:21:00,186 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 14:21:00,188 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 14:21:00,195 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 14:21:00,197 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 14:21:00,199 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 14:21:00,201 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 14:21:00,203 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 14:21:00,205 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 14:21:00,210 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 14:21:00,213 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 14:21:00,215 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 14:21:00,217 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 14:21:00,219 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 14:21:00,221 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 14:21:00,224 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 14:21:00,230 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 14:21:00,232 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 14:21:00,233 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 14:21:00,236 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 14:21:00,237 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 14:21:00,239 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 14:21:00,242 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 14:21:00,246 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:21:00,247 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 14:21:00,249 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 14:21:00,250 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 14:21:00,252 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:21:00,253 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 14:21:00,256 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 14:21:00,261 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 14:21:00,267 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:21:00,269 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 14:21:00,272 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 14:21:00,276 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 14:21:00,280 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:21:00,282 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 14:21:00,283 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 14:21:00,285 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 14:21:00,287 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:21:00,290 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 14:21:00,297 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 14:21:00,299 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 14:21:00,300 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:21:00,302 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 14:21:00,303 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 14:21:00,306 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 14:21:00,314 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:21:00,316 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 14:21:00,318 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 14:21:00,319 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 14:21:00,320 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 14:21:00,322 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 14:21:00,333 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 14:21:00,337 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 14:21:00,339 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 14:21:00,342 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 14:21:00,347 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 14:21:00,383 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 14:21:00,385 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 14:21:00,387 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 14:21:00,390 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 14:21:00,395 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 14:21:00,397 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 14:21:00,399 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 14:21:00,400 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 14:21:00,401 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 14:21:00,403 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 14:21:00,405 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 14:21:00,406 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 14:21:00,407 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 14:21:00,410 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 14:21:00,413 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 14:21:00,415 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 14:21:00,417 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 14:21:00,419 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 14:21:00,421 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 14:21:00,429 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 14:21:00,432 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 14:21:00,436 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 14:21:00,438 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 14:21:00,447 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 14:21:00,449 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 14:21:00,452 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 14:21:00,456 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 14:21:00,463 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 14:21:00,465 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 14:21:00,468 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 14:21:00,469 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 14:21:00,471 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 14:21:00,473 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 14:21:00,478 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 14:21:00,480 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 14:21:00,481 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 14:21:00,483 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 14:21:00,486 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 14:21:00,497 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 14:21:00,505 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 14:21:00,512 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 14:21:00,514 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 14:21:00,518 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 14:21:00,520 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 14:21:00,522 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 14:21:00,529 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 14:21:00,531 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 14:21:00,533 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:21:00,535 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 14:21:00,538 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 14:21:00,539 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 14:21:00,542 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:21:00,546 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 14:21:00,547 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 14:21:00,549 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 14:21:00,550 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:21:00,553 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 14:21:00,554 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 14:21:00,556 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 14:21:00,563 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:21:00,565 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 14:21:00,567 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 14:21:00,568 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 14:21:00,570 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:21:00,571 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 14:21:00,581 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 14:21:00,583 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 14:21:00,584 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:21:00,586 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 14:21:00,588 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 14:21:00,599 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 14:21:00,601 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:21:00,604 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 14:21:00,607 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 14:21:00,612 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 14:21:00,614 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 14:21:00,616 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 14:21:00,617 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 14:21:00,618 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 14:21:00,620 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 14:21:00,622 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 14:21:00,628 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 14:21:00,631 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 14:21:00,633 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 14:21:00,634 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 14:21:00,636 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 14:21:00,637 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 14:21:00,639 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 14:21:00,645 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 14:21:00,648 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 14:21:00,649 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 14:21:00,651 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 14:21:00,652 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 14:21:00,653 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 14:21:00,660 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 14:21:00,663 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 14:21:00,664 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 14:21:00,665 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 14:21:00,667 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 14:21:00,669 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 14:21:00,670 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 14:21:00,672 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 14:21:00,673 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 14:21:00,675 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 14:21:00,680 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 14:21:00,681 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:21:00,683 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 14:21:00,684 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 14:21:00,686 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 14:21:00,687 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:21:00,689 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 14:21:00,695 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 14:21:00,697 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 14:21:00,698 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:21:00,700 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 14:21:00,702 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 14:21:00,704 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 14:21:00,706 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:21:00,708 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 14:21:00,713 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 14:21:00,715 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 14:21:00,717 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:21:00,720 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 14:21:00,721 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 14:21:00,723 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 14:21:00,728 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:21:00,731 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 14:21:00,732 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 14:21:00,734 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 14:21:00,735 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:21:00,737 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 14:21:00,739 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 14:21:00,742 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 14:21:00,747 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 14:21:00,749 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 14:21:00,750 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 14:21:00,752 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 14:21:00,754 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 14:21:00,755 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 14:21:00,757 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 14:21:00,762 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 14:21:00,764 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 14:21:00,765 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 14:21:00,767 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 14:21:00,768 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 14:21:00,770 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 14:21:00,773 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 14:21:00,774 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 14:21:00,781 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 14:21:00,782 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 14:21:00,783 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 14:21:00,785 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 14:21:00,787 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 14:21:00,789 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 14:21:00,794 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 14:21:00,799 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 14:21:00,801 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 14:21:00,803 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 14:21:00,805 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 14:21:00,807 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 14:21:00,817 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 14:21:00,818 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 14:21:00,820 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 14:21:00,821 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 14:21:00,823 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 14:21:00,824 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 14:21:00,827 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 14:21:00,829 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 14:21:00,830 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 14:21:00,832 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 14:21:00,833 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 14:21:00,834 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 14:21:00,836 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 14:21:00,837 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 14:21:00,839 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 14:21:00,840 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 14:21:00,841 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 14:21:00,846 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 14:21:00,847 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 14:21:00,849 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 14:21:00,851 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 14:21:00,852 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 14:21:00,854 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 14:21:00,856 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 14:21:00,857 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 14:21:00,864 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 14:21:00,865 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 14:21:00,868 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:21:00,869 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 14:21:00,871 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 14:21:00,872 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 14:21:00,879 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:21:00,881 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 14:21:00,882 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 14:21:00,884 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 14:21:00,887 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:21:00,888 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 14:21:00,890 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 14:21:00,895 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 14:21:00,896 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:21:00,897 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 14:21:00,899 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 14:21:00,900 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 14:21:00,902 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:21:00,903 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 14:21:00,904 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 14:21:00,906 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 14:21:00,910 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:21:00,912 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 14:21:00,913 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 14:21:00,915 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 14:21:00,916 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:21:00,917 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 14:21:00,919 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 14:21:00,920 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 14:21:00,921 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 14:21:00,922 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 14:21:00,924 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 14:21:00,927 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 14:21:00,929 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 14:21:00,930 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 14:21:00,931 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 14:21:00,933 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 14:21:00,934 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 14:21:00,935 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 14:21:00,936 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 14:21:00,938 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 14:21:00,939 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 14:21:00,940 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 14:21:00,944 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 14:21:00,946 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 14:21:00,947 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 14:21:00,948 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 14:21:00,949 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 14:21:00,951 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 14:21:00,952 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 14:21:00,953 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 14:21:00,954 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 14:21:00,955 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 14:21:00,956 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 14:21:00,958 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 14:21:00,961 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 14:21:00,962 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 14:21:00,963 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 14:21:00,965 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 14:21:00,966 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:21:00,967 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 14:21:00,968 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 14:21:00,969 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 14:21:00,970 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:21:00,971 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 14:21:00,973 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 14:21:00,979 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 14:21:00,981 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:21:00,982 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 14:21:00,984 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 14:21:00,985 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 14:21:00,987 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:21:00,988 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 14:21:00,993 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 14:21:00,996 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 14:21:00,997 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:21:00,999 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 14:21:01,000 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 14:21:01,002 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 14:21:01,003 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:21:01,004 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 14:21:01,006 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 14:21:01,010 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 14:21:01,013 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:21:01,014 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 14:21:01,015 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 14:21:01,017 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 14:21:01,018 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 14:21:01,020 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 14:21:01,021 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 14:21:01,029 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 14:21:01,031 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 14:21:01,033 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 14:21:01,035 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 14:21:01,037 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 14:21:01,039 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 14:21:01,045 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 14:21:01,047 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 14:21:01,048 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 14:21:01,049 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 14:21:01,051 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 14:21:01,052 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 14:21:01,055 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 14:21:01,063 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 14:21:01,066 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 14:21:01,067 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 14:21:01,069 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 14:21:01,071 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 14:21:01,072 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 14:21:01,075 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 14:21:01,079 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 14:21:01,080 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 14:21:01,082 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 14:21:01,083 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 14:21:01,084 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 14:21:01,086 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 14:21:01,087 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 14:21:01,090 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 14:21:01,096 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 14:21:01,099 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 14:21:01,112 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 14:21:01,116 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 14:21:01,118 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 14:21:01,120 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 14:21:01,122 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 14:21:01,130 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 14:21:01,132 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 14:21:01,134 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 14:21:01,136 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 14:21:01,140 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 14:21:01,148 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 14:21:01,150 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 14:21:01,151 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 14:21:01,153 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 14:21:01,155 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 14:21:01,156 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 14:21:01,158 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 14:21:01,164 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 14:21:01,166 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 14:21:01,167 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 14:21:01,169 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 14:21:01,170 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:21:01,172 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 14:21:01,173 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 14:21:01,178 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 14:21:01,182 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:21:01,183 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 14:21:01,185 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 14:21:01,186 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 14:21:01,187 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:21:01,189 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 14:21:01,190 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 14:21:01,192 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 14:21:01,196 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:21:01,197 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 14:21:01,199 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 14:21:01,200 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 14:21:01,201 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:21:01,202 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 14:21:01,203 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 14:21:01,204 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 14:21:01,206 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:21:01,208 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 14:21:01,213 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 14:21:01,214 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 14:21:01,215 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:21:01,216 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 14:21:01,218 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 14:21:01,219 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 14:21:01,220 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 14:21:01,221 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 14:21:01,222 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 14:21:01,224 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 14:21:01,228 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 14:21:01,230 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 14:21:01,233 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 14:21:01,235 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 14:21:01,237 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 14:21:01,239 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 14:21:01,246 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 14:21:01,249 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 14:21:01,251 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 14:21:01,253 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 14:21:01,255 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 14:21:01,257 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 14:21:01,261 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 14:21:01,263 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 14:21:01,265 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 14:21:01,267 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 14:21:01,268 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 14:21:01,271 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 14:21:01,272 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 14:21:01,279 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 14:21:01,282 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 14:21:01,284 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 14:21:01,286 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 14:21:01,288 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 14:21:01,294 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 14:21:01,295 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 14:21:01,297 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:21:01,299 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 14:21:01,301 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 14:21:01,303 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 14:21:01,305 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:21:01,311 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 14:21:01,313 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 14:21:01,315 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 14:21:01,316 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:21:01,318 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 14:21:01,321 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 14:21:01,323 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 14:21:01,328 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:21:01,330 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 14:21:01,332 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 14:21:01,334 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 14:21:01,337 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:21:01,339 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 14:21:01,345 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 14:21:01,347 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 14:21:01,349 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:21:01,351 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 14:21:01,353 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 14:21:01,355 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 14:21:01,362 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:21:01,364 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 14:21:01,365 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 14:21:01,367 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 14:21:01,368 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 14:21:01,369 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 14:21:01,370 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 14:21:01,372 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 14:21:01,374 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 14:21:01,378 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 14:21:01,379 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 14:21:01,380 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 14:21:01,381 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 14:21:01,386 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 14:21:01,388 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 14:21:01,390 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 14:21:01,395 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 14:21:01,397 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 14:21:01,399 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 14:21:01,401 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 14:21:01,403 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 14:21:01,404 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 14:21:01,405 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 14:21:01,407 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 14:21:01,412 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 14:21:01,413 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 14:21:01,415 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 14:21:01,416 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 14:21:01,417 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 14:21:01,418 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 14:21:01,420 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 14:21:01,421 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 14:21:01,422 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 14:21:01,425 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 14:21:01,430 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 14:21:01,432 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 14:21:01,434 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 14:21:01,436 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 14:21:01,437 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 14:21:01,439 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 14:21:01,446 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 14:21:01,448 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 14:21:01,450 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 14:21:01,464 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 14:21:01,478 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 14:21:01,480 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 14:21:01,482 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 14:21:01,485 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 14:21:01,487 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 14:21:01,490 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 14:21:01,499 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 14:21:01,501 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 14:21:01,503 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 14:21:01,505 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 14:21:01,506 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 14:21:01,512 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 14:21:01,514 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 14:21:01,516 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 14:21:01,518 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:21:01,520 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 14:21:01,522 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 14:21:01,529 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 14:21:01,532 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:21:01,534 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 14:21:01,536 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 14:21:01,539 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 14:21:01,547 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:21:01,549 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 14:21:01,551 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 14:21:01,553 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 14:21:01,554 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:21:01,556 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 14:21:01,565 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 14:21:01,566 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 14:21:01,567 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:21:01,569 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 14:21:01,570 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 14:21:01,571 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 14:21:01,573 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:21:01,579 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 14:21:01,584 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 14:21:01,586 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 14:21:01,587 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:21:01,590 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 14:21:01,596 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 14:21:01,599 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 14:21:01,600 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 14:21:01,602 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 14:21:01,604 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 14:21:01,605 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 14:21:01,607 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 14:21:01,611 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 14:21:01,614 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 14:21:01,616 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 14:21:01,618 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 14:21:01,620 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 14:21:01,622 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 14:21:01,629 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 14:21:01,632 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 14:21:01,633 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 14:21:01,635 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 14:21:01,636 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 14:21:01,643 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 14:21:01,646 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 14:21:01,653 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 14:21:01,655 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 14:21:01,666 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 14:21:01,668 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 14:21:01,670 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 14:21:01,672 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 14:21:01,678 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 14:21:01,679 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 14:21:01,681 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 14:21:01,683 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 14:21:01,684 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 14:21:01,685 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 14:21:01,687 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:21:01,689 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 14:21:01,690 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 14:21:01,695 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 14:21:01,697 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:21:01,698 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 14:21:01,700 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 14:21:01,701 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 14:21:01,707 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:21:01,712 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 14:21:01,714 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 14:21:01,717 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 14:21:01,719 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:21:01,721 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 14:21:01,722 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 14:21:01,726 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 14:21:01,729 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:21:01,730 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 14:21:01,732 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 14:21:01,733 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 14:21:01,734 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:21:01,736 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 14:21:01,737 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 14:21:01,738 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 14:21:01,740 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:21:01,745 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 14:21:01,746 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 14:21:01,747 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 14:21:01,749 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 14:21:01,750 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 14:21:01,751 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 14:21:01,752 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 14:21:01,753 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 14:21:01,755 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 14:21:01,756 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 14:21:01,758 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 14:21:01,762 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 14:21:01,763 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 14:21:01,764 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 14:21:01,766 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 14:21:01,767 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 14:21:01,768 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 14:21:01,769 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 14:21:01,770 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 14:21:01,771 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 14:21:01,772 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 14:21:01,773 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 14:21:01,776 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 14:21:01,778 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 14:21:01,779 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 14:21:01,780 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 14:21:01,781 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 14:21:01,782 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 14:21:01,783 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 14:21:01,784 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 14:21:01,786 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 14:21:01,787 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 14:21:01,788 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 14:21:01,789 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 14:21:01,790 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 14:21:01,792 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 14:21:01,796 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 14:21:01,797 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 14:21:01,798 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 14:21:01,800 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 14:21:01,801 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 14:21:01,803 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 14:21:01,804 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 14:21:01,809 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 14:21:01,814 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 14:21:01,816 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 14:21:01,818 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 14:21:01,819 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 14:21:01,820 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 14:21:01,822 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 14:21:01,832 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 14:21:01,835 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 14:21:01,837 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 14:21:01,838 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 14:21:01,840 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 14:21:01,846 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 14:21:01,848 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 14:21:01,850 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:21:01,851 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 14:21:01,853 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 14:21:01,855 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 14:21:01,862 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:21:01,863 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 14:21:01,865 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 14:21:01,866 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 14:21:01,867 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:21:01,869 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 14:21:01,870 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 14:21:01,871 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 14:21:01,873 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:21:01,874 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 14:21:01,879 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 14:21:01,880 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 14:21:01,881 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:21:01,882 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 14:21:01,884 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 14:21:01,885 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 14:21:01,887 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:21:01,888 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 14:21:01,889 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 14:21:01,895 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 14:21:01,897 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:21:01,904 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 14:21:01,906 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 14:21:01,911 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 14:21:01,913 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 14:21:01,915 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 14:21:01,917 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 14:21:01,919 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 14:21:01,921 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 14:21:01,923 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 14:21:01,929 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 14:21:01,932 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 14:21:01,933 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 14:21:01,935 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 14:21:01,937 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 14:21:01,940 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 14:21:01,945 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 14:21:01,949 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 14:21:01,951 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 14:21:01,952 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 14:21:01,954 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 14:21:01,955 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 14:21:01,960 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 14:21:01,963 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 14:21:01,965 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 14:21:01,967 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 14:21:01,969 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 14:21:01,970 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 14:21:01,972 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 14:21:01,973 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 14:21:01,978 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 14:21:01,980 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 14:21:01,981 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 14:21:01,983 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 14:21:01,985 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:21:01,987 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 14:21:01,988 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 14:21:01,989 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 14:21:01,991 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:21:01,998 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 14:21:02,000 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 14:21:02,002 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 14:21:02,003 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:21:02,004 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 14:21:02,004 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 14:21:02,013 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 14:21:02,014 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:21:02,015 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 14:21:02,017 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 14:21:02,018 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 14:21:02,019 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:21:02,020 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 14:21:02,022 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 14:21:02,027 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 14:21:02,029 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:21:02,030 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 14:21:02,031 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 14:21:02,033 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 14:21:02,034 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:21:02,035 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 14:21:02,037 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 14:21:02,038 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 14:21:02,039 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 14:21:02,051 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 14:21:02,053 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 14:21:02,054 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 14:21:02,055 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 14:21:02,061 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 14:21:02,062 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 14:21:02,064 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 14:21:02,065 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 14:21:02,066 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 14:21:02,068 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 14:21:02,070 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 14:21:02,072 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 14:21:02,074 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 14:21:02,080 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 14:21:02,081 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 14:21:02,083 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 14:21:02,084 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 14:21:02,085 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 14:21:02,086 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 14:21:02,088 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 14:21:02,089 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 14:21:02,094 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 14:21:02,096 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 14:21:02,097 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 14:21:02,098 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 14:21:02,099 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 14:21:02,100 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 14:21:02,101 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 14:21:02,103 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 14:21:02,105 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 14:21:02,109 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 14:21:02,114 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 14:21:02,115 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 14:21:02,117 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 14:21:02,118 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 14:21:02,120 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 14:21:02,121 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 14:21:02,122 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 14:21:02,124 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 14:21:02,128 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 14:21:02,129 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 14:21:02,131 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 14:21:02,132 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 14:21:02,133 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 14:21:02,135 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 14:21:02,136 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 14:21:02,137 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 14:21:02,183 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 14:21:02,185 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 14:21:02,187 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 14:21:02,189 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 14:21:02,195 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 14:21:02,197 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 14:21:02,198 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:21:02,199 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 14:21:02,201 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 14:21:02,202 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 14:21:02,204 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:21:02,205 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 14:21:02,208 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 14:21:02,212 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 14:21:02,214 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:21:02,216 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 14:21:02,218 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 14:21:02,220 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 14:21:02,222 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:21:02,228 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 14:21:02,249 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 14:21:02,251 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 14:21:02,252 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:21:02,253 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 14:21:02,255 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 14:21:02,263 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 14:21:02,267 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:21:02,269 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 14:21:02,270 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 14:21:02,272 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 14:21:02,274 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:21:02,278 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 14:21:02,279 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 14:21:02,281 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 14:21:02,282 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 14:21:02,283 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 14:21:02,285 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 14:21:02,286 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 14:21:02,287 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 14:21:02,288 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 14:21:02,289 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 14:21:02,291 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 14:21:02,316 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 14:21:02,318 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 14:21:02,319 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 14:21:02,320 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 14:21:02,339 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 14:21:02,344 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 14:21:02,347 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 14:21:02,349 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 14:21:02,352 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 14:21:02,354 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 14:21:02,355 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 14:21:02,357 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 14:21:02,363 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 14:21:02,365 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 14:21:02,366 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 14:21:02,368 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 14:21:02,369 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 14:21:02,371 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 14:21:02,373 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 14:21:02,379 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 14:21:02,379 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 14:21:02,382 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 14:21:02,387 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:21:02,389 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 14:21:02,393 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 14:21:02,395 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 14:21:02,396 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:21:02,397 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 14:21:02,399 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 14:21:02,400 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 14:21:02,401 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:21:02,403 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 14:21:02,404 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 14:21:02,405 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 14:21:02,406 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:21:02,411 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 14:21:02,412 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 14:21:02,413 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 14:21:02,414 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:21:02,415 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 14:21:02,417 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 14:21:02,418 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 14:21:02,419 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:21:02,420 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 14:21:02,421 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 14:21:02,422 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 14:21:02,425 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:21:02,428 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 14:21:02,429 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 14:21:02,430 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 14:21:02,431 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 14:21:02,433 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 14:21:02,434 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 14:21:02,435 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 14:21:02,436 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 14:21:02,437 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 14:21:02,438 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 14:21:02,440 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 14:21:02,462 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 14:21:02,464 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 14:21:02,466 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 14:21:02,467 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 14:21:02,469 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 14:21:02,470 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 14:21:02,471 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 14:21:02,473 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 14:21:02,475 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 14:21:02,477 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 14:21:02,479 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 14:21:02,480 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 14:21:02,481 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 14:21:02,482 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 14:21:02,483 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 14:21:02,484 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 14:21:02,485 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 14:21:02,486 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 14:21:02,487 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 14:21:02,489 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 14:21:02,490 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 14:21:02,495 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 14:21:02,496 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 14:21:02,498 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 14:21:02,499 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 14:21:02,500 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 14:21:02,502 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 14:21:02,503 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 14:21:02,504 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 14:21:02,505 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 14:21:02,506 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 14:21:02,510 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 14:21:02,511 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 14:21:02,513 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 14:21:02,514 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 14:21:02,515 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 14:21:02,517 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 14:21:02,518 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 14:21:02,519 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 14:21:02,520 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 14:21:02,521 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 14:21:02,523 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 14:21:02,524 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 14:21:02,528 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 14:21:02,530 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 14:21:02,531 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 14:21:02,532 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:21:02,534 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 14:21:02,535 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 14:21:02,536 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 14:21:02,537 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:21:02,538 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 14:21:02,539 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 14:21:02,541 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 14:21:02,544 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:21:02,545 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 14:21:02,546 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 14:21:02,547 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 14:21:02,548 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:21:02,550 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 14:21:02,551 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 14:21:02,552 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 14:21:02,553 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:21:02,554 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 14:21:02,556 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 14:21:02,562 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 14:21:02,563 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:21:02,564 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 14:21:02,565 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 14:21:02,567 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 14:21:02,568 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:21:02,569 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 14:21:02,570 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 14:21:02,572 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 14:21:02,573 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 14:21:02,576 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 14:21:02,579 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 14:21:02,580 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 14:21:02,581 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 14:21:02,582 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 14:21:02,584 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 14:21:02,585 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 14:21:02,586 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 14:21:02,588 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 14:21:02,589 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 14:21:02,595 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 14:21:02,597 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 14:21:02,598 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 14:21:02,600 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 14:21:02,601 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 14:21:02,602 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 14:21:02,604 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 14:21:02,605 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 14:21:02,606 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 14:21:02,608 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 14:21:02,612 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 14:21:02,613 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 14:21:02,614 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 14:21:02,615 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 14:21:02,617 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 14:21:02,618 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 14:21:02,619 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 14:21:02,620 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 14:21:02,622 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 14:21:02,623 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:21:02,629 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 14:21:02,630 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 14:21:02,632 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 14:21:02,633 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:21:02,634 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 14:21:02,636 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 14:21:02,637 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 14:21:02,638 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:21:02,640 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 14:21:02,642 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 14:21:02,645 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 14:21:02,646 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:21:02,648 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 14:21:02,649 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 14:21:02,650 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 14:21:02,651 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:21:02,652 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 14:21:02,654 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 14:21:02,665 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 14:21:02,666 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:21:02,669 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 14:21:02,670 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 14:21:02,671 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 14:21:02,673 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:21:02,675 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 14:21:02,679 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 14:21:02,680 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 14:21:02,682 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 14:21:02,683 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 14:21:02,685 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 14:21:02,687 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 14:21:02,688 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 14:21:02,690 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 14:21:02,697 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 14:21:02,698 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 14:21:02,700 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 14:21:02,702 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 14:21:02,703 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 14:21:02,705 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 14:21:02,706 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 14:21:02,715 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 14:21:02,716 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 14:21:02,720 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 14:21:02,722 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 14:21:02,732 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 14:21:02,734 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 14:21:02,737 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 14:21:02,739 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 14:21:02,747 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 14:21:02,749 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 14:21:02,752 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 14:21:02,754 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 14:21:02,759 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 14:21:02,764 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 14:21:02,765 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 14:21:02,767 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 14:21:02,768 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 14:21:02,769 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 14:21:02,770 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 14:21:02,771 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 14:21:02,773 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 14:21:02,775 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 14:21:02,778 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 14:21:02,779 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 14:21:02,781 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 14:21:02,782 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 14:21:02,783 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 14:21:02,784 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 14:21:02,785 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 14:21:02,786 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 14:21:02,787 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 14:21:02,788 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 14:21:02,789 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 14:21:02,798 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 14:21:02,799 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 14:21:02,800 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 14:21:02,802 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 14:21:02,803 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 14:21:02,804 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 14:21:02,805 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 14:21:02,806 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 14:21:02,808 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:21:02,811 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 14:21:02,812 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 14:21:02,813 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 14:21:02,814 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:21:02,815 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 14:21:02,816 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 14:21:02,817 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 14:21:02,818 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:21:02,819 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 14:21:02,820 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 14:21:02,821 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 14:21:02,822 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:21:02,823 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 14:21:02,828 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 14:21:02,829 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 14:21:02,830 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:21:02,831 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 14:21:02,832 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 14:21:02,833 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 14:21:02,834 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:21:02,835 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 14:21:02,836 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 14:21:02,837 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 14:21:02,838 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:21:02,839 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 14:21:02,841 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 14:21:02,844 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 14:21:02,845 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 14:21:02,846 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 14:21:02,847 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 14:21:02,848 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 14:21:02,850 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 14:21:02,851 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 14:21:02,852 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 14:21:02,853 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 14:21:02,854 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 14:21:02,855 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 14:21:02,856 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 14:21:02,861 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 14:21:02,862 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 14:21:02,863 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 14:21:02,864 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 14:21:02,867 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 14:21:02,868 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 14:21:02,869 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 14:21:02,870 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 14:21:02,872 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 14:21:02,873 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 14:21:02,877 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 14:21:02,878 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 14:21:02,880 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 14:21:02,881 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 14:21:02,882 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 14:21:02,883 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 14:21:02,884 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 14:21:02,886 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 14:21:02,887 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 14:21:02,888 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:21:02,889 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 14:21:02,894 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 14:21:02,895 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 14:21:02,896 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:21:02,898 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 14:21:02,899 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 14:21:02,900 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 14:21:02,901 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:21:02,902 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 14:21:02,903 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 14:21:02,904 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 14:21:02,905 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:21:02,906 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 14:21:02,907 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 14:21:02,910 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 14:21:02,911 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:21:02,913 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 14:21:02,914 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 14:21:02,915 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 14:21:02,916 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:21:02,917 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 14:21:02,918 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 14:21:02,919 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 14:21:02,920 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:21:02,921 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 14:21:02,922 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 14:21:02,924 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 14:21:02,928 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 14:21:02,929 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 14:21:02,930 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 14:21:02,931 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 14:21:02,932 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 14:21:02,934 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 14:21:02,935 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 14:21:02,936 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 14:21:02,937 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 14:21:02,938 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 14:21:02,939 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 14:21:02,943 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 14:21:02,945 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 14:21:02,946 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 14:21:02,947 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 14:21:02,948 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 14:21:02,949 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 14:21:02,950 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 14:21:02,951 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 14:21:02,952 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 14:21:02,953 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 14:21:02,954 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 14:21:02,955 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 14:21:02,957 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 14:21:02,961 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 14:21:02,962 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 14:21:02,963 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 14:21:02,964 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 14:21:02,965 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 14:21:02,967 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 14:21:02,968 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 14:21:02,969 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 14:21:02,970 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 14:21:02,971 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 14:21:02,972 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 14:21:02,974 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 14:21:02,977 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 14:21:02,979 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 14:21:02,980 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 14:21:02,981 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 14:21:02,982 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 14:21:02,983 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 14:21:02,985 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 14:21:02,986 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 14:21:02,987 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 14:21:02,988 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 14:21:02,989 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 14:21:02,992 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 14:21:02,996 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 14:21:02,997 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 14:21:02,998 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 14:21:02,999 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 14:21:03,000 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 14:21:03,001 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 14:21:03,002 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:21:03,003 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 14:21:03,004 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 14:21:03,005 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 14:21:03,006 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:21:03,008 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 14:21:03,011 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 14:21:03,013 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 14:21:03,014 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:21:03,015 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 14:21:03,016 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 14:21:03,017 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 14:21:03,019 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:21:03,020 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 14:21:03,021 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 14:21:03,022 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 14:21:03,029 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:21:03,031 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 14:21:03,033 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 14:21:03,035 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 14:21:03,039 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:21:03,043 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 14:21:03,047 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 14:21:03,048 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 14:21:03,049 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:21:03,051 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 14:21:03,052 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 14:21:03,054 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 14:21:03,055 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 14:21:03,056 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 14:21:03,062 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 14:21:03,064 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 14:21:03,066 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 14:21:03,068 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 14:21:03,083 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 14:21:03,085 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 14:21:03,089 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 14:21:03,096 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 14:21:03,098 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 14:21:03,100 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 14:21:03,102 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 14:21:03,104 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 14:21:03,106 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 14:21:03,116 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 14:21:03,118 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 14:21:03,120 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 14:21:03,121 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 14:21:03,122 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 14:21:03,124 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 14:21:03,129 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 14:21:03,131 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 14:21:03,132 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 14:21:03,133 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 14:21:03,134 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 14:21:03,136 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 14:21:03,137 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 14:21:03,138 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 14:21:03,139 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 14:21:03,146 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:21:03,148 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 14:21:03,149 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 14:21:03,150 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 14:21:03,152 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:21:03,153 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 14:21:03,154 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 14:21:03,155 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 14:21:03,162 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:21:03,164 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 14:21:03,166 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 14:21:03,167 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 14:21:03,168 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:21:03,169 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 14:21:03,171 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 14:21:03,172 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 14:21:03,174 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:21:03,178 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 14:21:03,179 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 14:21:03,180 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 14:21:03,182 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:21:03,183 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 14:21:03,184 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 14:21:03,185 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 14:21:03,186 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:21:03,212 INFO org.springframework.batch.core.step.AbstractStep [task-5] Step: [myStep:partition2] executed in 3s366ms
2020-08-13 14:21:03,213 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition4] executed in 3s374ms
2020-08-13 14:21:03,215 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition6] executed in 3s369ms
2020-08-13 14:21:03,215 INFO org.springframework.batch.core.step.AbstractStep [task-3] Step: [myStep:partition1] executed in 3s369ms
2020-08-13 14:21:03,216 INFO org.springframework.batch.core.step.AbstractStep [task-6] Step: [myStep:partition3] executed in 3s371ms
2020-08-13 14:21:03,216 INFO org.springframework.batch.core.step.AbstractStep [task-7] Step: [myStep:partition5] executed in 3s371ms
2020-08-13 14:21:03,217 INFO org.springframework.batch.core.step.AbstractStep [task-4] Step: [myStep:partition0] executed in 3s371ms
2020-08-13 14:21:03,219 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 3s394ms
2020-08-13 14:21:03,221 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 3s401ms
2020-08-13 14:21:03,222 INFO org.springframework.boot.devtools.autoconfigure.ConditionEvaluationDeltaLoggingListener [restartedMain] Condition evaluation unchanged
2020-08-13 14:22:03,228 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [SpringContextShutdownHook] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 14:42:23,575 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 9952 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 14:42:23,584 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 14:42:23,723 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 14:42:26,059 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 14:42:26,854 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 14:42:26,901 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 4.317 seconds (JVM running for 6.086)
2020-08-13 14:42:26,913 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 14:42:26,917 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 14:42:26,920 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 14:42:27,003 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 14:42:27,143 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 14:42:27,261 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 14:42:27,470 ERROR org.springframework.batch.core.step.AbstractStep [task-2] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.ItemStreamException: Failed to initialize the reader
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.open(AbstractItemCountingItemStreamItemReader.java:153)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$f444d651.open(<generated>)
	at org.springframework.batch.item.support.CompositeItemStream.open(CompositeItemStream.java:103)
	at org.springframework.batch.core.step.tasklet.TaskletStep.open(TaskletStep.java:311)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:205)
	at org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler$1.call(TaskExecutorPartitionHandler.java:138)
	at org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler$1.call(TaskExecutorPartitionHandler.java:135)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalArgumentException: Input resource must be set
	at org.springframework.util.Assert.notNull(Assert.java:198)
	at org.springframework.batch.item.file.FlatFileItemReader.doOpen(FlatFileItemReader.java:251)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.open(AbstractItemCountingItemStreamItemReader.java:150)
	... 20 common frames omitted
2020-08-13 14:42:27,469 ERROR org.springframework.batch.core.step.AbstractStep [task-5] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.ItemStreamException: Failed to initialize the reader
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.open(AbstractItemCountingItemStreamItemReader.java:153)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$f444d651.open(<generated>)
	at org.springframework.batch.item.support.CompositeItemStream.open(CompositeItemStream.java:103)
	at org.springframework.batch.core.step.tasklet.TaskletStep.open(TaskletStep.java:311)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:205)
	at org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler$1.call(TaskExecutorPartitionHandler.java:138)
	at org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler$1.call(TaskExecutorPartitionHandler.java:135)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalArgumentException: Input resource must be set
	at org.springframework.util.Assert.notNull(Assert.java:198)
	at org.springframework.batch.item.file.FlatFileItemReader.doOpen(FlatFileItemReader.java:251)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.open(AbstractItemCountingItemStreamItemReader.java:150)
	... 20 common frames omitted
2020-08-13 14:42:27,474 ERROR org.springframework.batch.core.step.AbstractStep [task-1] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.ItemStreamException: Failed to initialize the reader
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.open(AbstractItemCountingItemStreamItemReader.java:153)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$f444d651.open(<generated>)
	at org.springframework.batch.item.support.CompositeItemStream.open(CompositeItemStream.java:103)
	at org.springframework.batch.core.step.tasklet.TaskletStep.open(TaskletStep.java:311)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:205)
	at org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler$1.call(TaskExecutorPartitionHandler.java:138)
	at org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler$1.call(TaskExecutorPartitionHandler.java:135)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalArgumentException: Input resource must be set
	at org.springframework.util.Assert.notNull(Assert.java:198)
	at org.springframework.batch.item.file.FlatFileItemReader.doOpen(FlatFileItemReader.java:251)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.open(AbstractItemCountingItemStreamItemReader.java:150)
	... 20 common frames omitted
2020-08-13 14:42:27,486 ERROR org.springframework.batch.core.step.AbstractStep [task-6] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.ItemStreamException: Failed to initialize the reader
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.open(AbstractItemCountingItemStreamItemReader.java:153)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$f444d651.open(<generated>)
	at org.springframework.batch.item.support.CompositeItemStream.open(CompositeItemStream.java:103)
	at org.springframework.batch.core.step.tasklet.TaskletStep.open(TaskletStep.java:311)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:205)
	at org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler$1.call(TaskExecutorPartitionHandler.java:138)
	at org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler$1.call(TaskExecutorPartitionHandler.java:135)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalArgumentException: Input resource must be set
	at org.springframework.util.Assert.notNull(Assert.java:198)
	at org.springframework.batch.item.file.FlatFileItemReader.doOpen(FlatFileItemReader.java:251)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.open(AbstractItemCountingItemStreamItemReader.java:150)
	... 20 common frames omitted
2020-08-13 14:42:27,488 ERROR org.springframework.batch.core.step.AbstractStep [task-4] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.ItemStreamException: Failed to initialize the reader
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.open(AbstractItemCountingItemStreamItemReader.java:153)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$f444d651.open(<generated>)
	at org.springframework.batch.item.support.CompositeItemStream.open(CompositeItemStream.java:103)
	at org.springframework.batch.core.step.tasklet.TaskletStep.open(TaskletStep.java:311)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:205)
	at org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler$1.call(TaskExecutorPartitionHandler.java:138)
	at org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler$1.call(TaskExecutorPartitionHandler.java:135)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalArgumentException: Input resource must be set
	at org.springframework.util.Assert.notNull(Assert.java:198)
	at org.springframework.batch.item.file.FlatFileItemReader.doOpen(FlatFileItemReader.java:251)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.open(AbstractItemCountingItemStreamItemReader.java:150)
	... 20 common frames omitted
2020-08-13 14:42:27,486 ERROR org.springframework.batch.core.step.AbstractStep [task-7] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.ItemStreamException: Failed to initialize the reader
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.open(AbstractItemCountingItemStreamItemReader.java:153)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$f444d651.open(<generated>)
	at org.springframework.batch.item.support.CompositeItemStream.open(CompositeItemStream.java:103)
	at org.springframework.batch.core.step.tasklet.TaskletStep.open(TaskletStep.java:311)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:205)
	at org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler$1.call(TaskExecutorPartitionHandler.java:138)
	at org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler$1.call(TaskExecutorPartitionHandler.java:135)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalArgumentException: Input resource must be set
	at org.springframework.util.Assert.notNull(Assert.java:198)
	at org.springframework.batch.item.file.FlatFileItemReader.doOpen(FlatFileItemReader.java:251)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.open(AbstractItemCountingItemStreamItemReader.java:150)
	... 20 common frames omitted
2020-08-13 14:42:27,492 ERROR org.springframework.batch.core.step.AbstractStep [task-3] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.ItemStreamException: Failed to initialize the reader
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.open(AbstractItemCountingItemStreamItemReader.java:153)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$f444d651.open(<generated>)
	at org.springframework.batch.item.support.CompositeItemStream.open(CompositeItemStream.java:103)
	at org.springframework.batch.core.step.tasklet.TaskletStep.open(TaskletStep.java:311)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:205)
	at org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler$1.call(TaskExecutorPartitionHandler.java:138)
	at org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler$1.call(TaskExecutorPartitionHandler.java:135)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalArgumentException: Input resource must be set
	at org.springframework.util.Assert.notNull(Assert.java:198)
	at org.springframework.batch.item.file.FlatFileItemReader.doOpen(FlatFileItemReader.java:251)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.open(AbstractItemCountingItemStreamItemReader.java:150)
	... 20 common frames omitted
2020-08-13 14:42:27,502 INFO org.springframework.batch.core.step.AbstractStep [task-5] Step: [myStep:partition2] executed in 102ms
2020-08-13 14:42:27,502 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition5] executed in 107ms
2020-08-13 14:42:27,502 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition6] executed in 103ms
2020-08-13 14:42:27,503 INFO org.springframework.batch.core.step.AbstractStep [task-6] Step: [myStep:partition4] executed in 106ms
2020-08-13 14:42:27,506 INFO org.springframework.batch.core.step.AbstractStep [task-4] Step: [myStep:partition3] executed in 106ms
2020-08-13 14:42:27,507 INFO org.springframework.batch.core.step.AbstractStep [task-3] Step: [myStep:partition1] executed in 108ms
2020-08-13 14:42:27,511 INFO org.springframework.batch.core.step.AbstractStep [task-7] Step: [myStep:partition0] executed in 109ms
2020-08-13 14:42:27,522 ERROR org.springframework.batch.core.step.AbstractStep [restartedMain] Encountered an error executing step parttioner in job myJob
org.springframework.batch.core.JobExecutionException: Partition handler returned an unsuccessful step
	at org.springframework.batch.core.partition.support.PartitionStep.doExecute(PartitionStep.java:112)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:208)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:148)
	at org.springframework.batch.core.job.AbstractJob.handleStep(AbstractJob.java:410)
	at org.springframework.batch.core.job.SimpleJob.doExecute(SimpleJob.java:136)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:319)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:147)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:140)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.batch.core.configuration.annotation.SimpleBatchConfiguration$PassthruAdvice.invoke(SimpleBatchConfiguration.java:127)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy50.run(Unknown Source)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.execute(JobLauncherApplicationRunner.java:199)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.executeLocalJobs(JobLauncherApplicationRunner.java:173)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.launchJobFromProperties(JobLauncherApplicationRunner.java:160)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:155)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:150)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:786)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:776)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:322)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.example.batch.DemoApplication.main(DemoApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2020-08-13 14:42:27,528 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 266ms
2020-08-13 14:42:27,543 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [FAILED] in 323ms
2020-08-13 14:43:27,543 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [SpringContextShutdownHook] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 14:43:52,585 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 21088 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 14:43:52,593 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 14:43:52,701 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 14:43:54,166 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 14:43:54,633 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 14:43:54,684 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 2.802 seconds (JVM running for 3.994)
2020-08-13 14:43:54,687 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 14:43:54,693 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 14:43:54,694 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 14:43:54,731 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 14:43:54,828 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 14:43:54,918 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 14:43:55,190 ERROR org.springframework.batch.core.step.AbstractStep [task-2] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 2 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[1,Lillie Mendez,03844]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$9d10229b.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.NullPointerException: null
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.getBean(BeanWrapperFieldSetMapper.java:248)
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:197)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 14:43:55,193 ERROR org.springframework.batch.core.step.AbstractStep [task-4] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 2 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[1,Lillie Mendez,03844]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$9d10229b.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.NullPointerException: null
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.getBean(BeanWrapperFieldSetMapper.java:248)
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:197)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 14:43:55,195 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition2] executed in 147ms
2020-08-13 14:43:55,200 ERROR org.springframework.batch.core.step.AbstractStep [task-3] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 2 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[1,Lillie Mendez,03844]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$9d10229b.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.NullPointerException: null
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.getBean(BeanWrapperFieldSetMapper.java:248)
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:197)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 14:43:55,203 INFO org.springframework.batch.core.step.AbstractStep [task-3] Step: [myStep:partition5] executed in 153ms
2020-08-13 14:43:55,209 INFO org.springframework.batch.core.step.AbstractStep [task-4] Step: [myStep:partition0] executed in 158ms
2020-08-13 14:43:55,216 ERROR org.springframework.batch.core.step.AbstractStep [task-5] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 4 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[3,Jennie Fitzgerald,88673]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$9d10229b.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.NullPointerException: null
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.getBean(BeanWrapperFieldSetMapper.java:248)
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:197)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 14:43:55,219 INFO org.springframework.batch.core.step.AbstractStep [task-5] Step: [myStep:partition4] executed in 165ms
2020-08-13 14:43:55,227 ERROR org.springframework.batch.core.step.AbstractStep [task-1] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 2 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[1,Lillie Mendez,03844]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$9d10229b.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.NullPointerException: null
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.getBean(BeanWrapperFieldSetMapper.java:248)
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:197)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 14:43:55,231 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition3] executed in 200ms
2020-08-13 14:43:55,235 ERROR org.springframework.batch.core.step.AbstractStep [task-6] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 2 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[1,Lillie Mendez,03844]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$9d10229b.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.NullPointerException: null
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.getBean(BeanWrapperFieldSetMapper.java:248)
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:197)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 14:43:55,237 INFO org.springframework.batch.core.step.AbstractStep [task-6] Step: [myStep:partition6] executed in 131ms
2020-08-13 14:43:55,242 ERROR org.springframework.batch.core.step.AbstractStep [task-7] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 2 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[1,Lillie Mendez,03844]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$9d10229b.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.NullPointerException: null
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.getBean(BeanWrapperFieldSetMapper.java:248)
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:197)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 14:43:55,251 INFO org.springframework.batch.core.step.AbstractStep [task-7] Step: [myStep:partition1] executed in 137ms
2020-08-13 14:43:55,254 ERROR org.springframework.batch.core.step.AbstractStep [restartedMain] Encountered an error executing step parttioner in job myJob
org.springframework.batch.core.JobExecutionException: Partition handler returned an unsuccessful step
	at org.springframework.batch.core.partition.support.PartitionStep.doExecute(PartitionStep.java:112)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:208)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:148)
	at org.springframework.batch.core.job.AbstractJob.handleStep(AbstractJob.java:410)
	at org.springframework.batch.core.job.SimpleJob.doExecute(SimpleJob.java:136)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:319)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:147)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:140)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.batch.core.configuration.annotation.SimpleBatchConfiguration$PassthruAdvice.invoke(SimpleBatchConfiguration.java:127)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy50.run(Unknown Source)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.execute(JobLauncherApplicationRunner.java:199)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.executeLocalJobs(JobLauncherApplicationRunner.java:173)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.launchJobFromProperties(JobLauncherApplicationRunner.java:160)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:155)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:150)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:786)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:776)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:322)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.example.batch.DemoApplication.main(DemoApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2020-08-13 14:43:55,256 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 337ms
2020-08-13 14:43:55,269 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [FAILED] in 368ms
2020-08-13 14:44:55,269 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [SpringContextShutdownHook] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 14:46:43,425 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 18940 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 14:46:43,432 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 14:46:43,547 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 14:46:45,019 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 14:46:45,457 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 14:46:45,497 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 2.753 seconds (JVM running for 3.995)
2020-08-13 14:46:45,501 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 14:46:45,504 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 14:46:45,509 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 14:46:45,553 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 14:46:45,675 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 14:46:45,748 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 14:46:46,013 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 14:46:46,023 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 14:46:46,030 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 14:46:46,036 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 14:46:46,047 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 14:46:46,056 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 14:46:46,062 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 14:46:46,067 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 14:46:46,077 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 14:46:46,082 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 14:46:46,091 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 14:46:46,095 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 14:46:46,100 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 14:46:46,109 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 14:46:46,118 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 14:46:46,134 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 14:46:46,146 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 14:46:46,152 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 14:46:46,161 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 14:46:46,166 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 14:46:46,180 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 14:46:46,192 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 14:46:46,199 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 14:46:46,217 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 14:46:46,225 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 14:46:46,233 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 14:46:46,242 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 14:46:46,249 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 14:46:46,260 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 14:46:46,276 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 14:46:46,280 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 14:46:46,284 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 14:46:46,290 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 14:46:46,297 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 14:46:46,302 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 14:46:46,310 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 14:46:46,315 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 14:46:46,318 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 14:46:46,323 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 14:46:46,326 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 14:46:46,331 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 14:46:46,336 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 14:46:46,341 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 14:46:46,347 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 14:46:46,354 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 14:46:46,365 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 14:46:46,376 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 14:46:46,382 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 14:46:46,386 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 14:46:46,395 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 14:46:46,401 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 14:46:46,409 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 14:46:46,413 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 14:46:46,417 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 14:46:46,420 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 14:46:46,431 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 14:46:46,435 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 14:46:46,442 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 14:46:46,453 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:46:46,461 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 14:46:46,489 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 14:46:46,493 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 14:46:46,500 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:46:46,511 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 14:46:46,520 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 14:46:46,530 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 14:46:46,536 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:46:46,544 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 14:46:46,549 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 14:46:46,553 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 14:46:46,560 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:46:46,564 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 14:46:46,568 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 14:46:46,575 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:46:46,580 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 14:46:46,596 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 14:46:46,600 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 14:46:46,608 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:46:46,619 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 14:46:46,624 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 14:46:46,634 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 14:46:46,644 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:46:46,649 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 14:46:46,659 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 14:46:46,665 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 14:46:46,674 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 14:46:46,681 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 14:46:46,685 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 14:46:46,694 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 14:46:46,699 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 14:46:46,704 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 14:46:46,711 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 14:46:46,715 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 14:46:46,725 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 14:46:46,730 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 14:46:46,741 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 14:46:46,745 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 14:46:46,750 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 14:46:46,759 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 14:46:46,762 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 14:46:46,767 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 14:46:46,775 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 14:46:46,780 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 14:46:46,784 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 14:46:46,794 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 14:46:46,797 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 14:46:46,801 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 14:46:46,809 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 14:46:46,814 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 14:46:46,818 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 14:46:46,826 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 14:46:46,848 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 14:46:46,852 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 14:46:46,862 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 14:46:46,868 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 14:46:46,876 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 14:46:46,894 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:46:46,898 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 14:46:46,902 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 14:46:46,906 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 14:46:46,909 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:46:46,925 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 14:46:46,928 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 14:46:46,935 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 14:46:46,940 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:46:46,946 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 14:46:46,954 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 14:46:46,959 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 14:46:46,961 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:46:46,965 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 14:46:46,968 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 14:46:46,971 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:46:46,977 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 14:46:46,980 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 14:46:46,984 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 14:46:46,994 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:46:46,997 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 14:46:47,000 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 14:46:47,010 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 14:46:47,025 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:46:47,030 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 14:46:47,033 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 14:46:47,035 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 14:46:47,042 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 14:46:47,045 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 14:46:47,059 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 14:46:47,063 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 14:46:47,069 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 14:46:47,077 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 14:46:47,080 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 14:46:47,084 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 14:46:47,087 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 14:46:47,095 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 14:46:47,099 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 14:46:47,103 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 14:46:47,110 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 14:46:47,113 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 14:46:47,116 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 14:46:47,119 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 14:46:47,126 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 14:46:47,129 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 14:46:47,134 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 14:46:47,137 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 14:46:47,143 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 14:46:47,146 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 14:46:47,150 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 14:46:47,153 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 14:46:47,164 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 14:46:47,174 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 14:46:47,178 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 14:46:47,182 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 14:46:47,186 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 14:46:47,192 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 14:46:47,196 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 14:46:47,199 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 14:46:47,202 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 14:46:47,215 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 14:46:47,224 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 14:46:47,227 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 14:46:47,229 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 14:46:47,233 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 14:46:47,237 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 14:46:47,242 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 14:46:47,245 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 14:46:47,247 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 14:46:47,249 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 14:46:47,252 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 14:46:47,254 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 14:46:47,260 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 14:46:47,262 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 14:46:47,265 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 14:46:47,269 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 14:46:47,276 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 14:46:47,279 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 14:46:47,283 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 14:46:47,286 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 14:46:47,291 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 14:46:47,294 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 14:46:47,297 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:46:47,300 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 14:46:47,309 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 14:46:47,313 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 14:46:47,318 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:46:47,322 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 14:46:47,324 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 14:46:47,326 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 14:46:47,329 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:46:47,331 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 14:46:47,336 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 14:46:47,341 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 14:46:47,343 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:46:47,346 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:46:47,349 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 14:46:47,358 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 14:46:47,362 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 14:46:47,365 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 14:46:47,368 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 14:46:47,371 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:46:47,375 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 14:46:47,379 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 14:46:47,383 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 14:46:47,386 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:46:47,390 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 14:46:47,392 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 14:46:47,395 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 14:46:47,401 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 14:46:47,409 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 14:46:47,412 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 14:46:47,426 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 14:46:47,431 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 14:46:47,435 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 14:46:47,445 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 14:46:47,449 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 14:46:47,459 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 14:46:47,462 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 14:46:47,467 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 14:46:47,475 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 14:46:47,479 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 14:46:47,484 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 14:46:47,494 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 14:46:47,498 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 14:46:47,502 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 14:46:47,508 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 14:46:47,511 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 14:46:47,515 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 14:46:47,518 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 14:46:47,532 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 14:46:47,535 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 14:46:47,581 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 14:46:47,589 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 14:46:47,594 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 14:46:47,597 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 14:46:47,599 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 14:46:47,603 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 14:46:47,609 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 14:46:47,612 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 14:46:47,615 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:46:47,617 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 14:46:47,620 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 14:46:47,625 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 14:46:47,631 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:46:47,644 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 14:46:47,646 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 14:46:47,649 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 14:46:47,651 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:46:47,654 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 14:46:47,659 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 14:46:47,661 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 14:46:47,664 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 14:46:47,666 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:46:47,668 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 14:46:47,670 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:46:47,674 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 14:46:47,676 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 14:46:47,678 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 14:46:47,699 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:46:47,703 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 14:46:47,711 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 14:46:47,714 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 14:46:47,717 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:46:47,722 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 14:46:47,726 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 14:46:47,728 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 14:46:47,730 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 14:46:47,732 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 14:46:47,734 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 14:46:47,736 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 14:46:47,742 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 14:46:47,755 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 14:46:47,760 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 14:46:47,763 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 14:46:47,765 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 14:46:47,767 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 14:46:47,770 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 14:46:47,773 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 14:46:47,775 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 14:46:47,778 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 14:46:47,781 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 14:46:47,783 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 14:46:47,788 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 14:46:47,791 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 14:46:47,804 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 14:46:47,811 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 14:46:47,815 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 14:46:47,817 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 14:46:47,820 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 14:46:47,826 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 14:46:47,828 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 14:46:47,831 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 14:46:47,834 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 14:46:47,839 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 14:46:47,843 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 14:46:47,845 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 14:46:47,847 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 14:46:47,849 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 14:46:47,851 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 14:46:47,855 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 14:46:47,860 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 14:46:47,863 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 14:46:47,865 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 14:46:47,869 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 14:46:47,877 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 14:46:47,880 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 14:46:47,883 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 14:46:47,886 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 14:46:47,892 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 14:46:47,894 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 14:46:47,897 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 14:46:47,901 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 14:46:47,903 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 14:46:47,911 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 14:46:47,913 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 14:46:47,917 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 14:46:47,919 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 14:46:47,925 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 14:46:47,927 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 14:46:47,929 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 14:46:47,931 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 14:46:47,934 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:46:47,936 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 14:46:47,944 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 14:46:47,947 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 14:46:47,950 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:46:47,953 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 14:46:47,959 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 14:46:47,961 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 14:46:47,963 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:46:47,967 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 14:46:47,970 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 14:46:47,975 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 14:46:47,977 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:46:47,980 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:46:47,982 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 14:46:47,984 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 14:46:47,987 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 14:46:47,990 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 14:46:47,992 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 14:46:48,000 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:46:48,003 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 14:46:48,009 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 14:46:48,012 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 14:46:48,015 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:46:48,017 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 14:46:48,020 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 14:46:48,025 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 14:46:48,027 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 14:46:48,029 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 14:46:48,032 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 14:46:48,034 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 14:46:48,036 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 14:46:48,041 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 14:46:48,043 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 14:46:48,045 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 14:46:48,047 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 14:46:48,048 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 14:46:48,050 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 14:46:48,052 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 14:46:48,055 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 14:46:48,068 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 14:46:48,076 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 14:46:48,082 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 14:46:48,085 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 14:46:48,092 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 14:46:48,118 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 14:46:48,126 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 14:46:48,129 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 14:46:48,131 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 14:46:48,133 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 14:46:48,135 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 14:46:48,137 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 14:46:48,142 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 14:46:48,144 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 14:46:48,150 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 14:46:48,152 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 14:46:48,157 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 14:46:48,160 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 14:46:48,163 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:46:48,165 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 14:46:48,168 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 14:46:48,175 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 14:46:48,178 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:46:48,181 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 14:46:48,184 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 14:46:48,186 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 14:46:48,192 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:46:48,195 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 14:46:48,202 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 14:46:48,211 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 14:46:48,213 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 14:46:48,223 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:46:48,228 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 14:46:48,231 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:46:48,233 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 14:46:48,235 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 14:46:48,242 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 14:46:48,245 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:46:48,247 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 14:46:48,250 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 14:46:48,252 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 14:46:48,258 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:46:48,261 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 14:46:48,263 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 14:46:48,265 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 14:46:48,268 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 14:46:48,270 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 14:46:48,277 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 14:46:48,279 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 14:46:48,282 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 14:46:48,284 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 14:46:48,286 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 14:46:48,292 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 14:46:48,294 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 14:46:48,296 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 14:46:48,298 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 14:46:48,301 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 14:46:48,326 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 14:46:48,329 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 14:46:48,333 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 14:46:48,335 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 14:46:48,341 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 14:46:48,344 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 14:46:48,346 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 14:46:48,347 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 14:46:48,349 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 14:46:48,351 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 14:46:48,353 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 14:46:48,359 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 14:46:48,363 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 14:46:48,365 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 14:46:48,368 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 14:46:48,376 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 14:46:48,377 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 14:46:48,379 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 14:46:48,381 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 14:46:48,383 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 14:46:48,385 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 14:46:48,391 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 14:46:48,393 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 14:46:48,395 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 14:46:48,398 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 14:46:48,400 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 14:46:48,403 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 14:46:48,408 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 14:46:48,411 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 14:46:48,413 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 14:46:48,416 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 14:46:48,418 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 14:46:48,425 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 14:46:48,427 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 14:46:48,430 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 14:46:48,433 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 14:46:48,437 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 14:46:48,443 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 14:46:48,445 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 14:46:48,448 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 14:46:48,450 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 14:46:48,454 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 14:46:48,456 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 14:46:48,459 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:46:48,461 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 14:46:48,464 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 14:46:48,466 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 14:46:48,468 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:46:48,470 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 14:46:48,472 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 14:46:48,473 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 14:46:48,475 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:46:48,478 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 14:46:48,480 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 14:46:48,485 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 14:46:48,492 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:46:48,494 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:46:48,498 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 14:46:48,500 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 14:46:48,502 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 14:46:48,509 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 14:46:48,511 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 14:46:48,512 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:46:48,514 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 14:46:48,516 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 14:46:48,518 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 14:46:48,519 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:46:48,524 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 14:46:48,526 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 14:46:48,528 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 14:46:48,530 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 14:46:48,532 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 14:46:48,535 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 14:46:48,541 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 14:46:48,543 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 14:46:48,546 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 14:46:48,559 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 14:46:48,565 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 14:46:48,568 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 14:46:48,569 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 14:46:48,575 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 14:46:48,576 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 14:46:48,578 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 14:46:48,579 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 14:46:48,582 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 14:46:48,584 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 14:46:48,585 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 14:46:48,594 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 14:46:48,596 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 14:46:48,608 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 14:46:48,611 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 14:46:48,614 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 14:46:48,616 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 14:46:48,619 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 14:46:48,627 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 14:46:48,629 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 14:46:48,632 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 14:46:48,634 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 14:46:48,637 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 14:46:48,642 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 14:46:48,644 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 14:46:48,646 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:46:48,648 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 14:46:48,650 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 14:46:48,652 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 14:46:48,658 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:46:48,660 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 14:46:48,663 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 14:46:48,665 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 14:46:48,668 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:46:48,670 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 14:46:48,677 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 14:46:48,679 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 14:46:48,681 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 14:46:48,683 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:46:48,685 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 14:46:48,692 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:46:48,694 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 14:46:48,703 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 14:46:48,707 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 14:46:48,709 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:46:48,711 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 14:46:48,713 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 14:46:48,726 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 14:46:48,728 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:46:48,730 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 14:46:48,731 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 14:46:48,733 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 14:46:48,734 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 14:46:48,736 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 14:46:48,737 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 14:46:48,742 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 14:46:48,744 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 14:46:48,746 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 14:46:48,747 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 14:46:48,749 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 14:46:48,750 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 14:46:48,751 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 14:46:48,753 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 14:46:48,758 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 14:46:48,760 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 14:46:48,761 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 14:46:48,763 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 14:46:48,765 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 14:46:48,766 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 14:46:48,767 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 14:46:48,769 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 14:46:48,771 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 14:46:48,776 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 14:46:48,778 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 14:46:48,780 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 14:46:48,783 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 14:46:48,786 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 14:46:48,793 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 14:46:48,795 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 14:46:48,796 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 14:46:48,798 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 14:46:48,800 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 14:46:48,801 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 14:46:48,803 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 14:46:48,804 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 14:46:48,808 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 14:46:48,809 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 14:46:48,810 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 14:46:48,812 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 14:46:48,813 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 14:46:48,814 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 14:46:48,816 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 14:46:48,817 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 14:46:48,819 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 14:46:48,824 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 14:46:48,826 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 14:46:48,827 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 14:46:48,829 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 14:46:48,830 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 14:46:48,832 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 14:46:48,833 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 14:46:48,834 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 14:46:48,836 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 14:46:48,840 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 14:46:48,841 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 14:46:48,843 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 14:46:48,844 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 14:46:48,845 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:46:48,847 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 14:46:48,848 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 14:46:48,850 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 14:46:48,861 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:46:48,863 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 14:46:48,865 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 14:46:48,867 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 14:46:48,868 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:46:48,870 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 14:46:48,874 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 14:46:48,876 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 14:46:48,877 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:46:48,878 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:46:48,880 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 14:46:48,881 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 14:46:48,883 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 14:46:48,897 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 14:46:48,900 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 14:46:48,909 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:46:48,912 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 14:46:48,914 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 14:46:48,916 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 14:46:48,918 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:46:48,920 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 14:46:48,925 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 14:46:48,927 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 14:46:48,928 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 14:46:48,930 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 14:46:48,933 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 14:46:48,935 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 14:46:48,936 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 14:46:48,940 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 14:46:48,942 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 14:46:48,943 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 14:46:48,945 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 14:46:48,947 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 14:46:48,949 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 14:46:48,951 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 14:46:48,952 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 14:46:48,958 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 14:46:48,960 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 14:46:48,961 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 14:46:48,963 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 14:46:48,964 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 14:46:48,966 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 14:46:48,968 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 14:46:48,970 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 14:46:48,974 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 14:46:48,976 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 14:46:48,977 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 14:46:48,979 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 14:46:48,981 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 14:46:48,983 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 14:46:48,985 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 14:46:48,991 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 14:46:48,993 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 14:46:48,995 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 14:46:48,997 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:46:48,998 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 14:46:49,000 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 14:46:49,002 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 14:46:49,014 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:46:49,017 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 14:46:49,019 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 14:46:49,025 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 14:46:49,027 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:46:49,028 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 14:46:49,030 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 14:46:49,032 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 14:46:49,033 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 14:46:49,035 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:46:49,036 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 14:46:49,040 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:46:49,042 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 14:46:49,043 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 14:46:49,045 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 14:46:49,047 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:46:49,048 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 14:46:49,050 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 14:46:49,052 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 14:46:49,060 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:46:49,062 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 14:46:49,065 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 14:46:49,066 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 14:46:49,069 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 14:46:49,074 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 14:46:49,076 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 14:46:49,081 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 14:46:49,083 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 14:46:49,084 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 14:46:49,086 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 14:46:49,087 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 14:46:49,092 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 14:46:49,094 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 14:46:49,096 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 14:46:49,098 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 14:46:49,100 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 14:46:49,101 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 14:46:49,107 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 14:46:49,109 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 14:46:49,111 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 14:46:49,112 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 14:46:49,114 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 14:46:49,115 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 14:46:49,117 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 14:46:49,118 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 14:46:49,119 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 14:46:49,123 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 14:46:49,126 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 14:46:49,128 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 14:46:49,129 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 14:46:49,131 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 14:46:49,133 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 14:46:49,134 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 14:46:49,136 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 14:46:49,137 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 14:46:49,141 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 14:46:49,143 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 14:46:49,144 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 14:46:49,146 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 14:46:49,149 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 14:46:49,150 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 14:46:49,152 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 14:46:49,154 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 14:46:49,159 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 14:46:49,161 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 14:46:49,163 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 14:46:49,165 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 14:46:49,167 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 14:46:49,169 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 14:46:49,170 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 14:46:49,175 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 14:46:49,176 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 14:46:49,178 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 14:46:49,179 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 14:46:49,181 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 14:46:49,183 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 14:46:49,185 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 14:46:49,194 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 14:46:49,209 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:46:49,214 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 14:46:49,216 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 14:46:49,218 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 14:46:49,225 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:46:49,228 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 14:46:49,229 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 14:46:49,231 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 14:46:49,233 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:46:49,240 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 14:46:49,243 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 14:46:49,245 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 14:46:49,248 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:46:49,250 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:46:49,252 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 14:46:49,259 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 14:46:49,260 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 14:46:49,262 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 14:46:49,263 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 14:46:49,265 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:46:49,269 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 14:46:49,273 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 14:46:49,276 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 14:46:49,278 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 14:46:49,279 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 14:46:49,281 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 14:46:49,283 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 14:46:49,285 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 14:46:49,286 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 14:46:49,292 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 14:46:49,294 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 14:46:49,296 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 14:46:49,297 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 14:46:49,298 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 14:46:49,300 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 14:46:49,301 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 14:46:49,303 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 14:46:49,305 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 14:46:49,307 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 14:46:49,309 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 14:46:49,310 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 14:46:49,311 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 14:46:49,313 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 14:46:49,314 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 14:46:49,315 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 14:46:49,317 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 14:46:49,318 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 14:46:49,319 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 14:46:49,324 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 14:46:49,325 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 14:46:49,327 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 14:46:49,329 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 14:46:49,331 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 14:46:49,332 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 14:46:49,334 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 14:46:49,335 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 14:46:49,337 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 14:46:49,341 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 14:46:49,342 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:46:49,343 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 14:46:49,344 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 14:46:49,346 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 14:46:49,347 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:46:49,348 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 14:46:49,349 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 14:46:49,350 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 14:46:49,352 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:46:49,354 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 14:46:49,359 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 14:46:49,360 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 14:46:49,361 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 14:46:49,362 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:46:49,364 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 14:46:49,365 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:46:49,367 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 14:46:49,368 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 14:46:49,369 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 14:46:49,370 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:46:49,374 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 14:46:49,375 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 14:46:49,377 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 14:46:49,378 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 14:46:49,380 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 14:46:49,381 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 14:46:49,383 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 14:46:49,384 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 14:46:49,385 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 14:46:49,387 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 14:46:49,391 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 14:46:49,392 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 14:46:49,394 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 14:46:49,395 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 14:46:49,396 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 14:46:49,397 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 14:46:49,399 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 14:46:49,400 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 14:46:49,401 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 14:46:49,402 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 14:46:49,404 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 14:46:49,407 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 14:46:49,409 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 14:46:49,410 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 14:46:49,412 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 14:46:49,413 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 14:46:49,414 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 14:46:49,415 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 14:46:49,416 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 14:46:49,417 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 14:46:49,419 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 14:46:49,420 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 14:46:49,426 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 14:46:49,431 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 14:46:49,433 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 14:46:49,434 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 14:46:49,435 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 14:46:49,436 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 14:46:49,441 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 14:46:49,443 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 14:46:49,444 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 14:46:49,446 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 14:46:49,448 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 14:46:49,450 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 14:46:49,452 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 14:46:49,457 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 14:46:49,459 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 14:46:49,461 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 14:46:49,463 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 14:46:49,466 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 14:46:49,468 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 14:46:49,472 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 14:46:49,475 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 14:46:49,477 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 14:46:49,478 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 14:46:49,479 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 14:46:49,481 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 14:46:49,482 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 14:46:49,483 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 14:46:49,484 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 14:46:49,486 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 14:46:49,492 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 14:46:49,493 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:46:49,495 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 14:46:49,496 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 14:46:49,498 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 14:46:49,499 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:46:49,501 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 14:46:49,502 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 14:46:49,503 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 14:46:49,508 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:46:49,509 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 14:46:49,510 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 14:46:49,512 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 14:46:49,513 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:46:49,514 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:46:49,516 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 14:46:49,517 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 14:46:49,518 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 14:46:49,520 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 14:46:49,522 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 14:46:49,526 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:46:49,527 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 14:46:49,528 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 14:46:49,530 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 14:46:49,531 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 14:46:49,532 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 14:46:49,533 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 14:46:49,535 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 14:46:49,536 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 14:46:49,537 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 14:46:49,541 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 14:46:49,542 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 14:46:49,544 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 14:46:49,547 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 14:46:49,549 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 14:46:49,550 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 14:46:49,552 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 14:46:49,553 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 14:46:49,559 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 14:46:49,561 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 14:46:49,561 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 14:46:49,563 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 14:46:49,564 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 14:46:49,566 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 14:46:49,567 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 14:46:49,568 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 14:46:49,571 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 14:46:49,574 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 14:46:49,576 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 14:46:49,577 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 14:46:49,578 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 14:46:49,580 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 14:46:49,581 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 14:46:49,582 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 14:46:49,583 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 14:46:49,584 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 14:46:49,585 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 14:46:49,587 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 14:46:49,591 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 14:46:49,592 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:46:49,594 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 14:46:49,595 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 14:46:49,596 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 14:46:49,597 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:46:49,599 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 14:46:49,600 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 14:46:49,601 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 14:46:49,602 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:46:49,605 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 14:46:49,607 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 14:46:49,608 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 14:46:49,609 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 14:46:49,611 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:46:49,612 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 14:46:49,613 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:46:49,615 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 14:46:49,616 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 14:46:49,617 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 14:46:49,619 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:46:49,620 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 14:46:49,625 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 14:46:49,626 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 14:46:49,627 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 14:46:49,628 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 14:46:49,629 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 14:46:49,630 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 14:46:49,632 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 14:46:49,633 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 14:46:49,634 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 14:46:49,635 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 14:46:49,637 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 14:46:49,640 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 14:46:49,641 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 14:46:49,643 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 14:46:49,644 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 14:46:49,645 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 14:46:49,646 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 14:46:49,647 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 14:46:49,649 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 14:46:49,650 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 14:46:49,661 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 14:46:49,663 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 14:46:49,665 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 14:46:49,667 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 14:46:49,668 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 14:46:49,670 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 14:46:49,674 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 14:46:49,676 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 14:46:49,678 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 14:46:49,679 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 14:46:49,681 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 14:46:49,682 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 14:46:49,684 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 14:46:49,685 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 14:46:49,688 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 14:46:49,692 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 14:46:49,693 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 14:46:49,695 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 14:46:49,696 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 14:46:49,698 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 14:46:49,699 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 14:46:49,701 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 14:46:49,702 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 14:46:49,705 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 14:46:49,708 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 14:46:49,710 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 14:46:49,711 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 14:46:49,713 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 14:46:49,714 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 14:46:49,715 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 14:46:49,717 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 14:46:49,718 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 14:46:49,720 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 14:46:49,725 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 14:46:49,727 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 14:46:49,728 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 14:46:49,730 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 14:46:49,732 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 14:46:49,734 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 14:46:49,735 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 14:46:49,739 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 14:46:49,741 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:46:49,743 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 14:46:49,744 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 14:46:49,746 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 14:46:49,747 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:46:49,749 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 14:46:49,750 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 14:46:49,753 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 14:46:49,759 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:46:49,762 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 14:46:49,764 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 14:46:49,765 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 14:46:49,767 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:46:49,769 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:46:49,772 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 14:46:49,775 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 14:46:49,776 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 14:46:49,778 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 14:46:49,779 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 14:46:49,780 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:46:49,782 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 14:46:49,783 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 14:46:49,785 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 14:46:49,786 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 14:46:49,791 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 14:46:49,793 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 14:46:49,795 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 14:46:49,797 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 14:46:49,799 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 14:46:49,801 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 14:46:49,802 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 14:46:49,808 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 14:46:49,810 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 14:46:49,811 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 14:46:49,813 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 14:46:49,815 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 14:46:49,817 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 14:46:49,818 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 14:46:49,820 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 14:46:49,825 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 14:46:49,827 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 14:46:49,829 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 14:46:49,830 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 14:46:49,832 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 14:46:49,833 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 14:46:49,835 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 14:46:49,837 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 14:46:49,841 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 14:46:49,843 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 14:46:49,844 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 14:46:49,846 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 14:46:49,848 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 14:46:49,849 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 14:46:49,851 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 14:46:49,853 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 14:46:49,858 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 14:46:49,860 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 14:46:49,862 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 14:46:49,864 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:46:49,865 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 14:46:49,867 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 14:46:49,869 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 14:46:49,871 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:46:49,875 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 14:46:49,877 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 14:46:49,879 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 14:46:49,881 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:46:49,885 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 14:46:49,887 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 14:46:49,894 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 14:46:49,895 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 14:46:49,897 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:46:49,898 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 14:46:49,900 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:46:49,901 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 14:46:49,903 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 14:46:49,905 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 14:46:49,908 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:46:49,909 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 14:46:49,911 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 14:46:49,912 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 14:46:49,913 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 14:46:49,914 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 14:46:49,916 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 14:46:49,917 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 14:46:49,918 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 14:46:49,919 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 14:46:49,921 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 14:46:49,925 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 14:46:49,927 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 14:46:49,928 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 14:46:49,930 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 14:46:49,931 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 14:46:49,932 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 14:46:49,933 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 14:46:49,935 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 14:46:49,936 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 14:46:49,940 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 14:46:49,941 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 14:46:49,942 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 14:46:49,944 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 14:46:49,945 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 14:46:49,947 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 14:46:49,948 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 14:46:49,949 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 14:46:49,951 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 14:46:49,952 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 14:46:49,958 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 14:46:49,959 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 14:46:49,961 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 14:46:49,962 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 14:46:49,964 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 14:46:49,965 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 14:46:49,966 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 14:46:49,968 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 14:46:49,969 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 14:46:49,973 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 14:46:49,975 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 14:46:49,976 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 14:46:49,978 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 14:46:49,979 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 14:46:49,980 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 14:46:49,982 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 14:46:49,983 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 14:46:49,984 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 14:46:49,986 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 14:46:49,991 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 14:46:49,992 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 14:46:49,993 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 14:46:49,995 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 14:46:49,996 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 14:46:49,998 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 14:46:49,999 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 14:46:50,000 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 14:46:50,001 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 14:46:50,003 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 14:46:50,007 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 14:46:50,009 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 14:46:50,010 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 14:46:50,011 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 14:46:50,012 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:46:50,014 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 14:46:50,015 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 14:46:50,017 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 14:46:50,018 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:46:50,019 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 14:46:50,024 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 14:46:50,025 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 14:46:50,027 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:46:50,028 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 14:46:50,029 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 14:46:50,031 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 14:46:50,033 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:46:50,035 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:46:50,036 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 14:46:50,040 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 14:46:50,042 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 14:46:50,043 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 14:46:50,044 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 14:46:50,046 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:46:50,047 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 14:46:50,048 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 14:46:50,049 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 14:46:50,051 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 14:46:50,052 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 14:46:50,053 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 14:46:50,058 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 14:46:50,059 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 14:46:50,061 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 14:46:50,062 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 14:46:50,064 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 14:46:50,065 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 14:46:50,066 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 14:46:50,068 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 14:46:50,069 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 14:46:50,070 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 14:46:50,074 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 14:46:50,076 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 14:46:50,077 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 14:46:50,079 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 14:46:50,080 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 14:46:50,082 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 14:46:50,083 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 14:46:50,085 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 14:46:50,086 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 14:46:50,091 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 14:46:50,092 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 14:46:50,094 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 14:46:50,095 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 14:46:50,096 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 14:46:50,098 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 14:46:50,099 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 14:46:50,108 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 14:46:50,109 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 14:46:50,111 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 14:46:50,112 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 14:46:50,114 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 14:46:50,115 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 14:46:50,116 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:46:50,117 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 14:46:50,119 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 14:46:50,120 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 14:46:50,124 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:46:50,126 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 14:46:50,127 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 14:46:50,128 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 14:46:50,130 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:46:50,132 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 14:46:50,133 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 14:46:50,134 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 14:46:50,135 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 14:46:50,137 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:46:50,141 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 14:46:50,142 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:46:50,143 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 14:46:50,145 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 14:46:50,158 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 14:46:50,160 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:46:50,163 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 14:46:50,165 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 14:46:50,167 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 14:46:50,169 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 14:46:50,174 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 14:46:50,176 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 14:46:50,179 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 14:46:50,216 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 14:46:50,217 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 14:46:50,219 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 14:46:50,224 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 14:46:50,225 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 14:46:50,227 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 14:46:50,228 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 14:46:50,229 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 14:46:50,231 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 14:46:50,232 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 14:46:50,233 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 14:46:50,235 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 14:46:50,236 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 14:46:50,237 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 14:46:50,242 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 14:46:50,244 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 14:46:50,245 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 14:46:50,247 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 14:46:50,248 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 14:46:50,249 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 14:46:50,251 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 14:46:50,262 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 14:46:50,264 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 14:46:50,265 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 14:46:50,266 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 14:46:50,268 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 14:46:50,269 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 14:46:50,274 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 14:46:50,276 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 14:46:50,278 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 14:46:50,279 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 14:46:50,280 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 14:46:50,282 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 14:46:50,283 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 14:46:50,284 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 14:46:50,285 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 14:46:50,286 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 14:46:50,290 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 14:46:50,292 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 14:46:50,294 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 14:46:50,295 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 14:46:50,297 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 14:46:50,298 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 14:46:50,300 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 14:46:50,301 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 14:46:50,302 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 14:46:50,304 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 14:46:50,307 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 14:46:50,308 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 14:46:50,310 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 14:46:50,310 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 14:46:50,312 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 14:46:50,313 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 14:46:50,315 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 14:46:50,316 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 14:46:50,318 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:46:50,325 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 14:46:50,327 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 14:46:50,329 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 14:46:50,331 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:46:50,333 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 14:46:50,336 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 14:46:50,341 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 14:46:50,345 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:46:50,347 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 14:46:50,349 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 14:46:50,351 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 14:46:50,358 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:46:50,360 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:46:50,361 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 14:46:50,363 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 14:46:50,365 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 14:46:50,367 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 14:46:50,368 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 14:46:50,370 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:46:50,374 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 14:46:50,375 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 14:46:50,377 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 14:46:50,378 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 14:46:50,379 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 14:46:50,381 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 14:46:50,383 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 14:46:50,384 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 14:46:50,386 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 14:46:50,390 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 14:46:50,392 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 14:46:50,393 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 14:46:50,394 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 14:46:50,396 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 14:46:50,397 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 14:46:50,399 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 14:46:50,400 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 14:46:50,401 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 14:46:50,402 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 14:46:50,406 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 14:46:50,408 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 14:46:50,409 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 14:46:50,411 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 14:46:50,412 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 14:46:50,414 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 14:46:50,415 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 14:46:50,417 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 14:46:50,419 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 14:46:50,426 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 14:46:50,427 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 14:46:50,429 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 14:46:50,431 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 14:46:50,433 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 14:46:50,435 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 14:46:50,439 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 14:46:50,442 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 14:46:50,444 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 14:46:50,445 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 14:46:50,447 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:46:50,449 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 14:46:50,451 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 14:46:50,458 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 14:46:50,461 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:46:50,463 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 14:46:50,465 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 14:46:50,467 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 14:46:50,469 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:46:50,475 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 14:46:50,476 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 14:46:50,478 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 14:46:50,479 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 14:46:50,480 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:46:50,482 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 14:46:50,483 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:46:50,485 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 14:46:50,486 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 14:46:50,491 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 14:46:50,493 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:46:50,494 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 14:46:50,496 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 14:46:50,498 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 14:46:50,501 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:46:50,537 INFO org.springframework.batch.core.step.AbstractStep [task-6] Step: [myStep:partition3] executed in 4s593ms
2020-08-13 14:46:50,540 INFO org.springframework.batch.core.step.AbstractStep [task-7] Step: [myStep:partition5] executed in 4s595ms
2020-08-13 14:46:50,542 INFO org.springframework.batch.core.step.AbstractStep [task-3] Step: [myStep:partition4] executed in 4s613ms
2020-08-13 14:46:50,542 INFO org.springframework.batch.core.step.AbstractStep [task-5] Step: [myStep:partition0] executed in 4s606ms
2020-08-13 14:46:50,543 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition6] executed in 4s679ms
2020-08-13 14:46:50,544 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition2] executed in 4s636ms
2020-08-13 14:46:50,545 INFO org.springframework.batch.core.step.AbstractStep [task-4] Step: [myStep:partition1] executed in 4s615ms
2020-08-13 14:46:50,546 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 4s797ms
2020-08-13 14:46:50,552 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 4s828ms
2020-08-13 14:47:03,109 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [Thread-99] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 14:47:03,330 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 18940 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 14:47:03,330 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 14:47:04,233 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 14:47:04,566 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 14:47:04,593 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 1.369 seconds (JVM running for 23.091)
2020-08-13 14:47:04,595 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 14:47:04,596 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 14:47:04,596 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 14:47:04,605 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 14:47:04,616 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 14:47:04,628 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 14:47:04,804 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:47:04,841 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:47:04,859 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:47:04,883 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:47:04,900 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:47:04,952 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:47:04,972 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:47:05,061 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:47:05,093 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:47:05,124 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:47:05,146 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:47:05,177 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:47:05,197 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:47:05,216 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:47:05,228 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition3] executed in 565ms
2020-08-13 14:47:05,232 INFO org.springframework.batch.core.step.AbstractStep [task-4] Step: [myStep:partition4] executed in 556ms
2020-08-13 14:47:05,242 INFO org.springframework.batch.core.step.AbstractStep [task-5] Step: [myStep:partition6] executed in 563ms
2020-08-13 14:47:05,248 INFO org.springframework.batch.core.step.AbstractStep [task-7] Step: [myStep:partition1] executed in 580ms
2020-08-13 14:47:05,249 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition5] executed in 570ms
2020-08-13 14:47:05,256 INFO org.springframework.batch.core.step.AbstractStep [task-3] Step: [myStep:partition0] executed in 580ms
2020-08-13 14:47:05,260 INFO org.springframework.batch.core.step.AbstractStep [task-6] Step: [myStep:partition2] executed in 586ms
2020-08-13 14:47:05,262 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 634ms
2020-08-13 14:47:05,266 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 644ms
2020-08-13 14:47:05,274 INFO org.springframework.boot.devtools.autoconfigure.ConditionEvaluationDeltaLoggingListener [restartedMain] Condition evaluation unchanged
2020-08-13 14:48:05,272 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [SpringContextShutdownHook] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 14:50:10,179 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 25268 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 14:50:10,185 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 14:50:10,290 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 14:50:11,719 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 14:50:12,156 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 14:50:12,195 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 2.754 seconds (JVM running for 4.001)
2020-08-13 14:50:12,202 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 14:50:12,205 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 14:50:12,206 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 14:50:12,246 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 14:50:12,322 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 14:50:12,404 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 14:50:12,719 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:50:12,795 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:50:12,871 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:50:12,968 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:50:13,072 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:50:13,156 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:50:13,218 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:50:13,266 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:50:13,304 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:50:13,326 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:50:13,353 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:50:13,372 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:50:13,404 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:50:13,422 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:50:13,444 INFO org.springframework.batch.core.step.AbstractStep [task-5] Step: [myStep:partition3] executed in 920ms
2020-08-13 14:50:13,469 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition2] executed in 968ms
2020-08-13 14:50:13,472 INFO org.springframework.batch.core.step.AbstractStep [task-6] Step: [myStep:partition6] executed in 943ms
2020-08-13 14:50:13,476 INFO org.springframework.batch.core.step.AbstractStep [task-7] Step: [myStep:partition0] executed in 936ms
2020-08-13 14:50:13,485 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition5] executed in 977ms
2020-08-13 14:50:13,492 INFO org.springframework.batch.core.step.AbstractStep [task-3] Step: [myStep:partition4] executed in 981ms
2020-08-13 14:50:13,492 INFO org.springframework.batch.core.step.AbstractStep [task-4] Step: [myStep:partition1] executed in 972ms
2020-08-13 14:50:13,502 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 1s97ms
2020-08-13 14:50:13,510 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 1s134ms
2020-08-13 14:50:23,639 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [Thread-99] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 14:50:23,839 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 25268 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 14:50:23,839 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 14:50:24,371 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 14:50:24,590 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 14:50:24,607 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 0.839 seconds (JVM running for 16.414)
2020-08-13 14:50:24,620 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 14:50:24,620 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 14:50:24,622 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 14:50:24,634 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 14:50:24,640 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 14:50:24,645 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 14:50:24,792 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:50:24,824 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:50:24,881 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:50:24,933 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:50:24,959 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:50:25,023 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:50:25,075 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:50:25,102 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:50:25,139 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:50:25,158 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:50:25,218 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:50:25,271 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:50:25,302 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:50:25,322 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 14:50:25,347 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition3] executed in 661ms
2020-08-13 14:50:25,351 INFO org.springframework.batch.core.step.AbstractStep [task-3] Step: [myStep:partition0] executed in 663ms
2020-08-13 14:50:25,354 INFO org.springframework.batch.core.step.AbstractStep [task-7] Step: [myStep:partition1] executed in 667ms
2020-08-13 14:50:25,363 INFO org.springframework.batch.core.step.AbstractStep [task-4] Step: [myStep:partition4] executed in 675ms
2020-08-13 14:50:25,368 INFO org.springframework.batch.core.step.AbstractStep [task-6] Step: [myStep:partition2] executed in 680ms
2020-08-13 14:50:25,372 INFO org.springframework.batch.core.step.AbstractStep [task-5] Step: [myStep:partition6] executed in 684ms
2020-08-13 14:50:25,376 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition5] executed in 687ms
2020-08-13 14:50:25,382 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 731ms
2020-08-13 14:50:25,387 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 744ms
2020-08-13 14:50:25,390 INFO org.springframework.boot.devtools.autoconfigure.ConditionEvaluationDeltaLoggingListener [restartedMain] Condition evaluation unchanged
2020-08-13 14:51:25,394 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [SpringContextShutdownHook] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 15:12:53,479 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 21224 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 15:12:53,485 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 15:12:53,607 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 15:12:55,136 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 15:12:55,702 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 15:12:55,742 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 2.966 seconds (JVM running for 4.314)
2020-08-13 15:12:55,746 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 15:12:55,753 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 15:12:55,753 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 15:12:55,794 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 15:12:55,889 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 15:12:55,985 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 15:12:56,395 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:12:56,486 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:12:56,575 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:12:56,640 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:12:56,744 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:12:56,821 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:12:56,877 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:12:56,954 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:12:56,983 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:12:57,021 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:12:57,062 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:12:57,094 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:12:57,123 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:12:57,144 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:12:57,162 ERROR org.springframework.batch.core.step.AbstractStep [task-4] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$c3deed69.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:12:57,168 INFO org.springframework.batch.core.step.AbstractStep [task-4] Step: [myStep:partition4] executed in 1s17ms
2020-08-13 15:12:57,191 ERROR org.springframework.batch.core.step.AbstractStep [task-5] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$c3deed69.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:12:57,191 ERROR org.springframework.batch.core.step.AbstractStep [task-2] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$c3deed69.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:12:57,192 ERROR org.springframework.batch.core.step.AbstractStep [task-6] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$c3deed69.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:12:57,200 ERROR org.springframework.batch.core.step.AbstractStep [task-7] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$c3deed69.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:12:57,203 ERROR org.springframework.batch.core.step.AbstractStep [task-1] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$c3deed69.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:12:57,202 ERROR org.springframework.batch.core.step.AbstractStep [task-3] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$c3deed69.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:12:57,205 INFO org.springframework.batch.core.step.AbstractStep [task-5] Step: [myStep:partition6] executed in 1s52ms
2020-08-13 15:12:57,207 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition5] executed in 1s98ms
2020-08-13 15:12:57,211 INFO org.springframework.batch.core.step.AbstractStep [task-6] Step: [myStep:partition0] executed in 1s55ms
2020-08-13 15:12:57,217 INFO org.springframework.batch.core.step.AbstractStep [task-7] Step: [myStep:partition1] executed in 1s60ms
2020-08-13 15:12:57,220 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition3] executed in 1s125ms
2020-08-13 15:12:57,223 INFO org.springframework.batch.core.step.AbstractStep [task-3] Step: [myStep:partition2] executed in 1s90ms
2020-08-13 15:12:57,234 ERROR org.springframework.batch.core.step.AbstractStep [restartedMain] Encountered an error executing step parttioner in job myJob
org.springframework.batch.core.JobExecutionException: Partition handler returned an unsuccessful step
	at org.springframework.batch.core.partition.support.PartitionStep.doExecute(PartitionStep.java:112)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:208)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:148)
	at org.springframework.batch.core.job.AbstractJob.handleStep(AbstractJob.java:410)
	at org.springframework.batch.core.job.SimpleJob.doExecute(SimpleJob.java:136)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:319)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:147)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:140)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.batch.core.configuration.annotation.SimpleBatchConfiguration$PassthruAdvice.invoke(SimpleBatchConfiguration.java:127)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy50.run(Unknown Source)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.execute(JobLauncherApplicationRunner.java:199)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.executeLocalJobs(JobLauncherApplicationRunner.java:173)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.launchJobFromProperties(JobLauncherApplicationRunner.java:160)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:155)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:150)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:786)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:776)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:322)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.example.batch.DemoApplication.main(DemoApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2020-08-13 15:12:57,237 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 1s251ms
2020-08-13 15:12:57,251 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [FAILED] in 1s291ms
2020-08-13 15:13:57,240 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [SpringContextShutdownHook] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 15:14:19,959 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 14248 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 15:14:19,968 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 15:14:20,072 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 15:14:21,569 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 15:14:22,076 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 15:14:22,119 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 3.412 seconds (JVM running for 4.862)
2020-08-13 15:14:22,122 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 15:14:22,125 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 15:14:22,126 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 15:14:22,178 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 15:14:22,302 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 15:14:22,393 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 15:14:22,725 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:14:22,802 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:14:22,878 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:14:22,941 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:14:23,024 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:14:23,078 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:14:23,146 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:14:23,199 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:14:23,243 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:14:23,278 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:14:23,310 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:14:23,335 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:14:23,362 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:14:23,386 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:14:23,425 ERROR org.springframework.batch.core.step.AbstractStep [task-1] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$a665a227.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:14:23,429 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition2] executed in 918ms
2020-08-13 15:14:23,437 ERROR org.springframework.batch.core.step.AbstractStep [task-7] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$a665a227.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:14:23,441 ERROR org.springframework.batch.core.step.AbstractStep [task-4] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$a665a227.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:14:23,442 ERROR org.springframework.batch.core.step.AbstractStep [task-5] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$a665a227.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:14:23,444 ERROR org.springframework.batch.core.step.AbstractStep [task-2] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$a665a227.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:14:23,447 ERROR org.springframework.batch.core.step.AbstractStep [task-3] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$a665a227.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:14:23,448 ERROR org.springframework.batch.core.step.AbstractStep [task-6] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$a665a227.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:14:23,449 INFO org.springframework.batch.core.step.AbstractStep [task-7] Step: [myStep:partition0] executed in 931ms
2020-08-13 15:14:23,455 INFO org.springframework.batch.core.step.AbstractStep [task-4] Step: [myStep:partition5] executed in 931ms
2020-08-13 15:14:23,460 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition4] executed in 940ms
2020-08-13 15:14:23,467 INFO org.springframework.batch.core.step.AbstractStep [task-5] Step: [myStep:partition1] executed in 946ms
2020-08-13 15:14:23,472 INFO org.springframework.batch.core.step.AbstractStep [task-6] Step: [myStep:partition6] executed in 954ms
2020-08-13 15:14:23,473 INFO org.springframework.batch.core.step.AbstractStep [task-3] Step: [myStep:partition3] executed in 954ms
2020-08-13 15:14:23,487 ERROR org.springframework.batch.core.step.AbstractStep [restartedMain] Encountered an error executing step parttioner in job myJob
org.springframework.batch.core.JobExecutionException: Partition handler returned an unsuccessful step
	at org.springframework.batch.core.partition.support.PartitionStep.doExecute(PartitionStep.java:112)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:208)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:148)
	at org.springframework.batch.core.job.AbstractJob.handleStep(AbstractJob.java:410)
	at org.springframework.batch.core.job.SimpleJob.doExecute(SimpleJob.java:136)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:319)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:147)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:140)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.batch.core.configuration.annotation.SimpleBatchConfiguration$PassthruAdvice.invoke(SimpleBatchConfiguration.java:127)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy50.run(Unknown Source)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.execute(JobLauncherApplicationRunner.java:199)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.executeLocalJobs(JobLauncherApplicationRunner.java:173)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.launchJobFromProperties(JobLauncherApplicationRunner.java:160)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:155)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:150)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:786)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:776)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:322)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.example.batch.DemoApplication.main(DemoApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2020-08-13 15:14:23,488 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 1s94ms
2020-08-13 15:14:23,504 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [FAILED] in 1s133ms
2020-08-13 15:15:23,499 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [SpringContextShutdownHook] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 15:15:59,910 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 6804 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 15:15:59,918 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 15:16:00,023 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 15:16:01,923 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 15:16:02,381 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 15:16:02,421 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 3.244 seconds (JVM running for 4.465)
2020-08-13 15:16:02,425 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 15:16:02,432 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 15:16:02,433 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 15:16:02,475 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 15:16:02,578 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 15:16:02,685 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 15:16:03,002 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:16:03,082 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:16:03,198 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:16:03,256 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:16:03,350 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:16:03,398 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:16:03,453 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:16:03,502 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:16:03,536 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:16:03,556 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:16:03,590 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:16:03,623 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:16:03,656 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:16:03,673 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:16:03,704 ERROR org.springframework.batch.core.step.AbstractStep [task-2] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$b4a6c0b5.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:16:03,710 ERROR org.springframework.batch.core.step.AbstractStep [task-3] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$b4a6c0b5.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:16:03,721 ERROR org.springframework.batch.core.step.AbstractStep [task-1] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$b4a6c0b5.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:16:03,725 INFO org.springframework.batch.core.step.AbstractStep [task-3] Step: [myStep:partition1] executed in 942ms
2020-08-13 15:16:03,728 ERROR org.springframework.batch.core.step.AbstractStep [task-5] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$b4a6c0b5.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:16:03,733 ERROR org.springframework.batch.core.step.AbstractStep [task-7] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$b4a6c0b5.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:16:03,735 ERROR org.springframework.batch.core.step.AbstractStep [task-6] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$b4a6c0b5.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:16:03,737 ERROR org.springframework.batch.core.step.AbstractStep [task-4] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$b4a6c0b5.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:16:03,740 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition6] executed in 969ms
2020-08-13 15:16:03,743 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition4] executed in 971ms
2020-08-13 15:16:03,747 INFO org.springframework.batch.core.step.AbstractStep [task-4] Step: [myStep:partition0] executed in 958ms
2020-08-13 15:16:03,747 INFO org.springframework.batch.core.step.AbstractStep [task-6] Step: [myStep:partition2] executed in 953ms
2020-08-13 15:16:03,748 INFO org.springframework.batch.core.step.AbstractStep [task-7] Step: [myStep:partition5] executed in 948ms
2020-08-13 15:16:03,749 INFO org.springframework.batch.core.step.AbstractStep [task-5] Step: [myStep:partition3] executed in 958ms
2020-08-13 15:16:03,753 ERROR org.springframework.batch.core.step.AbstractStep [restartedMain] Encountered an error executing step parttioner in job myJob
org.springframework.batch.core.JobExecutionException: Partition handler returned an unsuccessful step
	at org.springframework.batch.core.partition.support.PartitionStep.doExecute(PartitionStep.java:112)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:208)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:148)
	at org.springframework.batch.core.job.AbstractJob.handleStep(AbstractJob.java:410)
	at org.springframework.batch.core.job.SimpleJob.doExecute(SimpleJob.java:136)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:319)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:147)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:140)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.batch.core.configuration.annotation.SimpleBatchConfiguration$PassthruAdvice.invoke(SimpleBatchConfiguration.java:127)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy50.run(Unknown Source)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.execute(JobLauncherApplicationRunner.java:199)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.executeLocalJobs(JobLauncherApplicationRunner.java:173)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.launchJobFromProperties(JobLauncherApplicationRunner.java:160)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:155)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:150)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:786)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:776)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:322)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.example.batch.DemoApplication.main(DemoApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2020-08-13 15:16:03,754 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 1s69ms
2020-08-13 15:16:03,767 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [FAILED] in 1s125ms
2020-08-13 15:16:37,457 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 9460 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 15:16:37,465 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 15:16:37,703 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 15:16:39,465 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 15:16:40,029 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 15:16:40,078 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 3.858 seconds (JVM running for 5.287)
2020-08-13 15:16:40,084 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 15:16:40,092 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 15:16:40,095 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 15:16:40,140 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 15:16:40,266 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 15:16:40,346 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 15:16:40,798 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:16:40,915 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:16:41,030 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:16:41,124 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:16:41,201 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:16:41,257 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:16:41,330 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:16:41,361 ERROR org.springframework.batch.core.step.AbstractStep [task-3] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$4b69faa5.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:16:41,365 ERROR org.springframework.batch.core.step.AbstractStep [task-7] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$4b69faa5.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:16:41,368 INFO org.springframework.batch.core.step.AbstractStep [task-3] Step: [myStep:partition0] executed in 869ms
2020-08-13 15:16:41,373 ERROR org.springframework.batch.core.step.AbstractStep [task-6] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$4b69faa5.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:16:41,378 ERROR org.springframework.batch.core.step.AbstractStep [task-5] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$4b69faa5.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:16:41,380 ERROR org.springframework.batch.core.step.AbstractStep [task-2] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$4b69faa5.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:16:41,383 ERROR org.springframework.batch.core.step.AbstractStep [task-1] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$4b69faa5.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:16:41,389 ERROR org.springframework.batch.core.step.AbstractStep [task-4] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$4b69faa5.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:16:41,394 INFO org.springframework.batch.core.step.AbstractStep [task-7] Step: [myStep:partition1] executed in 898ms
2020-08-13 15:16:41,396 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition3] executed in 898ms
2020-08-13 15:16:41,397 INFO org.springframework.batch.core.step.AbstractStep [task-4] Step: [myStep:partition2] executed in 899ms
2020-08-13 15:16:41,399 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition6] executed in 905ms
2020-08-13 15:16:41,399 INFO org.springframework.batch.core.step.AbstractStep [task-5] Step: [myStep:partition5] executed in 901ms
2020-08-13 15:16:41,402 INFO org.springframework.batch.core.step.AbstractStep [task-6] Step: [myStep:partition4] executed in 906ms
2020-08-13 15:16:41,409 ERROR org.springframework.batch.core.step.AbstractStep [restartedMain] Encountered an error executing step parttioner in job myJob
org.springframework.batch.core.JobExecutionException: Partition handler returned an unsuccessful step
	at org.springframework.batch.core.partition.support.PartitionStep.doExecute(PartitionStep.java:112)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:208)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:148)
	at org.springframework.batch.core.job.AbstractJob.handleStep(AbstractJob.java:410)
	at org.springframework.batch.core.job.SimpleJob.doExecute(SimpleJob.java:136)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:319)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:147)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:140)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.batch.core.configuration.annotation.SimpleBatchConfiguration$PassthruAdvice.invoke(SimpleBatchConfiguration.java:127)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy50.run(Unknown Source)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.execute(JobLauncherApplicationRunner.java:199)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.executeLocalJobs(JobLauncherApplicationRunner.java:173)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.launchJobFromProperties(JobLauncherApplicationRunner.java:160)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:155)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:150)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:786)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:776)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:322)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.example.batch.DemoApplication.main(DemoApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2020-08-13 15:16:41,411 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 1s63ms
2020-08-13 15:16:41,426 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [FAILED] in 1s99ms
2020-08-13 15:16:51,528 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 19408 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 15:16:51,534 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 15:16:51,641 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 15:16:53,098 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 15:16:53,604 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 15:16:53,646 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 2.819 seconds (JVM running for 4.007)
2020-08-13 15:16:53,655 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 15:16:53,657 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 15:16:53,659 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 15:16:53,707 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 15:16:53,830 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 15:16:53,921 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 15:16:54,264 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:16:54,331 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:16:54,397 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:16:54,490 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:16:54,582 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:16:54,639 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:16:54,712 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460), Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164), Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407), Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460), Employee(id=41, name=Elva Shaw, salary=64002), Employee(id=42, name=Maurice Hoffman, salary=36672), Employee(id=43, name=Jane Craig, salary=99615), Employee(id=44, name=Isaiah Pratt, salary=24389), Employee(id=45, name=Harry Schultz, salary=24359), Employee(id=46, name=Nannie Patrick, salary=12141), Employee(id=47, name=Allen Roberson, salary=52478), Employee(id=48, name=Mason Ellis, salary=11702), Employee(id=49, name=Justin Elliott, salary=58385), Employee(id=50, name=Antonio Vasquez, salary=50833), Employee(id=51, name=Estelle Stevens, salary=74693), Employee(id=52, name=Leah Perez, salary=57011), Employee(id=53, name=Rosa Bailey, salary=50361), Employee(id=54, name=Richard Hines, salary=14271), Employee(id=55, name=Marion Hanson, salary=82), Employee(id=56, name=Samuel Morris, salary=4956), Employee(id=57, name=Elsie Ross, salary=79452), Employee(id=58, name=Henry Holloway, salary=57028), Employee(id=59, name=Ellen Mason, salary=3599), Employee(id=60, name=Lenora Sparks, salary=84261), Employee(id=61, name=Madge Rios, salary=33989), Employee(id=62, name=Terry Stevens, salary=67339), Employee(id=63, name=Hulda Carpenter, salary=33461), Employee(id=64, name=Verna Santiago, salary=23330), Employee(id=65, name=Timothy Rogers, salary=59816), Employee(id=66, name=Dale Neal, salary=3301), Employee(id=67, name=Blake Fletcher, salary=14506), Employee(id=68, name=Darrell Norris, salary=91611), Employee(id=69, name=Emilie Carlson, salary=7867), Employee(id=70, name=Sean Palmer, salary=42857), Employee(id=71, name=Genevieve Schmidt, salary=42534), Employee(id=72, name=Milton Payne, salary=80300), Employee(id=73, name=Samuel Briggs, salary=55679), Employee(id=74, name=Randy Barber, salary=26046), Employee(id=75, name=Marian Owens, salary=84482), Employee(id=76, name=Ada Tucker, salary=72123), Employee(id=77, name=Cornelia Palmer, salary=40160), Employee(id=78, name=Viola McKinney, salary=28017), Employee(id=79, name=Dustin Moody, salary=2514), Employee(id=80, name=Adele Walker, salary=80866), Employee(id=81, name=Alberta Holloway, salary=2963), Employee(id=82, name=Eleanor Curtis, salary=3715), Employee(id=83, name=Dean Dawson, salary=80811), Employee(id=84, name=Steve McGee, salary=38156), Employee(id=85, name=Pearl Hill, salary=41752), Employee(id=86, name=Isaiah Riley, salary=3437), Employee(id=87, name=Amy Garcia, salary=90970), Employee(id=88, name=Earl Huff, salary=878), Employee(id=89, name=Eddie Farmer, salary=67843), Employee(id=90, name=Alvin Santiago, salary=61882), Employee(id=91, name=Lina Bishop, salary=18192), Employee(id=92, name=Georgia Sparks, salary=20845), Employee(id=93, name=Bertha Rodgers, salary=66620), Employee(id=94, name=Lulu Brewer, salary=21190), Employee(id=95, name=Cornelia Warren, salary=3623), Employee(id=96, name=Mina McGee, salary=24464), Employee(id=97, name=Hettie Summers, salary=46080), Employee(id=98, name=Bertie Bates, salary=40608), Employee(id=99, name=Sarah Poole, salary=53537), Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:16:54,753 ERROR org.springframework.batch.core.step.AbstractStep [task-2] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$d3a68b7b.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:16:54,756 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition2] executed in 716ms
2020-08-13 15:16:54,785 ERROR org.springframework.batch.core.step.AbstractStep [task-3] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$d3a68b7b.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:16:54,791 ERROR org.springframework.batch.core.step.AbstractStep [task-4] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$d3a68b7b.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:16:54,792 ERROR org.springframework.batch.core.step.AbstractStep [task-1] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$d3a68b7b.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:16:54,799 INFO org.springframework.batch.core.step.AbstractStep [task-3] Step: [myStep:partition4] executed in 757ms
2020-08-13 15:16:54,800 ERROR org.springframework.batch.core.step.AbstractStep [task-5] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$d3a68b7b.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:16:54,802 ERROR org.springframework.batch.core.step.AbstractStep [task-7] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$d3a68b7b.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:16:54,803 ERROR org.springframework.batch.core.step.AbstractStep [task-6] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$d3a68b7b.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:16:54,813 INFO org.springframework.batch.core.step.AbstractStep [task-4] Step: [myStep:partition1] executed in 721ms
2020-08-13 15:16:54,823 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition5] executed in 790ms
2020-08-13 15:16:54,829 INFO org.springframework.batch.core.step.AbstractStep [task-5] Step: [myStep:partition3] executed in 731ms
2020-08-13 15:16:54,832 INFO org.springframework.batch.core.step.AbstractStep [task-7] Step: [myStep:partition0] executed in 723ms
2020-08-13 15:16:54,838 INFO org.springframework.batch.core.step.AbstractStep [task-6] Step: [myStep:partition6] executed in 732ms
2020-08-13 15:16:54,844 ERROR org.springframework.batch.core.step.AbstractStep [restartedMain] Encountered an error executing step parttioner in job myJob
org.springframework.batch.core.JobExecutionException: Partition handler returned an unsuccessful step
	at org.springframework.batch.core.partition.support.PartitionStep.doExecute(PartitionStep.java:112)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:208)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:148)
	at org.springframework.batch.core.job.AbstractJob.handleStep(AbstractJob.java:410)
	at org.springframework.batch.core.job.SimpleJob.doExecute(SimpleJob.java:136)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:319)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:147)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:140)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.batch.core.configuration.annotation.SimpleBatchConfiguration$PassthruAdvice.invoke(SimpleBatchConfiguration.java:127)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy50.run(Unknown Source)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.execute(JobLauncherApplicationRunner.java:199)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.executeLocalJobs(JobLauncherApplicationRunner.java:173)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.launchJobFromProperties(JobLauncherApplicationRunner.java:160)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:155)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:150)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:786)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:776)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:322)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.example.batch.DemoApplication.main(DemoApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2020-08-13 15:16:54,846 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 924ms
2020-08-13 15:16:54,858 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [FAILED] in 957ms
2020-08-13 15:17:18,220 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [Thread-99] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 15:17:18,422 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 19408 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 15:17:18,423 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 15:17:20,009 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 15:17:20,332 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 15:17:20,399 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 2.061 seconds (JVM running for 30.76)
2020-08-13 15:17:20,403 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 15:17:20,404 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 15:17:20,405 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 15:17:20,423 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 15:17:20,426 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 15:17:20,440 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 15:17:20,822 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 15:17:20,831 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 15:17:20,836 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 15:17:20,842 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 15:17:20,858 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 15:17:20,867 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 15:17:20,874 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 15:17:20,883 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 15:17:20,897 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 15:17:20,904 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 15:17:20,934 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 15:17:20,940 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 15:17:20,947 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 15:17:20,952 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 15:17:20,956 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 15:17:20,964 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 15:17:20,976 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 15:17:20,989 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 15:17:20,998 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 15:17:21,002 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 15:17:21,006 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 15:17:21,013 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 15:17:21,019 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 15:17:21,021 ERROR org.springframework.batch.core.step.AbstractStep [task-7] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$d3a68b7b.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:17:21,024 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 15:17:21,026 INFO org.springframework.batch.core.step.AbstractStep [task-7] Step: [myStep:partition5] executed in 339ms
2020-08-13 15:17:21,038 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 15:17:21,038 ERROR org.springframework.batch.core.step.AbstractStep [task-4] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$d3a68b7b.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:17:21,042 ERROR org.springframework.batch.core.step.AbstractStep [task-6] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$d3a68b7b.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:17:21,045 INFO com.example.batch.BatchJobConfig$2 [task-7] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 15:17:21,051 INFO org.springframework.batch.core.step.AbstractStep [task-4] Step: [myStep:partition4] executed in 363ms
2020-08-13 15:17:21,074 INFO com.example.batch.BatchJobConfig$2 [task-4] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 15:17:21,075 INFO org.springframework.batch.core.step.AbstractStep [task-6] Step: [myStep:partition2] executed in 388ms
2020-08-13 15:17:21,085 INFO com.example.batch.BatchJobConfig$2 [task-6] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 15:17:21,088 ERROR org.springframework.batch.core.step.AbstractStep [task-1] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$d3a68b7b.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:17:21,090 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition6] executed in 444ms
2020-08-13 15:17:21,101 ERROR org.springframework.batch.core.step.AbstractStep [task-5] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$d3a68b7b.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:17:21,103 ERROR org.springframework.batch.core.step.AbstractStep [task-2] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$d3a68b7b.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:17:21,107 INFO org.springframework.batch.core.step.AbstractStep [task-5] Step: [myStep:partition0] executed in 419ms
2020-08-13 15:17:21,111 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition3] executed in 423ms
2020-08-13 15:17:21,113 ERROR org.springframework.batch.core.step.AbstractStep [task-3] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$d3a68b7b.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:17:21,114 INFO org.springframework.batch.core.step.AbstractStep [task-3] Step: [myStep:partition1] executed in 426ms
2020-08-13 15:17:21,118 ERROR org.springframework.batch.core.step.AbstractStep [restartedMain] Encountered an error executing step parttioner in job myJob
org.springframework.batch.core.JobExecutionException: Partition handler returned an unsuccessful step
	at org.springframework.batch.core.partition.support.PartitionStep.doExecute(PartitionStep.java:112)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:208)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:148)
	at org.springframework.batch.core.job.AbstractJob.handleStep(AbstractJob.java:410)
	at org.springframework.batch.core.job.SimpleJob.doExecute(SimpleJob.java:136)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:319)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:147)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:140)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.batch.core.configuration.annotation.SimpleBatchConfiguration$PassthruAdvice.invoke(SimpleBatchConfiguration.java:127)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy64.run(Unknown Source)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.execute(JobLauncherApplicationRunner.java:199)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.executeLocalJobs(JobLauncherApplicationRunner.java:173)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.launchJobFromProperties(JobLauncherApplicationRunner.java:160)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:155)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:150)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:786)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:776)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:322)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.example.batch.DemoApplication.main(DemoApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2020-08-13 15:17:21,120 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 680ms
2020-08-13 15:17:21,126 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [FAILED] in 690ms
2020-08-13 15:17:21,129 INFO org.springframework.boot.devtools.autoconfigure.ConditionEvaluationDeltaLoggingListener [restartedMain] Condition evaluation unchanged
2020-08-13 15:17:32,070 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [Thread-101] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 15:17:32,332 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 19408 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 15:17:32,335 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 15:17:32,782 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 15:17:32,917 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 15:17:32,931 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 0.676 seconds (JVM running for 43.293)
2020-08-13 15:17:32,933 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 15:17:32,935 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 15:17:32,936 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 15:17:32,946 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 15:17:32,951 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 15:17:32,956 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 15:17:33,056 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 15:17:33,067 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 15:17:33,070 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 15:17:33,074 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 15:17:33,082 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 15:17:33,086 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 15:17:33,091 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 15:17:33,099 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 15:17:33,103 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 15:17:33,113 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 15:17:33,117 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 15:17:33,121 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 15:17:33,130 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 15:17:33,135 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 15:17:33,140 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 15:17:33,150 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 15:17:33,156 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 15:17:33,161 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 15:17:33,167 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 15:17:33,171 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 15:17:33,174 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 15:17:33,181 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 15:17:33,185 ERROR org.springframework.batch.core.step.AbstractStep [task-6] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$d3a68b7b.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:17:33,187 INFO org.springframework.batch.core.step.AbstractStep [task-6] Step: [myStep:partition2] executed in 182ms
2020-08-13 15:17:33,188 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 15:17:33,199 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 15:17:33,203 ERROR org.springframework.batch.core.step.AbstractStep [task-4] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$d3a68b7b.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:17:33,203 INFO com.example.batch.BatchJobConfig$2 [task-6] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 15:17:33,204 INFO org.springframework.batch.core.step.AbstractStep [task-4] Step: [myStep:partition1] executed in 197ms
2020-08-13 15:17:33,211 INFO com.example.batch.BatchJobConfig$2 [task-6] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 15:17:33,220 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 15:17:33,223 INFO com.example.batch.BatchJobConfig$2 [task-6] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 15:17:33,227 ERROR org.springframework.batch.core.step.AbstractStep [task-3] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$d3a68b7b.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:17:33,228 ERROR org.springframework.batch.core.step.AbstractStep [task-5] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$d3a68b7b.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:17:33,229 ERROR org.springframework.batch.core.step.AbstractStep [task-7] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$d3a68b7b.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:17:33,230 ERROR org.springframework.batch.core.step.AbstractStep [task-2] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$d3a68b7b.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:17:33,231 ERROR org.springframework.batch.core.step.AbstractStep [task-1] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$d3a68b7b.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:17:33,241 INFO org.springframework.batch.core.step.AbstractStep [task-3] Step: [myStep:partition6] executed in 234ms
2020-08-13 15:17:33,247 INFO org.springframework.batch.core.step.AbstractStep [task-5] Step: [myStep:partition5] executed in 242ms
2020-08-13 15:17:33,253 INFO org.springframework.batch.core.step.AbstractStep [task-7] Step: [myStep:partition0] executed in 249ms
2020-08-13 15:17:33,257 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition4] executed in 249ms
2020-08-13 15:17:33,260 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition3] executed in 261ms
2020-08-13 15:17:33,262 ERROR org.springframework.batch.core.step.AbstractStep [restartedMain] Encountered an error executing step parttioner in job myJob
org.springframework.batch.core.JobExecutionException: Partition handler returned an unsuccessful step
	at org.springframework.batch.core.partition.support.PartitionStep.doExecute(PartitionStep.java:112)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:208)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:148)
	at org.springframework.batch.core.job.AbstractJob.handleStep(AbstractJob.java:410)
	at org.springframework.batch.core.job.SimpleJob.doExecute(SimpleJob.java:136)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:319)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:147)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:140)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.batch.core.configuration.annotation.SimpleBatchConfiguration$PassthruAdvice.invoke(SimpleBatchConfiguration.java:127)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy70.run(Unknown Source)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.execute(JobLauncherApplicationRunner.java:199)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.executeLocalJobs(JobLauncherApplicationRunner.java:173)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.launchJobFromProperties(JobLauncherApplicationRunner.java:160)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:155)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:150)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:786)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:776)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:322)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.example.batch.DemoApplication.main(DemoApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2020-08-13 15:17:33,264 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 307ms
2020-08-13 15:17:33,268 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [FAILED] in 312ms
2020-08-13 15:17:33,269 INFO org.springframework.boot.devtools.autoconfigure.ConditionEvaluationDeltaLoggingListener [restartedMain] Condition evaluation unchanged
2020-08-13 15:17:43,016 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 204 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 15:17:43,021 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 15:17:43,128 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 15:17:44,597 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 15:17:45,070 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 15:17:45,113 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 2.81 seconds (JVM running for 4.052)
2020-08-13 15:17:45,117 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 15:17:45,120 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 15:17:45,121 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 15:17:45,164 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 15:17:45,268 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 15:17:45,369 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 15:17:45,657 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 15:17:45,680 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 15:17:45,696 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 15:17:45,713 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 15:17:45,728 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 15:17:45,744 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 15:17:45,762 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 15:17:45,786 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 15:17:45,803 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 15:17:45,827 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 15:17:45,844 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 15:17:45,855 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 15:17:45,870 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 15:17:45,883 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 15:17:45,899 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 15:17:45,913 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 15:17:45,925 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 15:17:45,945 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 15:17:45,955 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844), Employee(id=2, name=Augusta Buchanan, salary=39994), Employee(id=3, name=Jennie Fitzgerald, salary=88673), Employee(id=4, name=Myrtie Collier, salary=58553), Employee(id=5, name=Teresa Graham, salary=22326), Employee(id=6, name=George Kim, salary=28946), Employee(id=7, name=Arthur Gregory, salary=93828), Employee(id=8, name=Lelia Colon, salary=27949), Employee(id=9, name=Franklin Graves, salary=10530), Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 15:17:45,964 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684), Employee(id=12, name=John Bell, salary=98593), Employee(id=13, name=Inez Adams, salary=85667), Employee(id=14, name=Marvin Sanders, salary=78995), Employee(id=15, name=Marc Lane, salary=45564), Employee(id=16, name=Verna Guerrero, salary=10867), Employee(id=17, name=Theresa Rivera, salary=99272), Employee(id=18, name=Tom Lee, salary=72071), Employee(id=19, name=Shawn Johnson, salary=22677), Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 15:17:45,977 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044), Employee(id=22, name=Russell Byrd, salary=70425), Employee(id=23, name=Francis Morton, salary=4282), Employee(id=24, name=Viola Carpenter, salary=17734), Employee(id=25, name=Thomas Moreno, salary=85044), Employee(id=26, name=Maria Butler, salary=80494), Employee(id=27, name=Anne Malone, salary=87925), Employee(id=28, name=Randy Simon, salary=4720), Employee(id=29, name=Christian Byrd, salary=53305), Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 15:17:45,984 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 15:17:45,992 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 15:17:45,992 ERROR org.springframework.batch.core.step.AbstractStep [task-3] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$a003356a.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:17:45,995 INFO org.springframework.batch.core.step.AbstractStep [task-3] Step: [myStep:partition1] executed in 485ms
2020-08-13 15:17:45,998 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 15:17:46,012 INFO com.example.batch.BatchJobConfig$2 [task-3] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 15:17:46,028 INFO com.example.batch.BatchJobConfig$2 [task-3] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 15:17:46,037 ERROR org.springframework.batch.core.step.AbstractStep [task-6] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$a003356a.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:17:46,042 INFO org.springframework.batch.core.step.AbstractStep [task-6] Step: [myStep:partition3] executed in 449ms
2020-08-13 15:17:46,049 ERROR org.springframework.batch.core.step.AbstractStep [task-1] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$a003356a.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:17:46,051 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition6] executed in 556ms
2020-08-13 15:17:46,051 ERROR org.springframework.batch.core.step.AbstractStep [task-2] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$a003356a.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:17:46,056 ERROR org.springframework.batch.core.step.AbstractStep [task-5] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$a003356a.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:17:46,060 INFO org.springframework.batch.core.step.AbstractStep [task-5] Step: [myStep:partition4] executed in 515ms
2020-08-13 15:17:46,064 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition5] executed in 558ms
2020-08-13 15:17:46,071 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 15:17:46,071 INFO com.example.batch.BatchJobConfig$2 [task-3] [Employee(id=31, name=Patrick Rodriquez, salary=26210), Employee(id=32, name=Janie Howell, salary=7512), Employee(id=33, name=Herman Sims, salary=48019), Employee(id=34, name=Lula Simon, salary=12704), Employee(id=35, name=Ruth Simmons, salary=18839), Employee(id=36, name=Flora Love, salary=87427), Employee(id=37, name=Ryan Page, salary=36796), Employee(id=38, name=Allen Adkins, salary=52312), Employee(id=39, name=Roxie Carter, salary=4069), Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 15:17:46,076 ERROR org.springframework.batch.core.step.AbstractStep [task-4] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$a003356a.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:17:46,078 INFO org.springframework.batch.core.step.AbstractStep [task-4] Step: [myStep:partition0] executed in 540ms
2020-08-13 15:17:46,080 ERROR org.springframework.batch.core.step.AbstractStep [task-7] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$a003356a.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:17:46,083 INFO org.springframework.batch.core.step.AbstractStep [task-7] Step: [myStep:partition2] executed in 485ms
2020-08-13 15:17:46,086 ERROR org.springframework.batch.core.step.AbstractStep [restartedMain] Encountered an error executing step parttioner in job myJob
org.springframework.batch.core.JobExecutionException: Partition handler returned an unsuccessful step
	at org.springframework.batch.core.partition.support.PartitionStep.doExecute(PartitionStep.java:112)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:208)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:148)
	at org.springframework.batch.core.job.AbstractJob.handleStep(AbstractJob.java:410)
	at org.springframework.batch.core.job.SimpleJob.doExecute(SimpleJob.java:136)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:319)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:147)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:140)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.batch.core.configuration.annotation.SimpleBatchConfiguration$PassthruAdvice.invoke(SimpleBatchConfiguration.java:127)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy50.run(Unknown Source)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.execute(JobLauncherApplicationRunner.java:199)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.executeLocalJobs(JobLauncherApplicationRunner.java:173)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.launchJobFromProperties(JobLauncherApplicationRunner.java:160)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:155)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:150)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:786)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:776)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:322)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.example.batch.DemoApplication.main(DemoApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2020-08-13 15:17:46,087 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 707ms
2020-08-13 15:17:46,102 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [FAILED] in 759ms
2020-08-13 15:18:46,101 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [SpringContextShutdownHook] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 15:21:02,656 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 20560 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 15:21:02,662 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 15:21:02,763 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 15:21:04,232 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 15:21:04,707 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 15:21:04,749 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 2.798 seconds (JVM running for 3.991)
2020-08-13 15:21:04,757 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 15:21:04,760 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 15:21:04,761 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 15:21:04,800 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 15:21:04,880 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 15:21:04,971 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 15:21:05,192 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:21:05,216 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:21:05,248 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:21:05,267 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:21:05,289 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:21:05,300 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:21:05,330 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:21:05,356 ERROR org.springframework.batch.core.step.AbstractStep [task-2] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$991acf71.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:21:05,359 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition5] executed in 304ms
2020-08-13 15:21:05,370 ERROR org.springframework.batch.core.step.AbstractStep [task-6] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$991acf71.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:21:05,373 INFO org.springframework.batch.core.step.AbstractStep [task-6] Step: [myStep:partition4] executed in 277ms
2020-08-13 15:21:05,379 ERROR org.springframework.batch.core.step.AbstractStep [task-5] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$991acf71.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:21:05,385 INFO org.springframework.batch.core.step.AbstractStep [task-5] Step: [myStep:partition3] executed in 292ms
2020-08-13 15:21:05,389 ERROR org.springframework.batch.core.step.AbstractStep [task-4] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$991acf71.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:21:05,391 INFO org.springframework.batch.core.step.AbstractStep [task-4] Step: [myStep:partition0] executed in 304ms
2020-08-13 15:21:05,394 ERROR org.springframework.batch.core.step.AbstractStep [task-7] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$991acf71.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:21:05,396 INFO org.springframework.batch.core.step.AbstractStep [task-7] Step: [myStep:partition6] executed in 298ms
2020-08-13 15:21:05,399 ERROR org.springframework.batch.core.step.AbstractStep [task-1] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$991acf71.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:21:05,401 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition2] executed in 351ms
2020-08-13 15:21:05,405 ERROR org.springframework.batch.core.step.AbstractStep [task-3] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$991acf71.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:21:05,407 INFO org.springframework.batch.core.step.AbstractStep [task-3] Step: [myStep:partition1] executed in 336ms
2020-08-13 15:21:05,417 ERROR org.springframework.batch.core.step.AbstractStep [restartedMain] Encountered an error executing step parttioner in job myJob
org.springframework.batch.core.JobExecutionException: Partition handler returned an unsuccessful step
	at org.springframework.batch.core.partition.support.PartitionStep.doExecute(PartitionStep.java:112)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:208)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:148)
	at org.springframework.batch.core.job.AbstractJob.handleStep(AbstractJob.java:410)
	at org.springframework.batch.core.job.SimpleJob.doExecute(SimpleJob.java:136)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:319)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:147)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:140)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.batch.core.configuration.annotation.SimpleBatchConfiguration$PassthruAdvice.invoke(SimpleBatchConfiguration.java:127)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy50.run(Unknown Source)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.execute(JobLauncherApplicationRunner.java:199)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.executeLocalJobs(JobLauncherApplicationRunner.java:173)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.launchJobFromProperties(JobLauncherApplicationRunner.java:160)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:155)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:150)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:786)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:776)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:322)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.example.batch.DemoApplication.main(DemoApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2020-08-13 15:21:05,419 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 446ms
2020-08-13 15:21:05,434 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [FAILED] in 482ms
2020-08-13 15:21:41,389 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [Thread-99] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 15:21:41,603 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 20560 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 15:21:41,605 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 15:21:42,356 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 15:21:42,627 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 15:21:42,663 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 1.169 seconds (JVM running for 41.905)
2020-08-13 15:21:42,667 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 15:21:42,667 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 15:21:42,668 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 15:21:42,678 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 15:21:42,683 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 15:21:42,690 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 15:21:42,948 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:21:42,967 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:21:42,982 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:21:43,005 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:21:43,023 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:21:43,041 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:21:43,069 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:21:43,091 ERROR org.springframework.batch.core.step.AbstractStep [task-7] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$991acf71.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:21:43,099 INFO org.springframework.batch.core.step.AbstractStep [task-7] Step: [myStep:partition2] executed in 260ms
2020-08-13 15:21:43,107 ERROR org.springframework.batch.core.step.AbstractStep [task-1] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$991acf71.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:21:43,108 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition5] executed in 272ms
2020-08-13 15:21:43,117 ERROR org.springframework.batch.core.step.AbstractStep [task-6] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$991acf71.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:21:43,119 INFO org.springframework.batch.core.step.AbstractStep [task-6] Step: [myStep:partition3] executed in 271ms
2020-08-13 15:21:43,124 ERROR org.springframework.batch.core.step.AbstractStep [task-4] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$991acf71.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:21:43,126 ERROR org.springframework.batch.core.step.AbstractStep [task-2] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$991acf71.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:21:43,128 ERROR org.springframework.batch.core.step.AbstractStep [task-5] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$991acf71.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:21:43,140 ERROR org.springframework.batch.core.step.AbstractStep [task-3] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$991acf71.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:21:43,153 INFO org.springframework.batch.core.step.AbstractStep [task-4] Step: [myStep:partition6] executed in 306ms
2020-08-13 15:21:43,140 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition0] executed in 301ms
2020-08-13 15:21:43,162 INFO org.springframework.batch.core.step.AbstractStep [task-3] Step: [myStep:partition4] executed in 323ms
2020-08-13 15:21:43,150 INFO org.springframework.batch.core.step.AbstractStep [task-5] Step: [myStep:partition1] executed in 311ms
2020-08-13 15:21:43,170 ERROR org.springframework.batch.core.step.AbstractStep [restartedMain] Encountered an error executing step parttioner in job myJob
org.springframework.batch.core.JobExecutionException: Partition handler returned an unsuccessful step
	at org.springframework.batch.core.partition.support.PartitionStep.doExecute(PartitionStep.java:112)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:208)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:148)
	at org.springframework.batch.core.job.AbstractJob.handleStep(AbstractJob.java:410)
	at org.springframework.batch.core.job.SimpleJob.doExecute(SimpleJob.java:136)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:319)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:147)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:140)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.batch.core.configuration.annotation.SimpleBatchConfiguration$PassthruAdvice.invoke(SimpleBatchConfiguration.java:127)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy64.run(Unknown Source)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.execute(JobLauncherApplicationRunner.java:199)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.executeLocalJobs(JobLauncherApplicationRunner.java:173)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.launchJobFromProperties(JobLauncherApplicationRunner.java:160)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:155)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:150)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:786)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:776)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:322)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.example.batch.DemoApplication.main(DemoApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2020-08-13 15:21:43,171 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 480ms
2020-08-13 15:21:43,178 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [FAILED] in 490ms
2020-08-13 15:21:43,183 INFO org.springframework.boot.devtools.autoconfigure.ConditionEvaluationDeltaLoggingListener [restartedMain] Condition evaluation unchanged
2020-08-13 15:21:51,233 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 18968 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 15:21:51,239 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 15:21:51,336 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 15:21:52,734 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 15:21:53,255 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 15:21:53,299 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 2.809 seconds (JVM running for 3.998)
2020-08-13 15:21:53,302 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 15:21:53,304 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 15:21:53,305 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 15:21:53,349 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 15:21:53,431 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 15:21:53,551 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 15:21:53,788 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:21:53,814 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:21:53,829 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:21:53,845 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:21:53,862 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:21:53,879 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:21:53,895 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:21:53,937 ERROR org.springframework.batch.core.step.AbstractStep [task-1] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$140dc425.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:21:53,938 ERROR org.springframework.batch.core.step.AbstractStep [task-2] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$140dc425.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:21:53,943 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition4] executed in 245ms
2020-08-13 15:21:53,955 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition2] executed in 303ms
2020-08-13 15:21:53,967 ERROR org.springframework.batch.core.step.AbstractStep [task-3] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$140dc425.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:21:53,969 ERROR org.springframework.batch.core.step.AbstractStep [task-4] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$140dc425.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:21:53,970 ERROR org.springframework.batch.core.step.AbstractStep [task-5] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$140dc425.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:21:53,970 ERROR org.springframework.batch.core.step.AbstractStep [task-6] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$140dc425.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:21:53,976 ERROR org.springframework.batch.core.step.AbstractStep [task-7] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$140dc425.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:21:53,997 INFO org.springframework.batch.core.step.AbstractStep [task-3] Step: [myStep:partition3] executed in 291ms
2020-08-13 15:21:54,000 INFO org.springframework.batch.core.step.AbstractStep [task-4] Step: [myStep:partition1] executed in 287ms
2020-08-13 15:21:54,003 INFO org.springframework.batch.core.step.AbstractStep [task-5] Step: [myStep:partition6] executed in 284ms
2020-08-13 15:21:54,005 INFO org.springframework.batch.core.step.AbstractStep [task-6] Step: [myStep:partition0] executed in 284ms
2020-08-13 15:21:54,007 INFO org.springframework.batch.core.step.AbstractStep [task-7] Step: [myStep:partition5] executed in 283ms
2020-08-13 15:21:54,018 ERROR org.springframework.batch.core.step.AbstractStep [restartedMain] Encountered an error executing step parttioner in job myJob
org.springframework.batch.core.JobExecutionException: Partition handler returned an unsuccessful step
	at org.springframework.batch.core.partition.support.PartitionStep.doExecute(PartitionStep.java:112)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:208)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:148)
	at org.springframework.batch.core.job.AbstractJob.handleStep(AbstractJob.java:410)
	at org.springframework.batch.core.job.SimpleJob.doExecute(SimpleJob.java:136)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:319)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:147)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:140)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.batch.core.configuration.annotation.SimpleBatchConfiguration$PassthruAdvice.invoke(SimpleBatchConfiguration.java:127)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy50.run(Unknown Source)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.execute(JobLauncherApplicationRunner.java:199)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.executeLocalJobs(JobLauncherApplicationRunner.java:173)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.launchJobFromProperties(JobLauncherApplicationRunner.java:160)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:155)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:150)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:786)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:776)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:322)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.example.batch.DemoApplication.main(DemoApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2020-08-13 15:21:54,020 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 464ms
2020-08-13 15:21:54,037 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [FAILED] in 538ms
2020-08-13 15:22:29,941 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [Thread-99] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 15:22:30,129 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 18968 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 15:22:30,130 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 15:22:30,751 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 15:22:30,947 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 15:22:30,973 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 0.928 seconds (JVM running for 41.672)
2020-08-13 15:22:30,978 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 15:22:30,979 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 15:22:30,980 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 15:22:30,998 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 15:22:31,009 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 15:22:31,014 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 15:22:31,156 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:22:31,174 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:22:31,184 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:22:31,210 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:22:31,223 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:22:31,235 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:22:31,239 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:22:31,310 ERROR org.springframework.batch.core.step.AbstractStep [task-6] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$140dc425.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:22:31,311 INFO org.springframework.batch.core.step.AbstractStep [task-6] Step: [myStep:partition0] executed in 245ms
2020-08-13 15:22:31,329 ERROR org.springframework.batch.core.step.AbstractStep [task-5] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$140dc425.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:22:31,348 ERROR org.springframework.batch.core.step.AbstractStep [task-4] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$140dc425.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:22:31,355 INFO org.springframework.batch.core.step.AbstractStep [task-5] Step: [myStep:partition5] executed in 289ms
2020-08-13 15:22:31,356 ERROR org.springframework.batch.core.step.AbstractStep [task-3] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$140dc425.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:22:31,360 INFO org.springframework.batch.core.step.AbstractStep [task-4] Step: [myStep:partition2] executed in 291ms
2020-08-13 15:22:31,362 ERROR org.springframework.batch.core.step.AbstractStep [task-2] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$140dc425.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:22:31,362 ERROR org.springframework.batch.core.step.AbstractStep [task-1] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$140dc425.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:22:31,362 ERROR org.springframework.batch.core.step.AbstractStep [task-7] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$140dc425.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:22:31,373 INFO org.springframework.batch.core.step.AbstractStep [task-3] Step: [myStep:partition6] executed in 311ms
2020-08-13 15:22:31,392 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition4] executed in 333ms
2020-08-13 15:22:31,394 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition3] executed in 334ms
2020-08-13 15:22:31,397 INFO org.springframework.batch.core.step.AbstractStep [task-7] Step: [myStep:partition1] executed in 331ms
2020-08-13 15:22:31,409 ERROR org.springframework.batch.core.step.AbstractStep [restartedMain] Encountered an error executing step parttioner in job myJob
org.springframework.batch.core.JobExecutionException: Partition handler returned an unsuccessful step
	at org.springframework.batch.core.partition.support.PartitionStep.doExecute(PartitionStep.java:112)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:208)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:148)
	at org.springframework.batch.core.job.AbstractJob.handleStep(AbstractJob.java:410)
	at org.springframework.batch.core.job.SimpleJob.doExecute(SimpleJob.java:136)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:319)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:147)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:140)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.batch.core.configuration.annotation.SimpleBatchConfiguration$PassthruAdvice.invoke(SimpleBatchConfiguration.java:127)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy64.run(Unknown Source)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.execute(JobLauncherApplicationRunner.java:199)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.executeLocalJobs(JobLauncherApplicationRunner.java:173)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.launchJobFromProperties(JobLauncherApplicationRunner.java:160)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:155)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:150)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:786)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:776)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:322)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.example.batch.DemoApplication.main(DemoApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2020-08-13 15:22:31,410 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 395ms
2020-08-13 15:22:31,419 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [FAILED] in 404ms
2020-08-13 15:22:31,423 INFO org.springframework.boot.devtools.autoconfigure.ConditionEvaluationDeltaLoggingListener [restartedMain] Condition evaluation unchanged
2020-08-13 15:22:44,156 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 25472 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 15:22:44,161 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 15:22:44,269 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 15:22:45,684 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 15:22:46,287 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 15:22:46,358 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 3.05 seconds (JVM running for 4.263)
2020-08-13 15:22:46,363 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 15:22:46,378 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 15:22:46,379 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 15:22:46,458 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 15:22:46,628 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 15:22:46,717 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 15:22:46,962 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:22:46,981 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:22:47,035 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:22:47,052 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:22:47,065 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:22:47,087 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:22:47,101 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:22:47,124 ERROR org.springframework.batch.core.step.AbstractStep [task-4] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$23bc8cfb.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:22:47,127 INFO org.springframework.batch.core.step.AbstractStep [task-4] Step: [myStep:partition2] executed in 299ms
2020-08-13 15:22:47,179 ERROR org.springframework.batch.core.step.AbstractStep [task-2] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$23bc8cfb.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:22:47,187 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition1] executed in 364ms
2020-08-13 15:22:47,193 ERROR org.springframework.batch.core.step.AbstractStep [task-7] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$23bc8cfb.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:22:47,195 ERROR org.springframework.batch.core.step.AbstractStep [task-1] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$23bc8cfb.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:22:47,198 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition4] executed in 375ms
2020-08-13 15:22:47,201 INFO org.springframework.batch.core.step.AbstractStep [task-7] Step: [myStep:partition0] executed in 298ms
2020-08-13 15:22:47,206 ERROR org.springframework.batch.core.step.AbstractStep [task-5] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$23bc8cfb.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:22:47,206 ERROR org.springframework.batch.core.step.AbstractStep [task-3] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$23bc8cfb.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:22:47,207 INFO org.springframework.batch.core.step.AbstractStep [task-5] Step: [myStep:partition6] executed in 314ms
2020-08-13 15:22:47,207 INFO org.springframework.batch.core.step.AbstractStep [task-3] Step: [myStep:partition5] executed in 381ms
2020-08-13 15:22:47,206 ERROR org.springframework.batch.core.step.AbstractStep [task-6] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$23bc8cfb.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:22:47,210 INFO org.springframework.batch.core.step.AbstractStep [task-6] Step: [myStep:partition3] executed in 312ms
2020-08-13 15:22:47,213 ERROR org.springframework.batch.core.step.AbstractStep [restartedMain] Encountered an error executing step parttioner in job myJob
org.springframework.batch.core.JobExecutionException: Partition handler returned an unsuccessful step
	at org.springframework.batch.core.partition.support.PartitionStep.doExecute(PartitionStep.java:112)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:208)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:148)
	at org.springframework.batch.core.job.AbstractJob.handleStep(AbstractJob.java:410)
	at org.springframework.batch.core.job.SimpleJob.doExecute(SimpleJob.java:136)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:319)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:147)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:140)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.batch.core.configuration.annotation.SimpleBatchConfiguration$PassthruAdvice.invoke(SimpleBatchConfiguration.java:127)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy50.run(Unknown Source)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.execute(JobLauncherApplicationRunner.java:199)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.executeLocalJobs(JobLauncherApplicationRunner.java:173)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.launchJobFromProperties(JobLauncherApplicationRunner.java:160)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:155)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:150)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:786)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:776)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:322)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.example.batch.DemoApplication.main(DemoApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2020-08-13 15:22:47,215 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 497ms
2020-08-13 15:22:47,227 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [FAILED] in 543ms
2020-08-13 15:23:47,219 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [SpringContextShutdownHook] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 15:25:49,490 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 26620 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 15:25:49,499 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 15:25:49,592 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 15:25:51,052 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 15:25:51,535 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 15:25:51,582 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 2.822 seconds (JVM running for 4.025)
2020-08-13 15:25:51,587 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 15:25:51,591 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 15:25:51,593 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 15:25:51,635 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 15:25:51,718 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 15:25:51,809 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 15:25:52,077 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:25:52,089 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:25:52,116 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:25:52,135 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:25:52,151 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:25:52,165 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:25:52,181 INFO com.example.batch.BatchJobConfig$3 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:25:52,219 INFO org.springframework.batch.core.step.AbstractStep [task-4] Step: [myStep:partition6] executed in 227ms
2020-08-13 15:25:52,226 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition2] executed in 300ms
2020-08-13 15:25:52,239 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition4] executed in 291ms
2020-08-13 15:25:52,248 INFO org.springframework.batch.core.step.AbstractStep [task-3] Step: [myStep:partition0] executed in 286ms
2020-08-13 15:25:52,253 INFO org.springframework.batch.core.step.AbstractStep [task-7] Step: [myStep:partition5] executed in 237ms
2020-08-13 15:25:52,253 INFO org.springframework.batch.core.step.AbstractStep [task-6] Step: [myStep:partition3] executed in 244ms
2020-08-13 15:25:52,257 INFO org.springframework.batch.core.step.AbstractStep [task-5] Step: [myStep:partition1] executed in 252ms
2020-08-13 15:25:52,266 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 454ms
2020-08-13 15:25:52,275 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 497ms
2020-08-13 15:26:52,288 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [SpringContextShutdownHook] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 15:28:08,556 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 448 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 15:28:08,562 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 15:28:08,661 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 15:28:10,122 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 15:28:10,597 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 15:28:10,643 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 2.785 seconds (JVM running for 3.998)
2020-08-13 15:28:10,647 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 15:28:10,650 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 15:28:10,653 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 15:28:10,697 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 15:28:10,797 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 15:28:10,944 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 15:28:11,236 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:28:11,257 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:28:11,276 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:28:11,305 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:28:11,316 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:28:11,329 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:28:11,348 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:28:11,387 ERROR org.springframework.batch.core.step.AbstractStep [task-3] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$180fe193.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:28:11,392 INFO org.springframework.batch.core.step.AbstractStep [task-3] Step: [myStep:partition6] executed in 297ms
2020-08-13 15:28:11,428 ERROR org.springframework.batch.core.step.AbstractStep [task-1] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$180fe193.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:28:11,430 ERROR org.springframework.batch.core.step.AbstractStep [task-5] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$180fe193.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:28:11,432 ERROR org.springframework.batch.core.step.AbstractStep [task-6] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$180fe193.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:28:11,437 ERROR org.springframework.batch.core.step.AbstractStep [task-2] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$180fe193.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:28:11,438 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition3] executed in 364ms
2020-08-13 15:28:11,437 ERROR org.springframework.batch.core.step.AbstractStep [task-7] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$180fe193.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:28:11,443 ERROR org.springframework.batch.core.step.AbstractStep [task-4] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$180fe193.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:28:11,450 INFO org.springframework.batch.core.step.AbstractStep [task-5] Step: [myStep:partition2] executed in 326ms
2020-08-13 15:28:11,456 INFO org.springframework.batch.core.step.AbstractStep [task-6] Step: [myStep:partition4] executed in 329ms
2020-08-13 15:28:11,461 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition5] executed in 373ms
2020-08-13 15:28:11,464 INFO org.springframework.batch.core.step.AbstractStep [task-7] Step: [myStep:partition1] executed in 337ms
2020-08-13 15:28:11,472 INFO org.springframework.batch.core.step.AbstractStep [task-4] Step: [myStep:partition0] executed in 359ms
2020-08-13 15:28:11,478 ERROR org.springframework.batch.core.step.AbstractStep [restartedMain] Encountered an error executing step parttioner in job myJob
org.springframework.batch.core.JobExecutionException: Partition handler returned an unsuccessful step
	at org.springframework.batch.core.partition.support.PartitionStep.doExecute(PartitionStep.java:112)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:208)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:148)
	at org.springframework.batch.core.job.AbstractJob.handleStep(AbstractJob.java:410)
	at org.springframework.batch.core.job.SimpleJob.doExecute(SimpleJob.java:136)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:319)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:147)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:140)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.batch.core.configuration.annotation.SimpleBatchConfiguration$PassthruAdvice.invoke(SimpleBatchConfiguration.java:127)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy50.run(Unknown Source)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.execute(JobLauncherApplicationRunner.java:199)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.executeLocalJobs(JobLauncherApplicationRunner.java:173)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.launchJobFromProperties(JobLauncherApplicationRunner.java:160)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:155)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:150)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:786)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:776)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:322)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.example.batch.DemoApplication.main(DemoApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2020-08-13 15:28:11,487 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 542ms
2020-08-13 15:28:11,499 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [FAILED] in 588ms
2020-08-13 15:29:11,083 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 22064 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 15:29:11,090 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 15:29:11,191 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 15:29:12,609 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 15:29:13,045 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 15:29:13,087 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 2.709 seconds (JVM running for 3.941)
2020-08-13 15:29:13,093 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 15:29:13,095 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 15:29:13,096 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 15:29:13,135 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 15:29:13,237 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 15:29:13,330 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 15:29:13,596 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:29:13,612 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 15:29:13,635 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 15:29:13,653 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:29:13,665 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 15:29:13,678 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 15:29:13,695 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:29:13,710 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 15:29:13,727 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 15:29:13,748 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:29:13,764 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 15:29:13,770 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 15:29:13,779 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:29:13,797 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 15:29:13,804 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 15:29:13,813 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:29:13,818 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 15:29:13,827 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 15:29:13,832 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:29:13,844 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 15:29:13,848 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 15:29:13,858 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 15:29:13,868 ERROR org.springframework.batch.core.step.AbstractStep [task-3] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$c6335506.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:29:13,870 INFO org.springframework.batch.core.step.AbstractStep [task-3] Step: [myStep:partition5] executed in 435ms
2020-08-13 15:29:13,874 INFO com.example.batch.BatchJobConfig$2 [task-3] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 15:29:13,878 INFO com.example.batch.BatchJobConfig$2 [task-3] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 15:29:13,884 INFO com.example.batch.BatchJobConfig$2 [task-3] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 15:29:13,889 INFO com.example.batch.BatchJobConfig$2 [task-3] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 15:29:13,893 INFO com.example.batch.BatchJobConfig$2 [task-3] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 15:29:13,895 ERROR org.springframework.batch.core.step.AbstractStep [task-5] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$c6335506.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:29:13,897 INFO org.springframework.batch.core.step.AbstractStep [task-5] Step: [myStep:partition1] executed in 431ms
2020-08-13 15:29:13,899 ERROR org.springframework.batch.core.step.AbstractStep [task-6] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$c6335506.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:29:13,901 INFO com.example.batch.BatchJobConfig$2 [task-3] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 15:29:13,901 ERROR org.springframework.batch.core.step.AbstractStep [task-7] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$c6335506.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:29:13,902 ERROR org.springframework.batch.core.step.AbstractStep [task-2] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$c6335506.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:29:13,906 ERROR org.springframework.batch.core.step.AbstractStep [task-4] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$c6335506.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:29:13,931 INFO org.springframework.batch.core.step.AbstractStep [task-6] Step: [myStep:partition0] executed in 462ms
2020-08-13 15:29:13,940 INFO org.springframework.batch.core.step.AbstractStep [task-7] Step: [myStep:partition3] executed in 471ms
2020-08-13 15:29:13,947 ERROR org.springframework.batch.core.step.AbstractStep [task-1] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$c6335506.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:29:13,949 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition2] executed in 534ms
2020-08-13 15:29:13,952 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition4] executed in 526ms
2020-08-13 15:29:13,960 INFO org.springframework.batch.core.step.AbstractStep [task-4] Step: [myStep:partition6] executed in 525ms
2020-08-13 15:29:13,964 ERROR org.springframework.batch.core.step.AbstractStep [restartedMain] Encountered an error executing step parttioner in job myJob
org.springframework.batch.core.JobExecutionException: Partition handler returned an unsuccessful step
	at org.springframework.batch.core.partition.support.PartitionStep.doExecute(PartitionStep.java:112)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:208)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:148)
	at org.springframework.batch.core.job.AbstractJob.handleStep(AbstractJob.java:410)
	at org.springframework.batch.core.job.SimpleJob.doExecute(SimpleJob.java:136)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:319)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:147)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:140)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.batch.core.configuration.annotation.SimpleBatchConfiguration$PassthruAdvice.invoke(SimpleBatchConfiguration.java:127)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy50.run(Unknown Source)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.execute(JobLauncherApplicationRunner.java:199)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.executeLocalJobs(JobLauncherApplicationRunner.java:173)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.launchJobFromProperties(JobLauncherApplicationRunner.java:160)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:155)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:150)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:786)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:776)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:322)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.example.batch.DemoApplication.main(DemoApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2020-08-13 15:29:13,967 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 635ms
2020-08-13 15:29:13,978 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [FAILED] in 670ms
2020-08-13 15:30:13,933 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [Thread-99] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 15:30:14,182 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 22064 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 15:30:14,183 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 15:30:14,869 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 15:30:15,091 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 15:30:15,120 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 1.064 seconds (JVM running for 65.974)
2020-08-13 15:30:15,125 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 15:30:15,135 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 15:30:15,136 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 15:30:15,148 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 15:30:15,152 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 15:30:15,163 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 15:30:15,413 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:30:15,426 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 15:30:15,433 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:30:15,438 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 15:30:15,443 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 15:30:15,448 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 15:30:15,460 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:30:15,464 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 15:30:15,468 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 15:30:15,473 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:30:15,478 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 15:30:15,483 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 15:30:15,489 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:30:15,493 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 15:30:15,519 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 15:30:15,528 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:30:15,532 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 15:30:15,536 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 15:30:15,541 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:30:15,545 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 15:30:15,548 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 15:30:15,552 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 15:30:15,554 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 15:30:15,568 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 15:30:15,569 ERROR org.springframework.batch.core.step.AbstractStep [task-7] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$c6335506.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:30:15,571 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 15:30:15,580 ERROR org.springframework.batch.core.step.AbstractStep [task-5] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$c6335506.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:30:15,581 INFO org.springframework.batch.core.step.AbstractStep [task-5] Step: [myStep:partition3] executed in 296ms
2020-08-13 15:30:15,572 INFO org.springframework.batch.core.step.AbstractStep [task-7] Step: [myStep:partition5] executed in 289ms
2020-08-13 15:30:15,598 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 15:30:15,602 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 15:30:15,606 ERROR org.springframework.batch.core.step.AbstractStep [task-4] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$c6335506.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:30:15,607 INFO org.springframework.batch.core.step.AbstractStep [task-4] Step: [myStep:partition1] executed in 322ms
2020-08-13 15:30:15,610 ERROR org.springframework.batch.core.step.AbstractStep [task-6] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$c6335506.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:30:15,607 ERROR org.springframework.batch.core.step.AbstractStep [task-1] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$c6335506.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:30:15,616 INFO com.example.batch.BatchJobConfig$2 [task-5] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 15:30:15,621 ERROR org.springframework.batch.core.step.AbstractStep [task-3] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$c6335506.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:30:15,628 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition0] executed in 358ms
2020-08-13 15:30:15,632 INFO org.springframework.batch.core.step.AbstractStep [task-6] Step: [myStep:partition4] executed in 342ms
2020-08-13 15:30:15,636 INFO org.springframework.batch.core.step.AbstractStep [task-3] Step: [myStep:partition6] executed in 349ms
2020-08-13 15:30:15,641 ERROR org.springframework.batch.core.step.AbstractStep [task-2] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$c6335506.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:30:15,643 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition2] executed in 356ms
2020-08-13 15:30:15,647 ERROR org.springframework.batch.core.step.AbstractStep [restartedMain] Encountered an error executing step parttioner in job myJob
org.springframework.batch.core.JobExecutionException: Partition handler returned an unsuccessful step
	at org.springframework.batch.core.partition.support.PartitionStep.doExecute(PartitionStep.java:112)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:208)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:148)
	at org.springframework.batch.core.job.AbstractJob.handleStep(AbstractJob.java:410)
	at org.springframework.batch.core.job.SimpleJob.doExecute(SimpleJob.java:136)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:319)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:147)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:140)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.batch.core.configuration.annotation.SimpleBatchConfiguration$PassthruAdvice.invoke(SimpleBatchConfiguration.java:127)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy64.run(Unknown Source)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.execute(JobLauncherApplicationRunner.java:199)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.executeLocalJobs(JobLauncherApplicationRunner.java:173)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.launchJobFromProperties(JobLauncherApplicationRunner.java:160)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:155)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:150)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:786)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:776)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:322)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.example.batch.DemoApplication.main(DemoApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2020-08-13 15:30:15,648 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 484ms
2020-08-13 15:30:15,654 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [FAILED] in 497ms
2020-08-13 15:30:15,672 INFO org.springframework.boot.devtools.autoconfigure.ConditionEvaluationDeltaLoggingListener [restartedMain] Condition evaluation unchanged
2020-08-13 15:30:23,180 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 17100 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 15:30:23,188 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 15:30:23,308 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 15:30:24,895 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 15:30:25,331 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 15:30:25,372 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 2.939 seconds (JVM running for 4.133)
2020-08-13 15:30:25,378 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 15:30:25,381 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 15:30:25,382 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 15:30:25,429 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 15:30:25,529 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 15:30:25,632 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 15:30:25,871 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:30:25,882 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 15:30:25,887 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 15:30:25,898 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:30:25,903 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 15:30:25,912 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 15:30:25,918 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:30:25,923 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 15:30:25,930 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 15:30:25,936 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:30:25,942 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 15:30:25,950 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 15:30:25,957 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:30:25,961 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 15:30:25,967 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 15:30:25,982 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:30:25,998 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 15:30:26,004 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 15:30:26,015 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:30:26,022 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 15:30:26,033 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 15:30:26,038 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 15:30:26,051 ERROR org.springframework.batch.core.step.AbstractStep [task-5] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$993714aa.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:30:26,054 INFO org.springframework.batch.core.step.AbstractStep [task-5] Step: [myStep:partition0] executed in 273ms
2020-08-13 15:30:26,062 INFO com.example.batch.BatchJobConfig$2 [task-5] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 15:30:26,076 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 15:30:26,078 INFO com.example.batch.BatchJobConfig$2 [task-5] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 15:30:26,079 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 15:30:26,081 INFO com.example.batch.BatchJobConfig$2 [task-5] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 15:30:26,083 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 15:30:26,087 ERROR org.springframework.batch.core.step.AbstractStep [task-2] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$993714aa.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:30:26,090 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition5] executed in 337ms
2020-08-13 15:30:26,093 ERROR org.springframework.batch.core.step.AbstractStep [task-6] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$993714aa.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:30:26,095 INFO org.springframework.batch.core.step.AbstractStep [task-6] Step: [myStep:partition3] executed in 311ms
2020-08-13 15:30:26,098 ERROR org.springframework.batch.core.step.AbstractStep [task-7] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$993714aa.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:30:26,100 INFO org.springframework.batch.core.step.AbstractStep [task-7] Step: [myStep:partition6] executed in 314ms
2020-08-13 15:30:26,101 ERROR org.springframework.batch.core.step.AbstractStep [task-4] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$993714aa.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:30:26,103 INFO org.springframework.batch.core.step.AbstractStep [task-4] Step: [myStep:partition1] executed in 324ms
2020-08-13 15:30:26,104 ERROR org.springframework.batch.core.step.AbstractStep [task-3] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$993714aa.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:30:26,107 INFO org.springframework.batch.core.step.AbstractStep [task-3] Step: [myStep:partition4] executed in 347ms
2020-08-13 15:30:26,109 ERROR org.springframework.batch.core.step.AbstractStep [task-1] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.file.FlatFileParseException: Parsing error at line: 1 in resource=[file [d:\Spring-Batch\batch\employee.csv]], input=[id,name,salary]
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:189)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.read(AbstractItemCountingItemStreamItemReader.java:93)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$993714aa.read(<generated>)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.doRead(SimpleChunkProvider.java:99)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.read(SimpleChunkProvider.java:180)
	at org.springframework.batch.core.step.item.SimpleChunkProvider$1.doInIteration(SimpleChunkProvider.java:126)
	at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)
	at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)
	at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)
	at org.springframework.batch.core.step.item.SimpleChunkProvider.provide(SimpleChunkProvider.java:118)
	at org.springframework.batch.core.step.item.ChunkOrientedTasklet.execute(ChunkOrientedTasklet.java:71)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:407)
	at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)
	at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)
	at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)
	at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)
	at org.springframework.batch.repeat.support.TaskExecutorRepeatTemplate$ExecutingRunnable.run(TaskExecutorRepeatTemplate.java:262)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: org.springframework.validation.BindException: org.springframework.validation.BeanPropertyBindingResult: 2 errors
Field error in object 'target' on field 'id': rejected value [id]; codes [typeMismatch.target.id,typeMismatch.id,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.id,id]; arguments []; default message [id]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'id'; nested exception is java.lang.NumberFormatException: For input string: "id"]
Field error in object 'target' on field 'salary': rejected value [salary]; codes [typeMismatch.target.salary,typeMismatch.salary,typeMismatch.java.lang.Integer,typeMismatch]; arguments [org.springframework.context.support.DefaultMessageSourceResolvable: codes [target.salary,salary]; arguments []; default message [salary]]; default message [Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'salary'; nested exception is java.lang.NumberFormatException: For input string: "salary"]
	at org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper.mapFieldSet(BeanWrapperFieldSetMapper.java:201)
	at org.springframework.batch.item.file.mapping.DefaultLineMapper.mapLine(DefaultLineMapper.java:43)
	at org.springframework.batch.item.file.FlatFileItemReader.doRead(FlatFileItemReader.java:185)
	... 29 common frames omitted
2020-08-13 15:30:26,111 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition2] executed in 377ms
2020-08-13 15:30:26,114 ERROR org.springframework.batch.core.step.AbstractStep [restartedMain] Encountered an error executing step parttioner in job myJob
org.springframework.batch.core.JobExecutionException: Partition handler returned an unsuccessful step
	at org.springframework.batch.core.partition.support.PartitionStep.doExecute(PartitionStep.java:112)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:208)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:148)
	at org.springframework.batch.core.job.AbstractJob.handleStep(AbstractJob.java:410)
	at org.springframework.batch.core.job.SimpleJob.doExecute(SimpleJob.java:136)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:319)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:147)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:140)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.batch.core.configuration.annotation.SimpleBatchConfiguration$PassthruAdvice.invoke(SimpleBatchConfiguration.java:127)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy50.run(Unknown Source)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.execute(JobLauncherApplicationRunner.java:199)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.executeLocalJobs(JobLauncherApplicationRunner.java:173)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.launchJobFromProperties(JobLauncherApplicationRunner.java:160)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:155)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:150)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:786)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:776)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:322)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.example.batch.DemoApplication.main(DemoApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2020-08-13 15:30:26,116 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 483ms
2020-08-13 15:30:26,128 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [FAILED] in 521ms
2020-08-13 15:31:26,125 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [SpringContextShutdownHook] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 15:31:46,119 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 17696 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 15:31:46,124 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 15:31:46,236 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 15:31:47,663 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 15:31:48,113 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 15:31:48,154 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 2.868 seconds (JVM running for 4.244)
2020-08-13 15:31:48,161 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 15:31:48,164 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 15:31:48,165 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 15:31:48,205 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 15:31:48,298 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 15:31:48,387 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 15:31:48,635 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=name, salary=432)]
2020-08-13 15:31:48,652 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=name, salary=432)]
2020-08-13 15:31:48,658 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:31:48,665 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 15:31:48,669 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 15:31:48,679 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:31:48,688 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 15:31:48,696 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 15:31:48,701 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=name, salary=432)]
2020-08-13 15:31:48,706 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:31:48,715 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 15:31:48,719 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 15:31:48,725 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=name, salary=432)]
2020-08-13 15:31:48,734 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:31:48,739 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 15:31:48,750 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 15:31:48,756 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=name, salary=432)]
2020-08-13 15:31:48,763 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:31:48,768 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 15:31:48,772 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 15:31:48,785 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=name, salary=432)]
2020-08-13 15:31:48,790 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:31:48,797 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 15:31:48,801 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 15:31:48,806 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=name, salary=432)]
2020-08-13 15:31:48,815 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:31:48,819 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 15:31:48,822 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 15:31:48,830 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 15:31:48,833 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 15:31:48,837 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 15:31:48,841 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 15:31:48,845 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 15:31:48,867 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 15:31:48,878 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 15:31:48,887 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 15:31:48,898 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 15:31:48,904 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 15:31:48,913 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 15:31:48,920 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 15:31:48,931 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 15:31:48,939 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 15:31:48,947 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 15:31:48,951 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 15:31:48,958 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 15:31:48,962 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 15:31:48,965 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 15:31:48,970 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 15:31:48,979 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 15:31:48,984 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 15:31:48,990 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 15:31:48,998 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 15:31:49,015 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 15:31:49,020 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 15:31:49,030 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 15:31:49,035 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 15:31:49,045 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 15:31:49,049 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 15:31:49,052 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 15:31:49,055 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 15:31:49,063 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 15:31:49,068 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 15:31:49,073 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 15:31:49,081 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 15:31:49,085 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 15:31:49,093 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 15:31:49,100 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 15:31:49,105 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 15:31:49,115 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 15:31:49,118 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 15:31:49,123 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 15:31:49,133 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 15:31:49,137 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 15:31:49,168 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 15:31:49,173 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 15:31:49,183 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 15:31:49,188 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 15:31:49,196 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 15:31:49,212 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 15:31:49,215 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 15:31:49,220 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 15:31:49,228 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 15:31:49,232 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 15:31:49,239 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 15:31:49,247 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 15:31:49,251 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 15:31:49,254 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 15:31:49,260 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 15:31:49,264 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 15:31:49,267 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 15:31:49,271 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 15:31:49,275 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 15:31:49,278 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 15:31:49,285 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 15:31:49,294 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 15:31:49,300 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 15:31:49,304 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 15:31:49,311 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 15:31:49,316 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 15:31:49,320 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 15:31:49,330 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 15:31:49,335 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 15:31:49,345 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 15:31:49,351 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 15:31:49,356 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 15:31:49,366 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 15:31:49,369 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 15:31:49,371 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 15:31:49,376 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 15:31:49,378 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 15:31:49,381 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 15:31:49,385 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 15:31:49,398 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 15:31:49,402 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 15:31:49,406 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 15:31:49,435 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 15:31:49,438 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 15:31:49,446 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 15:31:49,449 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 15:31:49,452 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 15:31:49,455 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 15:31:49,465 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 15:31:49,471 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 15:31:49,480 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 15:31:49,488 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 15:31:49,501 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 15:31:49,516 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 15:31:49,520 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 15:31:49,526 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 15:31:49,530 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 15:31:49,546 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 15:31:49,550 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 15:31:49,553 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 15:31:49,557 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 15:31:49,561 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 15:31:49,564 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 15:31:49,568 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 15:31:49,570 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 15:31:49,577 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 15:31:49,584 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 15:31:49,587 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 15:31:49,595 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 15:31:49,597 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 15:31:49,600 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 15:31:49,603 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 15:31:49,606 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 15:31:49,616 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 15:31:49,619 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 15:31:49,622 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 15:31:49,631 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 15:31:49,635 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 15:31:49,638 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 15:31:49,651 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 15:31:49,661 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 15:31:49,664 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 15:31:49,667 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 15:31:49,670 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 15:31:49,677 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 15:31:49,681 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 15:31:49,685 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 15:31:49,689 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 15:31:49,696 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 15:31:49,699 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 15:31:49,705 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 15:31:49,712 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 15:31:49,716 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 15:31:49,719 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 15:31:49,722 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 15:31:49,735 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 15:31:49,738 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 15:31:49,745 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 15:31:49,748 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 15:31:49,751 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 15:31:49,754 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 15:31:49,762 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 15:31:49,765 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 15:31:49,768 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 15:31:49,771 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 15:31:49,774 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 15:31:49,780 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 15:31:49,783 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 15:31:49,786 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 15:31:49,789 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 15:31:49,795 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 15:31:49,798 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 15:31:49,801 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 15:31:49,815 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 15:31:49,819 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 15:31:49,821 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 15:31:49,823 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 15:31:49,830 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 15:31:49,845 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 15:31:49,850 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 15:31:49,855 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 15:31:49,864 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 15:31:49,868 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 15:31:49,871 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 15:31:49,880 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 15:31:49,884 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 15:31:49,887 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 15:31:49,889 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 15:31:49,896 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 15:31:49,898 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 15:31:49,900 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 15:31:49,903 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 15:31:49,905 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 15:31:49,908 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 15:31:49,914 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 15:31:49,917 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 15:31:49,919 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 15:31:49,923 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 15:31:49,931 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 15:31:49,937 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 15:31:49,955 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 15:31:49,962 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 15:31:49,966 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 15:31:49,970 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 15:31:49,977 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 15:31:49,980 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 15:31:49,984 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 15:31:49,987 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 15:31:49,989 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 15:31:49,997 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 15:31:50,000 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 15:31:50,003 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 15:31:50,008 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 15:31:50,013 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 15:31:50,016 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 15:31:50,019 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 15:31:50,021 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 15:31:50,042 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 15:31:50,044 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 15:31:50,051 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 15:31:50,055 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 15:31:50,064 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 15:31:50,067 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 15:31:50,069 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 15:31:50,071 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 15:31:50,075 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 15:31:50,079 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 15:31:50,081 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 15:31:50,083 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 15:31:50,085 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 15:31:50,087 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 15:31:50,089 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 15:31:50,093 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 15:31:50,095 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 15:31:50,098 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 15:31:50,106 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 15:31:50,114 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 15:31:50,117 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 15:31:50,119 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 15:31:50,122 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 15:31:50,128 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 15:31:50,130 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 15:31:50,144 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 15:31:50,148 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 15:31:50,150 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 15:31:50,153 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 15:31:50,156 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 15:31:50,159 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 15:31:50,164 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 15:31:50,168 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 15:31:50,170 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 15:31:50,173 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 15:31:50,179 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 15:31:50,181 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 15:31:50,184 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 15:31:50,186 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 15:31:50,188 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 15:31:50,190 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 15:31:50,202 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 15:31:50,205 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 15:31:50,207 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 15:31:50,218 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 15:31:50,221 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 15:31:50,226 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 15:31:50,229 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 15:31:50,233 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 15:31:50,235 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 15:31:50,237 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 15:31:50,245 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 15:31:50,248 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 15:31:50,251 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 15:31:50,253 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 15:31:50,256 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 15:31:50,262 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 15:31:50,330 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 15:31:50,344 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 15:31:50,346 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 15:31:50,350 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 15:31:50,353 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 15:31:50,355 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 15:31:50,361 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 15:31:50,363 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 15:31:50,365 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 15:31:50,367 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 15:31:50,370 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 15:31:50,372 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 15:31:50,375 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 15:31:50,433 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 15:31:50,435 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 15:31:50,438 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 15:31:50,440 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 15:31:50,445 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 15:31:50,447 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 15:31:50,449 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 15:31:50,451 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 15:31:50,453 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 15:31:50,455 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 15:31:50,461 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 15:31:50,463 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 15:31:50,465 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 15:31:50,467 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 15:31:50,469 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 15:31:50,484 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 15:31:50,486 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 15:31:50,488 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 15:31:50,495 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 15:31:50,498 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 15:31:50,502 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 15:31:50,504 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 15:31:50,506 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 15:31:50,511 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 15:31:50,513 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 15:31:50,515 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 15:31:50,517 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 15:31:50,518 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 15:31:50,520 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 15:31:50,522 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 15:31:50,556 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 15:31:50,563 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 15:31:50,565 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 15:31:50,568 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 15:31:50,570 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 15:31:50,572 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 15:31:50,577 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 15:31:50,579 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 15:31:50,581 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 15:31:50,584 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 15:31:50,586 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 15:31:50,588 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 15:31:50,595 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 15:31:50,598 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 15:31:50,600 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 15:31:50,605 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 15:31:50,611 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 15:31:50,613 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 15:31:50,615 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 15:31:50,617 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 15:31:50,619 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 15:31:50,622 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 15:31:50,657 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 15:31:50,663 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 15:31:50,665 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 15:31:50,667 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 15:31:50,669 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 15:31:50,670 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 15:31:50,672 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 15:31:50,676 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 15:31:50,680 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 15:31:50,682 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 15:31:50,685 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 15:31:50,687 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 15:31:50,689 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 15:31:50,691 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 15:31:50,694 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 15:31:50,696 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 15:31:50,698 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 15:31:50,700 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 15:31:50,702 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 15:31:50,704 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 15:31:50,706 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 15:31:50,711 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 15:31:50,719 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 15:31:50,722 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 15:31:50,729 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 15:31:50,733 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 15:31:50,736 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 15:31:50,745 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 15:31:50,748 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 15:31:50,751 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 15:31:50,753 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 15:31:50,755 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 15:31:50,759 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 15:31:50,762 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 15:31:50,765 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 15:31:50,778 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 15:31:50,781 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 15:31:50,783 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 15:31:50,787 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 15:31:50,791 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 15:31:50,795 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 15:31:50,797 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 15:31:50,799 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 15:31:50,802 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 15:31:50,805 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 15:31:50,811 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 15:31:50,814 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 15:31:50,816 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 15:31:50,818 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 15:31:50,822 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 15:31:50,835 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 15:31:50,838 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 15:31:50,843 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 15:31:50,846 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 15:31:50,849 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 15:31:50,851 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 15:31:50,854 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 15:31:50,856 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 15:31:50,862 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 15:31:50,864 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 15:31:50,867 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 15:31:50,868 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 15:31:50,871 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 15:31:50,875 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 15:31:50,881 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 15:31:50,883 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 15:31:50,885 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 15:31:50,887 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 15:31:50,889 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 15:31:50,897 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 15:31:50,900 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 15:31:50,902 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 15:31:50,904 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 15:31:50,906 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 15:31:50,914 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 15:31:50,917 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 15:31:50,919 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 15:31:50,922 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 15:31:50,926 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 15:31:50,929 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 15:31:50,936 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 15:31:50,939 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 15:31:50,946 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 15:31:50,949 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 15:31:50,952 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 15:31:50,954 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 15:31:50,956 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 15:31:50,961 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 15:31:50,964 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 15:31:50,966 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 15:31:50,967 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 15:31:50,969 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 15:31:50,971 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 15:31:50,973 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 15:31:50,980 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 15:31:50,996 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 15:31:50,998 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 15:31:51,001 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 15:31:51,004 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 15:31:51,006 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 15:31:51,011 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 15:31:51,013 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 15:31:51,015 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 15:31:51,017 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 15:31:51,020 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 15:31:51,026 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 15:31:51,029 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 15:31:51,032 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 15:31:51,034 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 15:31:51,038 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 15:31:51,049 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 15:31:51,051 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 15:31:51,054 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 15:31:51,056 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 15:31:51,064 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 15:31:51,066 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 15:31:51,067 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 15:31:51,071 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 15:31:51,079 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 15:31:51,082 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 15:31:51,085 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 15:31:51,087 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 15:31:51,094 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 15:31:51,100 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 15:31:51,104 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 15:31:51,110 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 15:31:51,116 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 15:31:51,120 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 15:31:51,124 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 15:31:51,130 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 15:31:51,133 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 15:31:51,138 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 15:31:51,140 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 15:31:51,146 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 15:31:51,148 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 15:31:51,151 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 15:31:51,153 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 15:31:51,155 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 15:31:51,161 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 15:31:51,165 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 15:31:51,169 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 15:31:51,171 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 15:31:51,173 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 15:31:51,185 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 15:31:51,187 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 15:31:51,189 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 15:31:51,194 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 15:31:51,196 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 15:31:51,198 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 15:31:51,200 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 15:31:51,202 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 15:31:51,213 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 15:31:51,216 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 15:31:51,218 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 15:31:51,221 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 15:31:51,229 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 15:31:51,232 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 15:31:51,236 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 15:31:51,238 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 15:31:51,246 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 15:31:51,249 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 15:31:51,251 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 15:31:51,253 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 15:31:51,255 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 15:31:51,257 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 15:31:51,262 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 15:31:51,278 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 15:31:51,280 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 15:31:51,282 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 15:31:51,284 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 15:31:51,286 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 15:31:51,288 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 15:31:51,292 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 15:31:51,297 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 15:31:51,299 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 15:31:51,301 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 15:31:51,304 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 15:31:51,306 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 15:31:51,309 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 15:31:51,314 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 15:31:51,316 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 15:31:51,320 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 15:31:51,322 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 15:31:51,328 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 15:31:51,330 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 15:31:51,333 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 15:31:51,335 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 15:31:51,337 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 15:31:51,340 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 15:31:51,345 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 15:31:51,348 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 15:31:51,351 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 15:31:51,353 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 15:31:51,355 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 15:31:51,363 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 15:31:51,364 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 15:31:51,366 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 15:31:51,368 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 15:31:51,370 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 15:31:51,372 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 15:31:51,374 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 15:31:51,379 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 15:31:51,381 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 15:31:51,384 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 15:31:51,386 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 15:31:51,388 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 15:31:51,389 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 15:31:51,396 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 15:31:51,398 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 15:31:51,411 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 15:31:51,413 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 15:31:51,414 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 15:31:51,416 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 15:31:51,420 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 15:31:51,422 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 15:31:51,430 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 15:31:51,432 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 15:31:51,434 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 15:31:51,436 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 15:31:51,439 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 15:31:51,444 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 15:31:51,446 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 15:31:51,448 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 15:31:51,450 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 15:31:51,452 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 15:31:51,454 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 15:31:51,460 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 15:31:51,463 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 15:31:51,465 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 15:31:51,467 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 15:31:51,469 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 15:31:51,471 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 15:31:51,477 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 15:31:51,480 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 15:31:51,482 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 15:31:51,485 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 15:31:51,488 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 15:31:51,496 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 15:31:51,498 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 15:31:51,500 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 15:31:51,502 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 15:31:51,504 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 15:31:51,506 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 15:31:51,512 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 15:31:51,516 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 15:31:51,518 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 15:31:51,520 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 15:31:51,522 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 15:31:51,524 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 15:31:51,531 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 15:31:51,533 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 15:31:51,535 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 15:31:51,537 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 15:31:51,539 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 15:31:51,544 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 15:31:51,546 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 15:31:51,548 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 15:31:51,550 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 15:31:51,552 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 15:31:51,553 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 15:31:51,555 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 15:31:51,559 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 15:31:51,562 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 15:31:51,564 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 15:31:51,567 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 15:31:51,569 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 15:31:51,570 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 15:31:51,572 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 15:31:51,578 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 15:31:51,580 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 15:31:51,582 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 15:31:51,585 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 15:31:51,587 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 15:31:51,589 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 15:31:51,595 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 15:31:51,598 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 15:31:51,599 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 15:31:51,601 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 15:31:51,603 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 15:31:51,605 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 15:31:51,611 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 15:31:51,613 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 15:31:51,615 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 15:31:51,617 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 15:31:51,619 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 15:31:51,622 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 15:31:51,625 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 15:31:51,630 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 15:31:51,632 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 15:31:51,634 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 15:31:51,636 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 15:31:51,642 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 15:31:51,645 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 15:31:51,647 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 15:31:51,649 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 15:31:51,650 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 15:31:51,652 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 15:31:51,654 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 15:31:51,656 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 15:31:51,662 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 15:31:51,664 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 15:31:51,666 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 15:31:51,668 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 15:31:51,669 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 15:31:51,671 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 15:31:51,673 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 15:31:51,678 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 15:31:51,680 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 15:31:51,682 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 15:31:51,684 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 15:31:51,686 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 15:31:51,688 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 15:31:51,689 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 15:31:51,695 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 15:31:51,697 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 15:31:51,699 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 15:31:51,701 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 15:31:51,703 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 15:31:51,706 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 15:31:51,712 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 15:31:51,714 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 15:31:51,716 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 15:31:51,718 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 15:31:51,721 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 15:31:51,729 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 15:31:51,731 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 15:31:51,733 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 15:31:51,735 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 15:31:51,743 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 15:31:51,746 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 15:31:51,749 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 15:31:51,751 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 15:31:51,754 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 15:31:51,756 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 15:31:51,762 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 15:31:51,764 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 15:31:51,766 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 15:31:51,768 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 15:31:51,770 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 15:31:51,771 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 15:31:51,783 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 15:31:51,785 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 15:31:51,787 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 15:31:51,789 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 15:31:51,798 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 15:31:51,800 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 15:31:51,801 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 15:31:51,803 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 15:31:51,805 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:31:51,807 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:31:51,817 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:31:51,822 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:31:51,839 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:31:51,848 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:31:51,854 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:31:51,870 INFO org.springframework.batch.core.step.AbstractStep [task-3] Step: [myStep:partition5] executed in 3s381ms
2020-08-13 15:31:51,878 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition2] executed in 3s394ms
2020-08-13 15:31:51,879 INFO org.springframework.batch.core.step.AbstractStep [task-6] Step: [myStep:partition4] executed in 3s349ms
2020-08-13 15:31:51,886 INFO org.springframework.batch.core.step.AbstractStep [task-5] Step: [myStep:partition1] executed in 3s355ms
2020-08-13 15:31:51,887 INFO org.springframework.batch.core.step.AbstractStep [task-7] Step: [myStep:partition0] executed in 3s354ms
2020-08-13 15:31:51,887 INFO org.springframework.batch.core.step.AbstractStep [task-4] Step: [myStep:partition6] executed in 3s383ms
2020-08-13 15:31:51,889 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition3] executed in 3s405ms
2020-08-13 15:31:51,892 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 3s504ms
2020-08-13 15:31:51,900 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 3s547ms
2020-08-13 15:32:24,882 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [Thread-99] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 15:32:25,081 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 17696 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 15:32:25,083 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 15:32:25,727 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 15:32:25,906 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 15:32:25,927 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 0.938 seconds (JVM running for 42.017)
2020-08-13 15:32:25,929 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 15:32:25,930 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 15:32:25,930 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 15:32:25,939 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 15:32:25,943 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 15:32:25,946 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 15:32:26,015 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 15:32:26,024 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 15:32:26,027 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 15:32:26,029 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 15:32:26,031 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 15:32:26,034 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 15:32:26,038 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 15:32:26,040 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 15:32:26,043 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 15:32:26,047 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 15:32:26,049 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 15:32:26,056 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 15:32:26,059 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 15:32:26,063 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 15:32:26,065 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 15:32:26,074 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 15:32:26,107 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 15:32:26,110 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 15:32:26,113 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 15:32:26,118 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 15:32:26,120 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 15:32:26,123 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 15:32:26,124 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 15:32:26,126 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 15:32:26,128 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 15:32:26,130 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 15:32:26,132 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 15:32:26,135 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 15:32:26,156 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 15:32:26,158 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 15:32:26,160 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 15:32:26,162 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 15:32:26,164 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 15:32:26,166 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 15:32:26,171 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 15:32:26,173 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 15:32:26,175 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 15:32:26,177 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 15:32:26,179 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 15:32:26,182 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 15:32:26,191 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 15:32:26,194 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 15:32:26,215 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 15:32:26,243 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 15:32:26,244 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 15:32:26,246 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 15:32:26,248 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 15:32:26,251 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 15:32:26,253 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 15:32:26,255 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 15:32:26,257 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 15:32:26,259 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 15:32:26,262 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 15:32:26,265 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 15:32:26,271 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 15:32:26,273 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 15:32:26,275 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 15:32:26,277 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 15:32:26,278 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 15:32:26,280 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 15:32:26,310 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 15:32:26,313 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 15:32:26,316 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 15:32:26,319 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 15:32:26,321 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 15:32:26,323 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 15:32:26,325 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 15:32:26,326 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 15:32:26,328 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 15:32:26,330 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 15:32:26,332 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 15:32:26,335 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 15:32:26,338 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 15:32:26,340 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 15:32:26,341 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 15:32:26,343 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 15:32:26,345 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 15:32:26,369 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 15:32:26,371 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 15:32:26,374 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 15:32:26,376 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 15:32:26,379 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 15:32:26,381 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 15:32:26,385 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 15:32:26,387 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 15:32:26,389 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 15:32:26,391 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 15:32:26,393 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 15:32:26,395 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 15:32:26,397 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 15:32:26,400 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 15:32:26,403 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 15:32:26,407 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 15:32:26,412 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 15:32:26,416 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 15:32:26,426 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 15:32:26,428 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 15:32:26,430 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 15:32:26,433 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 15:32:26,439 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 15:32:26,441 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 15:32:26,444 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 15:32:26,447 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 15:32:26,448 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 15:32:26,450 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 15:32:26,456 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 15:32:26,458 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 15:32:26,460 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 15:32:26,462 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 15:32:26,464 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 15:32:26,466 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 15:32:26,472 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 15:32:26,474 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 15:32:26,476 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 15:32:26,478 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 15:32:26,480 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 15:32:26,487 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 15:32:26,489 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 15:32:26,492 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 15:32:26,495 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 15:32:26,497 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 15:32:26,504 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 15:32:26,508 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 15:32:26,513 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 15:32:26,522 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 15:32:26,525 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 15:32:26,527 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 15:32:26,529 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 15:32:26,531 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 15:32:26,533 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 15:32:26,537 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 15:32:26,539 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 15:32:26,541 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 15:32:26,543 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 15:32:26,545 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 15:32:26,547 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 15:32:26,555 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 15:32:26,558 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 15:32:26,561 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 15:32:26,564 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 15:32:26,571 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 15:32:26,573 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 15:32:26,575 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 15:32:26,577 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 15:32:26,579 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 15:32:26,581 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 15:32:26,584 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 15:32:26,590 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 15:32:26,592 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 15:32:26,594 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 15:32:26,596 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 15:32:26,603 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 15:32:26,606 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 15:32:26,608 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 15:32:26,610 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 15:32:26,612 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 15:32:26,614 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 15:32:26,616 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 15:32:26,622 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 15:32:26,624 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 15:32:26,626 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 15:32:26,628 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 15:32:26,630 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 15:32:26,639 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 15:32:26,641 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 15:32:26,644 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 15:32:26,645 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 15:32:26,647 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 15:32:26,655 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 15:32:26,658 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 15:32:26,661 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 15:32:26,662 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 15:32:26,664 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 15:32:26,670 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 15:32:26,673 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 15:32:26,674 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 15:32:26,676 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 15:32:26,678 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 15:32:26,680 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 15:32:26,683 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 15:32:26,694 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 15:32:26,696 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 15:32:26,698 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 15:32:26,700 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 15:32:26,707 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 15:32:26,709 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 15:32:26,712 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 15:32:26,716 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 15:32:26,724 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 15:32:26,727 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 15:32:26,730 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 15:32:26,739 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 15:32:26,741 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 15:32:26,743 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 15:32:26,745 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 15:32:26,746 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 15:32:26,749 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 15:32:26,753 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 15:32:26,756 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 15:32:26,758 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 15:32:26,760 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 15:32:26,761 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 15:32:26,763 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 15:32:26,766 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 15:32:26,768 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 15:32:26,772 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 15:32:26,775 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 15:32:26,777 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 15:32:26,779 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 15:32:26,781 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 15:32:26,783 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 15:32:26,788 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 15:32:26,796 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 15:32:26,798 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 15:32:26,800 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 15:32:26,808 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 15:32:26,810 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 15:32:26,812 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 15:32:26,823 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 15:32:26,824 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 15:32:26,826 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 15:32:26,827 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 15:32:26,829 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 15:32:26,830 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 15:32:26,831 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 15:32:26,833 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 15:32:26,835 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 15:32:26,839 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 15:32:26,840 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 15:32:26,842 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 15:32:26,843 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 15:32:26,844 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 15:32:26,846 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 15:32:26,847 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 15:32:26,849 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 15:32:26,854 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 15:32:26,856 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 15:32:26,858 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 15:32:26,859 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 15:32:26,861 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 15:32:26,862 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 15:32:26,864 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 15:32:26,865 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 15:32:26,866 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 15:32:26,870 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 15:32:26,871 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 15:32:26,873 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 15:32:26,874 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 15:32:26,875 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 15:32:26,877 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 15:32:26,878 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 15:32:26,880 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 15:32:26,882 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 15:32:26,884 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 15:32:26,888 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 15:32:26,890 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 15:32:26,894 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 15:32:26,895 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 15:32:26,897 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 15:32:26,898 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 15:32:26,899 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 15:32:26,902 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 15:32:26,904 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 15:32:26,905 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 15:32:26,906 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 15:32:26,907 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 15:32:26,908 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 15:32:26,910 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 15:32:26,911 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 15:32:26,913 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 15:32:26,915 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 15:32:26,918 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 15:32:26,921 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 15:32:26,923 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 15:32:26,927 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 15:32:26,929 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 15:32:26,930 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 15:32:26,932 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 15:32:26,937 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 15:32:26,938 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 15:32:26,939 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 15:32:26,941 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 15:32:26,942 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 15:32:26,944 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 15:32:26,946 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 15:32:26,952 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 15:32:26,954 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 15:32:26,956 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 15:32:26,958 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 15:32:26,960 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 15:32:26,962 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 15:32:26,963 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 15:32:26,965 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 15:32:26,970 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 15:32:26,972 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 15:32:26,974 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 15:32:26,976 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 15:32:26,978 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 15:32:26,979 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 15:32:26,981 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 15:32:26,982 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 15:32:26,988 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 15:32:26,990 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 15:32:26,992 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 15:32:26,994 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 15:32:26,995 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 15:32:26,997 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 15:32:26,998 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 15:32:27,003 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 15:32:27,005 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 15:32:27,006 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 15:32:27,008 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 15:32:27,009 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 15:32:27,010 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 15:32:27,012 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 15:32:27,015 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 15:32:27,024 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 15:32:27,026 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 15:32:27,029 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 15:32:27,030 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 15:32:27,032 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 15:32:27,036 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 15:32:27,039 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 15:32:27,041 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 15:32:27,043 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 15:32:27,046 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 15:32:27,048 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 15:32:27,049 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 15:32:27,055 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 15:32:27,058 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 15:32:27,060 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 15:32:27,062 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 15:32:27,064 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 15:32:27,066 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 15:32:27,072 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 15:32:27,074 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 15:32:27,077 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 15:32:27,078 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 15:32:27,080 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 15:32:27,082 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 15:32:27,088 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 15:32:27,089 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 15:32:27,091 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 15:32:27,092 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 15:32:27,094 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 15:32:27,096 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 15:32:27,098 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 15:32:27,106 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 15:32:27,108 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 15:32:27,109 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 15:32:27,110 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 15:32:27,112 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 15:32:27,113 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 15:32:27,114 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 15:32:27,115 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 15:32:27,121 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 15:32:27,123 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 15:32:27,125 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 15:32:27,127 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 15:32:27,129 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 15:32:27,131 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 15:32:27,133 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 15:32:27,140 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 15:32:27,142 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 15:32:27,144 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 15:32:27,148 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 15:32:27,150 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 15:32:27,156 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 15:32:27,160 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 15:32:27,163 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 15:32:27,165 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 15:32:27,237 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 15:32:27,240 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 15:32:27,242 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 15:32:27,244 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 15:32:27,246 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 15:32:27,247 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 15:32:27,249 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 15:32:27,256 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 15:32:27,258 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 15:32:27,260 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 15:32:27,261 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 15:32:27,263 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 15:32:27,264 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 15:32:27,269 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 15:32:27,271 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 15:32:27,273 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 15:32:27,335 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 15:32:27,338 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 15:32:27,340 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 15:32:27,341 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 15:32:27,343 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 15:32:27,345 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 15:32:27,347 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 15:32:27,355 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 15:32:27,357 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 15:32:27,359 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 15:32:27,360 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 15:32:27,362 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 15:32:27,364 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 15:32:27,366 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 15:32:27,371 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 15:32:27,372 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 15:32:27,374 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 15:32:27,376 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 15:32:27,377 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 15:32:27,419 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 15:32:27,422 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 15:32:27,425 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 15:32:27,438 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 15:32:27,440 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 15:32:27,441 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 15:32:27,442 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 15:32:27,444 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 15:32:27,445 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 15:32:27,447 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 15:32:27,449 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 15:32:27,452 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 15:32:27,456 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 15:32:27,458 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 15:32:27,459 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 15:32:27,461 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 15:32:27,462 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 15:32:27,464 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 15:32:27,465 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 15:32:27,467 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 15:32:27,471 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 15:32:27,472 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 15:32:27,473 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 15:32:27,475 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 15:32:27,476 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 15:32:27,478 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 15:32:27,479 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 15:32:27,480 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 15:32:27,482 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 15:32:27,485 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 15:32:27,489 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 15:32:27,490 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 15:32:27,492 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 15:32:27,494 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 15:32:27,495 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 15:32:27,496 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 15:32:27,498 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 15:32:27,499 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 15:32:27,503 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 15:32:27,505 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 15:32:27,506 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 15:32:27,508 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 15:32:27,510 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 15:32:27,512 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 15:32:27,514 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 15:32:27,515 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 15:32:27,521 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 15:32:27,523 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 15:32:27,525 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 15:32:27,527 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 15:32:27,528 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 15:32:27,530 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 15:32:27,532 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 15:32:27,538 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 15:32:27,540 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 15:32:27,542 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 15:32:27,543 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 15:32:27,545 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 15:32:27,546 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 15:32:27,548 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 15:32:27,550 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 15:32:27,556 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 15:32:27,557 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 15:32:27,559 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 15:32:27,560 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 15:32:27,561 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 15:32:27,563 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 15:32:27,564 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 15:32:27,566 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 15:32:27,572 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 15:32:27,573 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 15:32:27,575 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 15:32:27,576 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 15:32:27,578 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 15:32:27,579 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 15:32:27,581 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 15:32:27,582 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 15:32:27,589 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 15:32:27,593 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 15:32:27,595 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 15:32:27,597 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 15:32:27,598 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 15:32:27,608 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 15:32:27,611 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 15:32:27,612 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 15:32:27,614 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 15:32:27,640 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 15:32:27,642 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 15:32:27,645 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 15:32:27,647 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 15:32:27,649 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 15:32:27,655 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 15:32:27,658 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 15:32:27,660 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 15:32:27,662 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 15:32:27,663 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 15:32:27,664 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 15:32:27,672 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 15:32:27,674 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 15:32:27,676 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 15:32:27,677 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 15:32:27,679 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 15:32:27,680 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 15:32:27,688 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 15:32:27,690 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 15:32:27,692 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 15:32:27,694 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 15:32:27,696 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 15:32:27,697 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 15:32:27,700 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 15:32:27,705 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 15:32:27,707 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 15:32:27,709 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 15:32:27,711 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 15:32:27,714 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 15:32:27,716 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 15:32:27,726 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 15:32:27,728 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 15:32:27,730 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 15:32:27,731 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 15:32:27,734 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 15:32:27,738 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 15:32:27,739 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 15:32:27,741 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 15:32:27,742 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 15:32:27,744 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 15:32:27,746 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 15:32:27,747 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 15:32:27,749 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 15:32:27,750 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 15:32:27,755 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 15:32:27,757 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 15:32:27,758 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 15:32:27,760 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 15:32:27,761 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 15:32:27,764 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 15:32:27,766 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 15:32:27,771 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 15:32:27,772 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 15:32:27,774 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 15:32:27,776 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 15:32:27,778 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 15:32:27,780 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 15:32:27,781 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 15:32:27,787 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 15:32:27,789 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 15:32:27,791 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 15:32:27,792 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 15:32:27,794 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 15:32:27,796 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 15:32:27,797 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 15:32:27,799 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 15:32:27,804 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 15:32:27,806 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 15:32:27,808 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 15:32:27,810 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 15:32:27,812 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 15:32:27,814 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 15:32:27,815 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 15:32:27,821 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 15:32:27,824 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 15:32:27,825 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 15:32:27,827 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 15:32:27,829 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 15:32:27,830 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 15:32:27,832 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 15:32:27,837 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 15:32:27,839 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 15:32:27,841 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 15:32:27,842 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 15:32:27,844 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 15:32:27,846 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 15:32:27,848 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 15:32:27,861 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 15:32:27,863 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 15:32:27,865 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 15:32:27,874 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 15:32:27,877 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 15:32:27,880 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 15:32:27,882 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 15:32:27,884 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 15:32:27,889 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 15:32:27,891 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 15:32:27,893 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 15:32:27,895 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 15:32:27,897 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 15:32:27,898 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 15:32:27,899 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 15:32:27,904 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 15:32:27,906 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 15:32:27,907 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 15:32:27,908 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 15:32:27,910 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 15:32:27,911 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 15:32:27,913 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 15:32:27,914 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 15:32:27,916 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 15:32:27,923 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 15:32:27,926 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 15:32:27,928 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 15:32:27,929 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 15:32:27,931 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 15:32:27,933 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 15:32:27,938 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 15:32:27,940 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 15:32:27,946 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 15:32:27,948 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 15:32:27,949 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 15:32:27,956 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 15:32:27,959 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 15:32:27,961 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 15:32:27,963 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 15:32:27,965 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 15:32:27,969 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 15:32:27,971 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 15:32:27,973 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 15:32:27,973 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 15:32:27,974 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 15:32:27,976 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 15:32:27,977 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 15:32:27,979 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 15:32:27,980 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 15:32:27,981 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 15:32:27,983 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 15:32:27,988 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 15:32:27,990 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 15:32:27,992 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 15:32:27,994 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 15:32:27,995 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 15:32:27,997 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 15:32:28,002 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 15:32:28,005 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 15:32:28,007 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 15:32:28,009 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 15:32:28,011 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 15:32:28,013 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 15:32:28,015 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 15:32:28,021 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 15:32:28,023 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 15:32:28,025 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 15:32:28,027 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 15:32:28,029 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 15:32:28,031 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 15:32:28,035 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 15:32:28,037 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 15:32:28,039 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 15:32:28,040 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 15:32:28,042 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 15:32:28,044 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 15:32:28,051 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 15:32:28,055 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 15:32:28,057 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 15:32:28,060 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 15:32:28,062 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 15:32:28,064 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 15:32:28,071 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 15:32:28,074 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 15:32:28,075 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 15:32:28,077 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 15:32:28,079 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 15:32:28,081 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 15:32:28,086 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 15:32:28,088 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 15:32:28,089 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 15:32:28,091 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 15:32:28,093 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 15:32:28,094 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 15:32:28,096 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 15:32:28,097 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 15:32:28,099 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:32:28,106 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 15:32:28,109 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:32:28,112 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 15:32:28,113 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 15:32:28,116 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:32:28,122 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 15:32:28,123 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 15:32:28,125 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:32:28,128 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 15:32:28,129 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 15:32:28,131 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:32:28,133 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 15:32:28,138 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 15:32:28,140 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:32:28,142 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 15:32:28,144 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 15:32:28,146 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:32:28,157 INFO org.springframework.batch.core.step.AbstractStep [task-7] Step: [myStep:partition0] executed in 2s180ms
2020-08-13 15:32:28,161 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition3] executed in 2s185ms
2020-08-13 15:32:28,165 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition1] executed in 2s191ms
2020-08-13 15:32:28,168 INFO org.springframework.batch.core.step.AbstractStep [task-5] Step: [myStep:partition4] executed in 2s190ms
2020-08-13 15:32:28,176 INFO org.springframework.batch.core.step.AbstractStep [task-6] Step: [myStep:partition6] executed in 2s198ms
2020-08-13 15:32:28,178 INFO org.springframework.batch.core.step.AbstractStep [task-3] Step: [myStep:partition5] executed in 2s203ms
2020-08-13 15:32:28,179 INFO org.springframework.batch.core.step.AbstractStep [task-4] Step: [myStep:partition2] executed in 2s201ms
2020-08-13 15:32:28,180 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 2s234ms
2020-08-13 15:32:28,183 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 2s239ms
2020-08-13 15:32:28,190 INFO org.springframework.boot.devtools.autoconfigure.ConditionEvaluationDeltaLoggingListener [restartedMain] Condition evaluation unchanged
2020-08-13 15:32:45,506 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [Thread-101] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 15:32:45,740 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 17696 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 15:32:45,740 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 15:32:46,255 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 15:32:46,387 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 15:32:46,400 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 0.727 seconds (JVM running for 62.49)
2020-08-13 15:32:46,402 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 15:32:46,403 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 15:32:46,403 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 15:32:46,411 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 15:32:46,418 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 15:32:46,422 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 15:32:46,486 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:32:46,490 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 15:32:46,491 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 15:32:46,493 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 15:32:46,495 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:32:46,500 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 15:32:46,502 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 15:32:46,504 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 15:32:46,506 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:32:46,508 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 15:32:46,509 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 15:32:46,511 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 15:32:46,513 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:32:46,518 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 15:32:46,520 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 15:32:46,554 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 15:32:46,558 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:32:46,560 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 15:32:46,562 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 15:32:46,564 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 15:32:46,568 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:32:46,570 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 15:32:46,571 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 15:32:46,573 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 15:32:46,575 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Lillie Mendez, salary=3844)]
2020-08-13 15:32:46,576 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Augusta Buchanan, salary=39994)]
2020-08-13 15:32:46,578 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Jennie Fitzgerald, salary=88673)]
2020-08-13 15:32:46,582 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Myrtie Collier, salary=58553)]
2020-08-13 15:32:46,585 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 15:32:46,586 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 15:32:46,588 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 15:32:46,592 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 15:32:46,594 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 15:32:46,597 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 15:32:46,604 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 15:32:46,605 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 15:32:46,607 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 15:32:46,609 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 15:32:46,611 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 15:32:46,622 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 15:32:46,624 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 15:32:46,626 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 15:32:46,629 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 15:32:46,638 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 15:32:46,640 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 15:32:46,642 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 15:32:46,644 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 15:32:46,646 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 15:32:46,654 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 15:32:46,657 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 15:32:46,659 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 15:32:46,662 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 15:32:46,669 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Teresa Graham, salary=22326)]
2020-08-13 15:32:46,671 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=George Kim, salary=28946)]
2020-08-13 15:32:46,673 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Arthur Gregory, salary=93828)]
2020-08-13 15:32:46,675 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Lelia Colon, salary=27949)]
2020-08-13 15:32:46,678 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 15:32:46,692 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 15:32:46,694 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 15:32:46,701 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 15:32:46,704 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 15:32:46,705 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 15:32:46,707 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 15:32:46,709 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 15:32:46,712 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 15:32:46,717 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 15:32:46,720 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 15:32:46,723 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 15:32:46,725 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 15:32:46,727 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 15:32:46,732 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 15:32:46,734 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 15:32:46,736 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 15:32:46,751 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 15:32:46,753 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 15:32:46,755 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 15:32:46,757 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 15:32:46,759 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 15:32:46,765 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 15:32:46,768 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 15:32:46,776 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Franklin Graves, salary=10530)]
2020-08-13 15:32:46,787 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Belle Nunez, salary=10460)]
2020-08-13 15:32:46,789 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Adele Clayton, salary=32684)]
2020-08-13 15:32:46,791 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=John Bell, salary=98593)]
2020-08-13 15:32:46,793 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 15:32:46,821 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 15:32:46,823 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 15:32:46,826 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 15:32:46,828 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 15:32:46,834 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 15:32:46,841 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 15:32:46,843 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 15:32:46,844 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 15:32:46,850 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 15:32:46,852 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 15:32:46,855 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 15:32:46,858 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 15:32:46,862 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 15:32:46,867 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 15:32:46,870 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 15:32:46,872 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 15:32:46,874 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 15:32:46,876 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 15:32:46,879 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 15:32:46,883 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 15:32:46,885 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 15:32:46,886 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 15:32:46,888 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 15:32:46,889 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Inez Adams, salary=85667)]
2020-08-13 15:32:46,890 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Marvin Sanders, salary=78995)]
2020-08-13 15:32:46,892 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Marc Lane, salary=45564)]
2020-08-13 15:32:46,894 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Verna Guerrero, salary=10867)]
2020-08-13 15:32:46,896 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 15:32:46,903 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 15:32:46,908 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 15:32:46,910 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 15:32:46,918 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 15:32:46,921 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 15:32:46,935 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 15:32:46,940 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 15:32:46,941 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 15:32:46,944 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 15:32:46,953 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 15:32:46,955 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 15:32:46,956 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 15:32:46,959 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 15:32:46,960 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 15:32:46,967 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 15:32:46,969 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 15:32:46,971 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 15:32:46,972 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 15:32:46,986 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 15:32:46,989 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 15:32:46,994 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 15:32:46,999 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 15:32:47,002 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 15:32:47,008 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Theresa Rivera, salary=99272)]
2020-08-13 15:32:47,011 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Tom Lee, salary=72071)]
2020-08-13 15:32:47,016 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Shawn Johnson, salary=22677)]
2020-08-13 15:32:47,022 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Kate Mason, salary=96164)]
2020-08-13 15:32:47,024 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 15:32:47,027 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 15:32:47,033 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 15:32:47,038 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 15:32:47,040 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 15:32:47,045 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 15:32:47,052 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 15:32:47,057 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 15:32:47,059 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 15:32:47,062 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 15:32:47,073 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 15:32:47,076 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 15:32:47,084 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 15:32:47,087 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 15:32:47,089 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 15:32:47,092 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 15:32:47,094 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 15:32:47,100 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 15:32:47,102 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 15:32:47,103 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 15:32:47,105 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 15:32:47,106 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 15:32:47,109 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 15:32:47,112 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 15:32:47,117 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Jessie Robinson, salary=51044)]
2020-08-13 15:32:47,119 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Russell Byrd, salary=70425)]
2020-08-13 15:32:47,121 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Francis Morton, salary=4282)]
2020-08-13 15:32:47,123 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Viola Carpenter, salary=17734)]
2020-08-13 15:32:47,125 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 15:32:47,137 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 15:32:47,139 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 15:32:47,141 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 15:32:47,144 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 15:32:47,149 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 15:32:47,151 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 15:32:47,154 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 15:32:47,156 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 15:32:47,161 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 15:32:47,163 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 15:32:47,167 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 15:32:47,170 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 15:32:47,173 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 15:32:47,175 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 15:32:47,177 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 15:32:47,179 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 15:32:47,183 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 15:32:47,185 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 15:32:47,188 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 15:32:47,190 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 15:32:47,191 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 15:32:47,193 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 15:32:47,195 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 15:32:47,200 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Thomas Moreno, salary=85044)]
2020-08-13 15:32:47,202 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Maria Butler, salary=80494)]
2020-08-13 15:32:47,204 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Anne Malone, salary=87925)]
2020-08-13 15:32:47,205 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Randy Simon, salary=4720)]
2020-08-13 15:32:47,207 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 15:32:47,208 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 15:32:47,210 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 15:32:47,212 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 15:32:47,214 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 15:32:47,216 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 15:32:47,218 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 15:32:47,220 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 15:32:47,221 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 15:32:47,223 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 15:32:47,224 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 15:32:47,228 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 15:32:47,235 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 15:32:47,237 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 15:32:47,239 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 15:32:47,240 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 15:32:47,242 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 15:32:47,243 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 15:32:47,245 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 15:32:47,250 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 15:32:47,251 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 15:32:47,253 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 15:32:47,255 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 15:32:47,256 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 15:32:47,258 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Christian Byrd, salary=53305)]
2020-08-13 15:32:47,259 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=James Webster, salary=56407)]
2020-08-13 15:32:47,261 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Patrick Rodriquez, salary=26210)]
2020-08-13 15:32:47,267 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Janie Howell, salary=7512)]
2020-08-13 15:32:47,269 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 15:32:47,272 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 15:32:47,281 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 15:32:47,285 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 15:32:47,286 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 15:32:47,288 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 15:32:47,289 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 15:32:47,291 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 15:32:47,293 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 15:32:47,294 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 15:32:47,301 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 15:32:47,304 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 15:32:47,305 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 15:32:47,307 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 15:32:47,308 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 15:32:47,310 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 15:32:47,311 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 15:32:47,316 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 15:32:47,318 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 15:32:47,319 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 15:32:47,321 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 15:32:47,322 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 15:32:47,377 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 15:32:47,378 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 15:32:47,383 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Herman Sims, salary=48019)]
2020-08-13 15:32:47,385 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Lula Simon, salary=12704)]
2020-08-13 15:32:47,388 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Ruth Simmons, salary=18839)]
2020-08-13 15:32:47,390 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Flora Love, salary=87427)]
2020-08-13 15:32:47,392 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 15:32:47,393 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 15:32:47,396 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 15:32:47,400 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 15:32:47,404 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 15:32:47,407 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 15:32:47,409 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 15:32:47,411 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 15:32:47,414 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 15:32:47,416 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 15:32:47,419 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 15:32:47,421 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 15:32:47,423 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 15:32:47,440 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 15:32:47,442 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 15:32:47,445 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 15:32:47,451 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 15:32:47,453 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 15:32:47,454 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 15:32:47,458 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 15:32:47,460 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 15:32:47,462 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 15:32:47,464 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 15:32:47,466 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 15:32:47,467 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Ryan Page, salary=36796)]
2020-08-13 15:32:47,469 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Allen Adkins, salary=52312)]
2020-08-13 15:32:47,471 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Roxie Carter, salary=4069)]
2020-08-13 15:32:47,473 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Nelle Mendez, salary=45460)]
2020-08-13 15:32:47,475 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 15:32:47,482 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 15:32:47,486 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 15:32:47,488 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 15:32:47,490 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 15:32:47,512 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 15:32:47,517 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 15:32:47,523 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 15:32:47,525 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 15:32:47,533 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 15:32:47,536 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 15:32:47,538 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 15:32:47,541 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 15:32:47,544 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 15:32:47,552 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 15:32:47,554 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 15:32:47,556 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 15:32:47,559 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 15:32:47,570 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 15:32:47,573 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 15:32:47,585 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 15:32:47,588 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 15:32:47,591 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 15:32:47,594 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 15:32:47,602 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Elva Shaw, salary=64002)]
2020-08-13 15:32:47,604 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Maurice Hoffman, salary=36672)]
2020-08-13 15:32:47,610 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Jane Craig, salary=99615)]
2020-08-13 15:32:47,612 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Isaiah Pratt, salary=24389)]
2020-08-13 15:32:47,620 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 15:32:47,622 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 15:32:47,626 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 15:32:47,628 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 15:32:47,634 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 15:32:47,636 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 15:32:47,638 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 15:32:47,641 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 15:32:47,643 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 15:32:47,654 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 15:32:47,656 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 15:32:47,667 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 15:32:47,670 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 15:32:47,671 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 15:32:47,673 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 15:32:47,675 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 15:32:47,677 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 15:32:47,690 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 15:32:47,692 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 15:32:47,694 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 15:32:47,695 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 15:32:47,700 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 15:32:47,702 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 15:32:47,704 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 15:32:47,705 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Harry Schultz, salary=24359)]
2020-08-13 15:32:47,706 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Nannie Patrick, salary=12141)]
2020-08-13 15:32:47,708 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Allen Roberson, salary=52478)]
2020-08-13 15:32:47,711 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Mason Ellis, salary=11702)]
2020-08-13 15:32:47,714 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 15:32:47,733 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 15:32:47,735 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 15:32:47,737 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 15:32:47,738 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 15:32:47,740 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 15:32:47,741 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 15:32:47,743 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 15:32:47,745 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 15:32:47,747 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 15:32:47,750 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 15:32:47,752 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 15:32:47,754 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 15:32:47,756 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 15:32:47,759 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 15:32:47,760 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 15:32:47,764 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 15:32:47,767 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 15:32:47,768 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 15:32:47,770 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 15:32:47,771 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 15:32:47,802 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 15:32:47,804 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 15:32:47,806 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 15:32:47,807 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Justin Elliott, salary=58385)]
2020-08-13 15:32:47,809 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Antonio Vasquez, salary=50833)]
2020-08-13 15:32:47,811 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Estelle Stevens, salary=74693)]
2020-08-13 15:32:47,817 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Leah Perez, salary=57011)]
2020-08-13 15:32:47,819 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 15:32:47,821 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 15:32:47,823 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 15:32:47,825 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 15:32:47,827 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 15:32:47,828 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 15:32:47,830 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 15:32:47,831 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 15:32:47,833 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 15:32:47,835 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 15:32:47,836 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 15:32:47,838 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 15:32:47,839 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 15:32:47,841 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 15:32:47,861 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 15:32:47,866 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 15:32:47,868 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 15:32:47,870 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 15:32:47,872 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 15:32:47,874 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 15:32:47,875 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 15:32:47,877 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 15:32:47,880 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 15:32:47,882 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 15:32:47,883 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Rosa Bailey, salary=50361)]
2020-08-13 15:32:47,885 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Richard Hines, salary=14271)]
2020-08-13 15:32:47,886 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Marion Hanson, salary=82)]
2020-08-13 15:32:47,887 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Samuel Morris, salary=4956)]
2020-08-13 15:32:47,889 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 15:32:47,892 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 15:32:47,897 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 15:32:47,901 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 15:32:47,903 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 15:32:47,939 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 15:32:47,941 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 15:32:47,945 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 15:32:47,947 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 15:32:47,948 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 15:32:47,949 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 15:32:47,951 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 15:32:47,952 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 15:32:47,954 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 15:32:47,956 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 15:32:47,957 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 15:32:47,959 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 15:32:47,961 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 15:32:47,963 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 15:32:47,965 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 15:32:47,967 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 15:32:47,969 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 15:32:47,971 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 15:32:47,973 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 15:32:47,975 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Elsie Ross, salary=79452)]
2020-08-13 15:32:47,977 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Henry Holloway, salary=57028)]
2020-08-13 15:32:47,978 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Ellen Mason, salary=3599)]
2020-08-13 15:32:47,980 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Lenora Sparks, salary=84261)]
2020-08-13 15:32:47,990 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 15:32:48,000 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 15:32:48,003 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 15:32:48,005 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 15:32:48,007 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 15:32:48,009 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 15:32:48,015 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 15:32:48,018 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 15:32:48,021 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 15:32:48,027 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 15:32:48,033 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 15:32:48,037 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 15:32:48,039 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 15:32:48,042 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 15:32:48,045 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 15:32:48,052 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 15:32:48,054 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 15:32:48,056 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 15:32:48,061 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 15:32:48,071 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 15:32:48,073 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 15:32:48,075 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 15:32:48,077 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 15:32:48,079 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 15:32:48,086 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Madge Rios, salary=33989)]
2020-08-13 15:32:48,090 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Terry Stevens, salary=67339)]
2020-08-13 15:32:48,092 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Hulda Carpenter, salary=33461)]
2020-08-13 15:32:48,094 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Verna Santiago, salary=23330)]
2020-08-13 15:32:48,098 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 15:32:48,101 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 15:32:48,102 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 15:32:48,104 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 15:32:48,106 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 15:32:48,108 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 15:32:48,110 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 15:32:48,111 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 15:32:48,115 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 15:32:48,118 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 15:32:48,125 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 15:32:48,127 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 15:32:48,131 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 15:32:48,134 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 15:32:48,136 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 15:32:48,137 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 15:32:48,139 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 15:32:48,140 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 15:32:48,142 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 15:32:48,144 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 15:32:48,148 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 15:32:48,152 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 15:32:48,154 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 15:32:48,156 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 15:32:48,158 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Timothy Rogers, salary=59816)]
2020-08-13 15:32:48,160 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Dale Neal, salary=3301)]
2020-08-13 15:32:48,162 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Blake Fletcher, salary=14506)]
2020-08-13 15:32:48,167 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Darrell Norris, salary=91611)]
2020-08-13 15:32:48,172 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 15:32:48,174 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 15:32:48,176 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 15:32:48,178 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 15:32:48,186 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 15:32:48,188 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 15:32:48,190 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 15:32:48,192 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 15:32:48,194 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 15:32:48,196 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 15:32:48,201 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 15:32:48,202 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 15:32:48,204 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 15:32:48,206 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 15:32:48,208 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 15:32:48,210 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 15:32:48,217 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 15:32:48,219 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 15:32:48,220 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 15:32:48,222 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 15:32:48,223 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 15:32:48,258 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 15:32:48,259 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 15:32:48,261 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 15:32:48,266 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Emilie Carlson, salary=7867)]
2020-08-13 15:32:48,268 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Sean Palmer, salary=42857)]
2020-08-13 15:32:48,270 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Genevieve Schmidt, salary=42534)]
2020-08-13 15:32:48,271 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Milton Payne, salary=80300)]
2020-08-13 15:32:48,274 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 15:32:48,276 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 15:32:48,278 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 15:32:48,283 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 15:32:48,285 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 15:32:48,286 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 15:32:48,288 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 15:32:48,289 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 15:32:48,290 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 15:32:48,292 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 15:32:48,294 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 15:32:48,295 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 15:32:48,300 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 15:32:48,326 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 15:32:48,328 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 15:32:48,334 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 15:32:48,336 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 15:32:48,338 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 15:32:48,341 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 15:32:48,342 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 15:32:48,344 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 15:32:48,346 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 15:32:48,351 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 15:32:48,352 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 15:32:48,354 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Samuel Briggs, salary=55679)]
2020-08-13 15:32:48,355 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Randy Barber, salary=26046)]
2020-08-13 15:32:48,357 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Marian Owens, salary=84482)]
2020-08-13 15:32:48,358 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Ada Tucker, salary=72123)]
2020-08-13 15:32:48,360 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 15:32:48,361 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 15:32:48,368 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 15:32:48,370 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 15:32:48,372 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 15:32:48,374 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 15:32:48,389 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 15:32:48,391 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 15:32:48,392 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 15:32:48,394 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 15:32:48,401 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 15:32:48,403 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 15:32:48,405 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 15:32:48,407 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 15:32:48,409 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 15:32:48,411 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 15:32:48,417 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 15:32:48,418 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 15:32:48,420 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 15:32:48,421 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 15:32:48,423 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 15:32:48,425 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 15:32:48,426 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 15:32:48,428 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 15:32:48,434 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Cornelia Palmer, salary=40160)]
2020-08-13 15:32:48,436 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Viola McKinney, salary=28017)]
2020-08-13 15:32:48,438 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Dustin Moody, salary=2514)]
2020-08-13 15:32:48,461 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Adele Walker, salary=80866)]
2020-08-13 15:32:48,466 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 15:32:48,468 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 15:32:48,470 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 15:32:48,471 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 15:32:48,473 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 15:32:48,475 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 15:32:48,477 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 15:32:48,484 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 15:32:48,486 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 15:32:48,488 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 15:32:48,490 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 15:32:48,492 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 15:32:48,494 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 15:32:48,498 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 15:32:48,500 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 15:32:48,502 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 15:32:48,503 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 15:32:48,505 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 15:32:48,506 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 15:32:48,517 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 15:32:48,519 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 15:32:48,521 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 15:32:48,523 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 15:32:48,525 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 15:32:48,527 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Alberta Holloway, salary=2963)]
2020-08-13 15:32:48,529 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Eleanor Curtis, salary=3715)]
2020-08-13 15:32:48,533 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Dean Dawson, salary=80811)]
2020-08-13 15:32:48,535 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Steve McGee, salary=38156)]
2020-08-13 15:32:48,537 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 15:32:48,538 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 15:32:48,545 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 15:32:48,554 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 15:32:48,556 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 15:32:48,557 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 15:32:48,559 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 15:32:48,560 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 15:32:48,562 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 15:32:48,571 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 15:32:48,572 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 15:32:48,574 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 15:32:48,575 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 15:32:48,577 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 15:32:48,586 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 15:32:48,588 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 15:32:48,589 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 15:32:48,591 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 15:32:48,594 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 15:32:48,604 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 15:32:48,607 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 15:32:48,610 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 15:32:48,618 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 15:32:48,620 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 15:32:48,623 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Pearl Hill, salary=41752)]
2020-08-13 15:32:48,625 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Isaiah Riley, salary=3437)]
2020-08-13 15:32:48,626 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Amy Garcia, salary=90970)]
2020-08-13 15:32:48,628 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Earl Huff, salary=878)]
2020-08-13 15:32:48,634 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 15:32:48,636 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 15:32:48,637 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 15:32:48,644 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 15:32:48,650 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 15:32:48,685 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 15:32:48,688 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 15:32:48,690 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 15:32:48,692 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 15:32:48,693 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 15:32:48,695 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 15:32:48,697 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 15:32:48,699 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 15:32:48,701 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 15:32:48,703 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 15:32:48,705 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 15:32:48,707 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 15:32:48,709 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 15:32:48,711 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 15:32:48,713 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 15:32:48,715 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 15:32:48,717 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 15:32:48,719 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 15:32:48,720 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 15:32:48,722 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Eddie Farmer, salary=67843)]
2020-08-13 15:32:48,735 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=Alvin Santiago, salary=61882)]
2020-08-13 15:32:48,737 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Lina Bishop, salary=18192)]
2020-08-13 15:32:48,739 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Georgia Sparks, salary=20845)]
2020-08-13 15:32:48,740 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 15:32:48,742 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 15:32:48,744 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 15:32:48,751 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 15:32:48,752 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 15:32:48,754 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 15:32:48,755 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 15:32:48,757 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 15:32:48,758 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 15:32:48,759 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 15:32:48,761 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 15:32:48,762 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 15:32:48,766 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 15:32:48,768 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 15:32:48,769 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 15:32:48,770 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 15:32:48,772 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 15:32:48,773 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 15:32:48,777 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 15:32:48,784 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 15:32:48,786 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 15:32:48,788 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 15:32:48,790 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 15:32:48,792 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 15:32:48,794 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bertha Rodgers, salary=66620)]
2020-08-13 15:32:48,800 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Lulu Brewer, salary=21190)]
2020-08-13 15:32:48,802 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Cornelia Warren, salary=3623)]
2020-08-13 15:32:48,805 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Mina McGee, salary=24464)]
2020-08-13 15:32:48,807 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 15:32:48,808 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 15:32:48,810 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 15:32:48,814 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:32:48,817 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 15:32:48,818 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 15:32:48,819 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 15:32:48,821 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:32:48,822 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 15:32:48,824 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 15:32:48,845 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 15:32:48,854 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:32:48,856 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 15:32:48,857 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 15:32:48,859 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 15:32:48,861 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:32:48,862 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 15:32:48,867 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 15:32:48,868 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 15:32:48,870 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:32:48,871 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 15:32:48,873 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 15:32:48,875 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 15:32:48,877 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:32:48,878 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Hettie Summers, salary=46080)]
2020-08-13 15:32:48,880 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Bertie Bates, salary=40608)]
2020-08-13 15:32:48,882 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Sarah Poole, salary=53537)]
2020-08-13 15:32:48,884 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Corey Ryan, salary=42001)]
2020-08-13 15:32:48,926 INFO org.springframework.batch.core.step.AbstractStep [task-6] Step: [myStep:partition6] executed in 2s486ms
2020-08-13 15:32:48,932 INFO org.springframework.batch.core.step.AbstractStep [task-4] Step: [myStep:partition3] executed in 2s491ms
2020-08-13 15:32:48,934 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition0] executed in 2s492ms
2020-08-13 15:32:48,934 INFO org.springframework.batch.core.step.AbstractStep [task-7] Step: [myStep:partition1] executed in 2s494ms
2020-08-13 15:32:48,935 INFO org.springframework.batch.core.step.AbstractStep [task-5] Step: [myStep:partition2] executed in 2s493ms
2020-08-13 15:32:48,936 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition5] executed in 2s497ms
2020-08-13 15:32:48,939 INFO org.springframework.batch.core.step.AbstractStep [task-3] Step: [myStep:partition4] executed in 2s497ms
2020-08-13 15:32:48,941 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 2s518ms
2020-08-13 15:32:48,943 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 2s523ms
2020-08-13 15:32:48,945 INFO org.springframework.boot.devtools.autoconfigure.ConditionEvaluationDeltaLoggingListener [restartedMain] Condition evaluation unchanged
2020-08-13 15:33:48,947 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [SpringContextShutdownHook] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 15:37:25,866 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 1188 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 15:37:25,871 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 15:37:25,973 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 15:37:27,472 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 15:37:27,990 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 15:37:28,036 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 2.871 seconds (JVM running for 4.07)
2020-08-13 15:37:28,039 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 15:37:28,045 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 15:37:28,046 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 15:37:28,096 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 15:37:28,270 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 15:37:28,385 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 15:37:28,647 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Bill Douglas, salary=13649)]
2020-08-13 15:37:28,653 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Jennie Gutierrez, salary=10767)]
2020-08-13 15:37:28,661 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Tillie McCormick, salary=278)]
2020-08-13 15:37:28,665 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Lilly Reed, salary=16681)]
2020-08-13 15:37:28,669 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Bill Douglas, salary=13649)]
2020-08-13 15:37:28,681 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Jennie Gutierrez, salary=10767)]
2020-08-13 15:37:28,686 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Tillie McCormick, salary=278)]
2020-08-13 15:37:28,694 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Lilly Reed, salary=16681)]
2020-08-13 15:37:28,700 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Bill Douglas, salary=13649)]
2020-08-13 15:37:28,704 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Jennie Gutierrez, salary=10767)]
2020-08-13 15:37:28,712 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Tillie McCormick, salary=278)]
2020-08-13 15:37:28,717 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Lilly Reed, salary=16681)]
2020-08-13 15:37:28,721 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Bill Douglas, salary=13649)]
2020-08-13 15:37:28,729 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Jennie Gutierrez, salary=10767)]
2020-08-13 15:37:28,733 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Tillie McCormick, salary=278)]
2020-08-13 15:37:28,740 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Lilly Reed, salary=16681)]
2020-08-13 15:37:28,749 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Bill Douglas, salary=13649)]
2020-08-13 15:37:28,754 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Jennie Gutierrez, salary=10767)]
2020-08-13 15:37:28,763 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Tillie McCormick, salary=278)]
2020-08-13 15:37:28,771 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Lilly Reed, salary=16681)]
2020-08-13 15:37:28,782 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Bill Douglas, salary=13649)]
2020-08-13 15:37:28,787 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Jennie Gutierrez, salary=10767)]
2020-08-13 15:37:28,791 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Tillie McCormick, salary=278)]
2020-08-13 15:37:28,795 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Lilly Reed, salary=16681)]
2020-08-13 15:37:28,799 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Bill Douglas, salary=13649)]
2020-08-13 15:37:28,803 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Jennie Gutierrez, salary=10767)]
2020-08-13 15:37:28,806 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Tillie McCormick, salary=278)]
2020-08-13 15:37:28,815 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Lilly Reed, salary=16681)]
2020-08-13 15:37:28,819 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Ollie Shaw, salary=19563)]
2020-08-13 15:37:28,823 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=Bobby Sanchez, salary=17889)]
2020-08-13 15:37:28,829 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Mattie Waters, salary=24742)]
2020-08-13 15:37:28,833 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Tyler Copeland, salary=51879)]
2020-08-13 15:37:28,837 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Ollie Shaw, salary=19563)]
2020-08-13 15:37:28,840 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=Bobby Sanchez, salary=17889)]
2020-08-13 15:37:28,844 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Mattie Waters, salary=24742)]
2020-08-13 15:37:28,853 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Tyler Copeland, salary=51879)]
2020-08-13 15:37:28,862 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Ollie Shaw, salary=19563)]
2020-08-13 15:37:28,867 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=Bobby Sanchez, salary=17889)]
2020-08-13 15:37:28,872 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Mattie Waters, salary=24742)]
2020-08-13 15:37:28,882 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Tyler Copeland, salary=51879)]
2020-08-13 15:37:28,900 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Ollie Shaw, salary=19563)]
2020-08-13 15:37:28,911 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=Bobby Sanchez, salary=17889)]
2020-08-13 15:37:28,919 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Mattie Waters, salary=24742)]
2020-08-13 15:37:29,010 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Tyler Copeland, salary=51879)]
2020-08-13 15:37:29,014 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Ollie Shaw, salary=19563)]
2020-08-13 15:37:29,021 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=Bobby Sanchez, salary=17889)]
2020-08-13 15:37:29,029 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Mattie Waters, salary=24742)]
2020-08-13 15:37:29,032 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Tyler Copeland, salary=51879)]
2020-08-13 15:37:29,037 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Ollie Shaw, salary=19563)]
2020-08-13 15:37:29,043 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=Bobby Sanchez, salary=17889)]
2020-08-13 15:37:29,046 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Mattie Waters, salary=24742)]
2020-08-13 15:37:29,051 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Tyler Copeland, salary=51879)]
2020-08-13 15:37:29,128 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Ollie Shaw, salary=19563)]
2020-08-13 15:37:29,132 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=Bobby Sanchez, salary=17889)]
2020-08-13 15:37:29,135 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Mattie Waters, salary=24742)]
2020-08-13 15:37:29,162 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Tyler Copeland, salary=51879)]
2020-08-13 15:37:29,167 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Loretta Caldwell, salary=47707)]
2020-08-13 15:37:29,247 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Mario French, salary=53328)]
2020-08-13 15:37:29,252 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Dominic Graham, salary=18542)]
2020-08-13 15:37:29,256 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=Callie Barber, salary=235)]
2020-08-13 15:37:29,265 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Loretta Caldwell, salary=47707)]
2020-08-13 15:37:29,347 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Mario French, salary=53328)]
2020-08-13 15:37:29,351 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Dominic Graham, salary=18542)]
2020-08-13 15:37:29,357 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=Callie Barber, salary=235)]
2020-08-13 15:37:29,361 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Loretta Caldwell, salary=47707)]
2020-08-13 15:37:29,365 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Mario French, salary=53328)]
2020-08-13 15:37:29,368 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Dominic Graham, salary=18542)]
2020-08-13 15:37:29,371 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=Callie Barber, salary=235)]
2020-08-13 15:37:29,374 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Loretta Caldwell, salary=47707)]
2020-08-13 15:37:29,377 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Mario French, salary=53328)]
2020-08-13 15:37:29,440 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Dominic Graham, salary=18542)]
2020-08-13 15:37:29,473 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=Callie Barber, salary=235)]
2020-08-13 15:37:29,484 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Loretta Caldwell, salary=47707)]
2020-08-13 15:37:29,488 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Mario French, salary=53328)]
2020-08-13 15:37:29,494 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Dominic Graham, salary=18542)]
2020-08-13 15:37:29,497 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=Callie Barber, salary=235)]
2020-08-13 15:37:29,501 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Loretta Caldwell, salary=47707)]
2020-08-13 15:37:29,504 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Mario French, salary=53328)]
2020-08-13 15:37:29,511 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Dominic Graham, salary=18542)]
2020-08-13 15:37:29,531 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=Callie Barber, salary=235)]
2020-08-13 15:37:29,540 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Loretta Caldwell, salary=47707)]
2020-08-13 15:37:29,547 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Mario French, salary=53328)]
2020-08-13 15:37:29,550 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Dominic Graham, salary=18542)]
2020-08-13 15:37:29,556 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=Callie Barber, salary=235)]
2020-08-13 15:37:29,562 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Elmer Poole, salary=46394)]
2020-08-13 15:37:29,566 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Luella Reyes, salary=42103)]
2020-08-13 15:37:29,570 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Donald Drake, salary=36583)]
2020-08-13 15:37:29,576 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Mario Franklin, salary=55598)]
2020-08-13 15:37:29,591 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Elmer Poole, salary=46394)]
2020-08-13 15:37:29,599 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Luella Reyes, salary=42103)]
2020-08-13 15:37:29,604 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Donald Drake, salary=36583)]
2020-08-13 15:37:29,616 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Mario Franklin, salary=55598)]
2020-08-13 15:37:29,619 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Elmer Poole, salary=46394)]
2020-08-13 15:37:29,628 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Luella Reyes, salary=42103)]
2020-08-13 15:37:29,632 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Donald Drake, salary=36583)]
2020-08-13 15:37:29,637 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Mario Franklin, salary=55598)]
2020-08-13 15:37:29,640 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Elmer Poole, salary=46394)]
2020-08-13 15:37:29,663 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Luella Reyes, salary=42103)]
2020-08-13 15:37:29,667 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Donald Drake, salary=36583)]
2020-08-13 15:37:29,672 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Mario Franklin, salary=55598)]
2020-08-13 15:37:29,682 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Elmer Poole, salary=46394)]
2020-08-13 15:37:29,687 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Luella Reyes, salary=42103)]
2020-08-13 15:37:29,696 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Donald Drake, salary=36583)]
2020-08-13 15:37:29,702 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Mario Franklin, salary=55598)]
2020-08-13 15:37:29,706 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Elmer Poole, salary=46394)]
2020-08-13 15:37:29,714 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Luella Reyes, salary=42103)]
2020-08-13 15:37:29,742 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Donald Drake, salary=36583)]
2020-08-13 15:37:29,754 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Mario Franklin, salary=55598)]
2020-08-13 15:37:29,762 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Elmer Poole, salary=46394)]
2020-08-13 15:37:29,766 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Luella Reyes, salary=42103)]
2020-08-13 15:37:29,771 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Donald Drake, salary=36583)]
2020-08-13 15:37:29,775 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Mario Franklin, salary=55598)]
2020-08-13 15:37:29,780 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Marion Tate, salary=18321)]
2020-08-13 15:37:29,796 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Jorge Dawson, salary=14285)]
2020-08-13 15:37:29,802 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Josephine Banks, salary=47158)]
2020-08-13 15:37:29,821 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Scott Rodriquez, salary=19029)]
2020-08-13 15:37:29,856 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Marion Tate, salary=18321)]
2020-08-13 15:37:29,864 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Jorge Dawson, salary=14285)]
2020-08-13 15:37:29,869 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Josephine Banks, salary=47158)]
2020-08-13 15:37:29,872 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Scott Rodriquez, salary=19029)]
2020-08-13 15:37:29,880 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Marion Tate, salary=18321)]
2020-08-13 15:37:29,884 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Jorge Dawson, salary=14285)]
2020-08-13 15:37:29,887 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Josephine Banks, salary=47158)]
2020-08-13 15:37:29,892 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Scott Rodriquez, salary=19029)]
2020-08-13 15:37:29,902 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Marion Tate, salary=18321)]
2020-08-13 15:37:29,912 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Jorge Dawson, salary=14285)]
2020-08-13 15:37:29,916 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Josephine Banks, salary=47158)]
2020-08-13 15:37:29,919 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Scott Rodriquez, salary=19029)]
2020-08-13 15:37:29,930 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Marion Tate, salary=18321)]
2020-08-13 15:37:29,933 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Jorge Dawson, salary=14285)]
2020-08-13 15:37:29,936 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Josephine Banks, salary=47158)]
2020-08-13 15:37:29,940 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Scott Rodriquez, salary=19029)]
2020-08-13 15:37:29,946 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Marion Tate, salary=18321)]
2020-08-13 15:37:29,953 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Jorge Dawson, salary=14285)]
2020-08-13 15:37:29,969 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Josephine Banks, salary=47158)]
2020-08-13 15:37:29,979 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Scott Rodriquez, salary=19029)]
2020-08-13 15:37:29,982 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Marion Tate, salary=18321)]
2020-08-13 15:37:29,985 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Jorge Dawson, salary=14285)]
2020-08-13 15:37:29,988 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Josephine Banks, salary=47158)]
2020-08-13 15:37:30,002 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Scott Rodriquez, salary=19029)]
2020-08-13 15:37:30,005 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Francis McDaniel, salary=30759)]
2020-08-13 15:37:30,013 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Jay Banks, salary=42840)]
2020-08-13 15:37:30,017 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Lily Hughes, salary=35858)]
2020-08-13 15:37:30,026 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Ella Steele, salary=40652)]
2020-08-13 15:37:30,036 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Francis McDaniel, salary=30759)]
2020-08-13 15:37:30,039 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Jay Banks, salary=42840)]
2020-08-13 15:37:30,050 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Lily Hughes, salary=35858)]
2020-08-13 15:37:30,054 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Ella Steele, salary=40652)]
2020-08-13 15:37:30,062 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Francis McDaniel, salary=30759)]
2020-08-13 15:37:30,067 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Jay Banks, salary=42840)]
2020-08-13 15:37:30,071 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Lily Hughes, salary=35858)]
2020-08-13 15:37:30,081 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Ella Steele, salary=40652)]
2020-08-13 15:37:30,085 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Francis McDaniel, salary=30759)]
2020-08-13 15:37:30,095 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Jay Banks, salary=42840)]
2020-08-13 15:37:30,099 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Lily Hughes, salary=35858)]
2020-08-13 15:37:30,103 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Ella Steele, salary=40652)]
2020-08-13 15:37:30,106 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Francis McDaniel, salary=30759)]
2020-08-13 15:37:30,117 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Jay Banks, salary=42840)]
2020-08-13 15:37:30,120 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Lily Hughes, salary=35858)]
2020-08-13 15:37:30,132 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Ella Steele, salary=40652)]
2020-08-13 15:37:30,138 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Francis McDaniel, salary=30759)]
2020-08-13 15:37:30,153 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Jay Banks, salary=42840)]
2020-08-13 15:37:30,157 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Lily Hughes, salary=35858)]
2020-08-13 15:37:30,163 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Ella Steele, salary=40652)]
2020-08-13 15:37:30,166 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Francis McDaniel, salary=30759)]
2020-08-13 15:37:30,180 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Jay Banks, salary=42840)]
2020-08-13 15:37:30,183 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Lily Hughes, salary=35858)]
2020-08-13 15:37:30,185 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Ella Steele, salary=40652)]
2020-08-13 15:37:30,195 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Daisy Robinson, salary=10859)]
2020-08-13 15:37:30,198 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Verna Logan, salary=41319)]
2020-08-13 15:37:30,201 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Hulda Wright, salary=43736)]
2020-08-13 15:37:30,205 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Anthony Leonard, salary=55692)]
2020-08-13 15:37:30,211 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Daisy Robinson, salary=10859)]
2020-08-13 15:37:30,214 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Verna Logan, salary=41319)]
2020-08-13 15:37:30,218 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Hulda Wright, salary=43736)]
2020-08-13 15:37:30,221 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Anthony Leonard, salary=55692)]
2020-08-13 15:37:30,230 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Daisy Robinson, salary=10859)]
2020-08-13 15:37:30,239 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Verna Logan, salary=41319)]
2020-08-13 15:37:30,246 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Hulda Wright, salary=43736)]
2020-08-13 15:37:30,248 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Anthony Leonard, salary=55692)]
2020-08-13 15:37:30,253 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Daisy Robinson, salary=10859)]
2020-08-13 15:37:30,262 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Verna Logan, salary=41319)]
2020-08-13 15:37:30,266 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Hulda Wright, salary=43736)]
2020-08-13 15:37:30,270 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Anthony Leonard, salary=55692)]
2020-08-13 15:37:30,277 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Daisy Robinson, salary=10859)]
2020-08-13 15:37:30,283 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Verna Logan, salary=41319)]
2020-08-13 15:37:30,286 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Hulda Wright, salary=43736)]
2020-08-13 15:37:30,288 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Anthony Leonard, salary=55692)]
2020-08-13 15:37:30,299 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Daisy Robinson, salary=10859)]
2020-08-13 15:37:30,303 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Verna Logan, salary=41319)]
2020-08-13 15:37:30,306 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Hulda Wright, salary=43736)]
2020-08-13 15:37:30,313 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Anthony Leonard, salary=55692)]
2020-08-13 15:37:30,316 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Daisy Robinson, salary=10859)]
2020-08-13 15:37:30,318 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Verna Logan, salary=41319)]
2020-08-13 15:37:30,321 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Hulda Wright, salary=43736)]
2020-08-13 15:37:30,325 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Anthony Leonard, salary=55692)]
2020-08-13 15:37:30,330 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Harriett Bell, salary=32241)]
2020-08-13 15:37:30,332 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=Charlotte Campbell, salary=434)]
2020-08-13 15:37:30,335 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Luis McKinney, salary=29610)]
2020-08-13 15:37:30,338 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Cynthia Leonard, salary=27394)]
2020-08-13 15:37:30,343 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Harriett Bell, salary=32241)]
2020-08-13 15:37:30,347 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=Charlotte Campbell, salary=434)]
2020-08-13 15:37:30,350 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Luis McKinney, salary=29610)]
2020-08-13 15:37:30,353 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Cynthia Leonard, salary=27394)]
2020-08-13 15:37:30,356 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Harriett Bell, salary=32241)]
2020-08-13 15:37:30,363 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=Charlotte Campbell, salary=434)]
2020-08-13 15:37:30,365 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Luis McKinney, salary=29610)]
2020-08-13 15:37:30,366 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Cynthia Leonard, salary=27394)]
2020-08-13 15:37:30,370 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Harriett Bell, salary=32241)]
2020-08-13 15:37:30,372 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=Charlotte Campbell, salary=434)]
2020-08-13 15:37:30,379 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Luis McKinney, salary=29610)]
2020-08-13 15:37:30,397 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Cynthia Leonard, salary=27394)]
2020-08-13 15:37:30,403 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Harriett Bell, salary=32241)]
2020-08-13 15:37:30,418 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=Charlotte Campbell, salary=434)]
2020-08-13 15:37:30,421 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Luis McKinney, salary=29610)]
2020-08-13 15:37:30,429 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Cynthia Leonard, salary=27394)]
2020-08-13 15:37:30,434 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Harriett Bell, salary=32241)]
2020-08-13 15:37:30,437 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=Charlotte Campbell, salary=434)]
2020-08-13 15:37:30,439 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Luis McKinney, salary=29610)]
2020-08-13 15:37:30,446 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Cynthia Leonard, salary=27394)]
2020-08-13 15:37:30,449 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Harriett Bell, salary=32241)]
2020-08-13 15:37:30,454 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=Charlotte Campbell, salary=434)]
2020-08-13 15:37:30,458 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Luis McKinney, salary=29610)]
2020-08-13 15:37:30,462 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Cynthia Leonard, salary=27394)]
2020-08-13 15:37:30,464 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Hallie Cross, salary=57607)]
2020-08-13 15:37:30,477 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Susie Hammond, salary=54862)]
2020-08-13 15:37:30,479 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Tommy Valdez, salary=7635)]
2020-08-13 15:37:30,482 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Mina Collier, salary=56192)]
2020-08-13 15:37:30,487 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Hallie Cross, salary=57607)]
2020-08-13 15:37:30,498 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Susie Hammond, salary=54862)]
2020-08-13 15:37:30,500 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Tommy Valdez, salary=7635)]
2020-08-13 15:37:30,503 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Mina Collier, salary=56192)]
2020-08-13 15:37:30,509 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Hallie Cross, salary=57607)]
2020-08-13 15:37:30,512 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Susie Hammond, salary=54862)]
2020-08-13 15:37:30,525 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Tommy Valdez, salary=7635)]
2020-08-13 15:37:30,531 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Mina Collier, salary=56192)]
2020-08-13 15:37:30,534 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Hallie Cross, salary=57607)]
2020-08-13 15:37:30,538 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Susie Hammond, salary=54862)]
2020-08-13 15:37:30,558 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Tommy Valdez, salary=7635)]
2020-08-13 15:37:30,566 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Mina Collier, salary=56192)]
2020-08-13 15:37:30,572 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Hallie Cross, salary=57607)]
2020-08-13 15:37:30,580 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Susie Hammond, salary=54862)]
2020-08-13 15:37:30,584 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Tommy Valdez, salary=7635)]
2020-08-13 15:37:30,588 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Mina Collier, salary=56192)]
2020-08-13 15:37:30,595 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Hallie Cross, salary=57607)]
2020-08-13 15:37:30,597 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Susie Hammond, salary=54862)]
2020-08-13 15:37:30,599 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Tommy Valdez, salary=7635)]
2020-08-13 15:37:30,603 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Mina Collier, salary=56192)]
2020-08-13 15:37:30,605 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Hallie Cross, salary=57607)]
2020-08-13 15:37:30,612 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Susie Hammond, salary=54862)]
2020-08-13 15:37:30,620 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Tommy Valdez, salary=7635)]
2020-08-13 15:37:30,624 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Mina Collier, salary=56192)]
2020-08-13 15:37:30,630 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Lucy Sanders, salary=22532)]
2020-08-13 15:37:30,632 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Addie McDaniel, salary=24663)]
2020-08-13 15:37:30,635 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Lottie Ruiz, salary=35079)]
2020-08-13 15:37:30,638 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Charlotte Roberson, salary=14391)]
2020-08-13 15:37:30,643 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Lucy Sanders, salary=22532)]
2020-08-13 15:37:30,645 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Addie McDaniel, salary=24663)]
2020-08-13 15:37:30,647 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Lottie Ruiz, salary=35079)]
2020-08-13 15:37:30,650 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Charlotte Roberson, salary=14391)]
2020-08-13 15:37:30,651 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Lucy Sanders, salary=22532)]
2020-08-13 15:37:30,653 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Addie McDaniel, salary=24663)]
2020-08-13 15:37:30,655 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Lottie Ruiz, salary=35079)]
2020-08-13 15:37:30,658 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Charlotte Roberson, salary=14391)]
2020-08-13 15:37:30,660 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Lucy Sanders, salary=22532)]
2020-08-13 15:37:30,667 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Addie McDaniel, salary=24663)]
2020-08-13 15:37:30,670 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Lottie Ruiz, salary=35079)]
2020-08-13 15:37:30,673 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Charlotte Roberson, salary=14391)]
2020-08-13 15:37:30,676 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Lucy Sanders, salary=22532)]
2020-08-13 15:37:30,680 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Addie McDaniel, salary=24663)]
2020-08-13 15:37:30,682 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Lottie Ruiz, salary=35079)]
2020-08-13 15:37:30,685 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Charlotte Roberson, salary=14391)]
2020-08-13 15:37:30,688 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Lucy Sanders, salary=22532)]
2020-08-13 15:37:30,690 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Addie McDaniel, salary=24663)]
2020-08-13 15:37:30,697 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Lottie Ruiz, salary=35079)]
2020-08-13 15:37:30,699 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Charlotte Roberson, salary=14391)]
2020-08-13 15:37:30,702 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Lucy Sanders, salary=22532)]
2020-08-13 15:37:30,705 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Addie McDaniel, salary=24663)]
2020-08-13 15:37:30,713 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Lottie Ruiz, salary=35079)]
2020-08-13 15:37:30,715 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Charlotte Roberson, salary=14391)]
2020-08-13 15:37:30,717 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Beatrice Black, salary=47459)]
2020-08-13 15:37:30,720 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Albert Holt, salary=53550)]
2020-08-13 15:37:30,722 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Lenora McLaughlin, salary=9259)]
2020-08-13 15:37:30,724 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Travis Sanchez, salary=19000)]
2020-08-13 15:37:30,730 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Beatrice Black, salary=47459)]
2020-08-13 15:37:30,732 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Albert Holt, salary=53550)]
2020-08-13 15:37:30,735 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Lenora McLaughlin, salary=9259)]
2020-08-13 15:37:30,738 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Travis Sanchez, salary=19000)]
2020-08-13 15:37:30,746 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Beatrice Black, salary=47459)]
2020-08-13 15:37:30,749 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Albert Holt, salary=53550)]
2020-08-13 15:37:30,753 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Lenora McLaughlin, salary=9259)]
2020-08-13 15:37:30,756 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Travis Sanchez, salary=19000)]
2020-08-13 15:37:30,761 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Beatrice Black, salary=47459)]
2020-08-13 15:37:30,763 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Albert Holt, salary=53550)]
2020-08-13 15:37:30,766 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Lenora McLaughlin, salary=9259)]
2020-08-13 15:37:30,769 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Travis Sanchez, salary=19000)]
2020-08-13 15:37:30,771 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Beatrice Black, salary=47459)]
2020-08-13 15:37:30,779 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Albert Holt, salary=53550)]
2020-08-13 15:37:30,782 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Lenora McLaughlin, salary=9259)]
2020-08-13 15:37:30,784 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Travis Sanchez, salary=19000)]
2020-08-13 15:37:30,787 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Beatrice Black, salary=47459)]
2020-08-13 15:37:30,789 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Albert Holt, salary=53550)]
2020-08-13 15:37:30,794 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Lenora McLaughlin, salary=9259)]
2020-08-13 15:37:30,796 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Travis Sanchez, salary=19000)]
2020-08-13 15:37:30,798 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Beatrice Black, salary=47459)]
2020-08-13 15:37:30,801 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Albert Holt, salary=53550)]
2020-08-13 15:37:30,803 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Lenora McLaughlin, salary=9259)]
2020-08-13 15:37:30,805 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Travis Sanchez, salary=19000)]
2020-08-13 15:37:30,813 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Jean Castro, salary=1187)]
2020-08-13 15:37:30,818 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Oscar Griffin, salary=35474)]
2020-08-13 15:37:30,820 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Jordan Mann, salary=7702)]
2020-08-13 15:37:30,822 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Virgie Hamilton, salary=12305)]
2020-08-13 15:37:30,827 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Jean Castro, salary=1187)]
2020-08-13 15:37:30,830 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Oscar Griffin, salary=35474)]
2020-08-13 15:37:30,832 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Jordan Mann, salary=7702)]
2020-08-13 15:37:30,834 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Virgie Hamilton, salary=12305)]
2020-08-13 15:37:30,836 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Jean Castro, salary=1187)]
2020-08-13 15:37:30,839 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Oscar Griffin, salary=35474)]
2020-08-13 15:37:30,845 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Jordan Mann, salary=7702)]
2020-08-13 15:37:30,854 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Virgie Hamilton, salary=12305)]
2020-08-13 15:37:30,857 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Jean Castro, salary=1187)]
2020-08-13 15:37:30,861 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Oscar Griffin, salary=35474)]
2020-08-13 15:37:30,863 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Jordan Mann, salary=7702)]
2020-08-13 15:37:30,866 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Virgie Hamilton, salary=12305)]
2020-08-13 15:37:30,868 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Jean Castro, salary=1187)]
2020-08-13 15:37:30,870 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Oscar Griffin, salary=35474)]
2020-08-13 15:37:30,872 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Jordan Mann, salary=7702)]
2020-08-13 15:37:30,876 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Virgie Hamilton, salary=12305)]
2020-08-13 15:37:30,880 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Jean Castro, salary=1187)]
2020-08-13 15:37:30,882 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Oscar Griffin, salary=35474)]
2020-08-13 15:37:30,884 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Jordan Mann, salary=7702)]
2020-08-13 15:37:30,886 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Virgie Hamilton, salary=12305)]
2020-08-13 15:37:30,888 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Jean Castro, salary=1187)]
2020-08-13 15:37:30,896 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Oscar Griffin, salary=35474)]
2020-08-13 15:37:30,899 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Jordan Mann, salary=7702)]
2020-08-13 15:37:30,901 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Virgie Hamilton, salary=12305)]
2020-08-13 15:37:30,902 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Amelia King, salary=52264)]
2020-08-13 15:37:30,904 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Julia Burns, salary=27572)]
2020-08-13 15:37:30,906 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Herman Joseph, salary=48687)]
2020-08-13 15:37:30,914 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Gregory Owen, salary=50226)]
2020-08-13 15:37:30,918 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Amelia King, salary=52264)]
2020-08-13 15:37:30,921 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Julia Burns, salary=27572)]
2020-08-13 15:37:30,926 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Herman Joseph, salary=48687)]
2020-08-13 15:37:30,931 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Gregory Owen, salary=50226)]
2020-08-13 15:37:30,933 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Amelia King, salary=52264)]
2020-08-13 15:37:30,935 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Julia Burns, salary=27572)]
2020-08-13 15:37:30,936 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Herman Joseph, salary=48687)]
2020-08-13 15:37:30,939 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Gregory Owen, salary=50226)]
2020-08-13 15:37:30,940 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Amelia King, salary=52264)]
2020-08-13 15:37:30,946 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Julia Burns, salary=27572)]
2020-08-13 15:37:30,948 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Herman Joseph, salary=48687)]
2020-08-13 15:37:30,950 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Gregory Owen, salary=50226)]
2020-08-13 15:37:30,952 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Amelia King, salary=52264)]
2020-08-13 15:37:30,954 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Julia Burns, salary=27572)]
2020-08-13 15:37:30,956 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Herman Joseph, salary=48687)]
2020-08-13 15:37:30,962 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Gregory Owen, salary=50226)]
2020-08-13 15:37:30,964 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Amelia King, salary=52264)]
2020-08-13 15:37:30,965 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Julia Burns, salary=27572)]
2020-08-13 15:37:30,967 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Herman Joseph, salary=48687)]
2020-08-13 15:37:30,968 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Gregory Owen, salary=50226)]
2020-08-13 15:37:30,970 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Amelia King, salary=52264)]
2020-08-13 15:37:30,972 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Julia Burns, salary=27572)]
2020-08-13 15:37:30,980 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Herman Joseph, salary=48687)]
2020-08-13 15:37:30,982 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Gregory Owen, salary=50226)]
2020-08-13 15:37:30,984 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Sophia Chavez, salary=1404)]
2020-08-13 15:37:30,986 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Dollie Garza, salary=59114)]
2020-08-13 15:37:30,988 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Ruby Yates, salary=8949)]
2020-08-13 15:37:30,990 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Lela Scott, salary=16440)]
2020-08-13 15:37:30,994 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Sophia Chavez, salary=1404)]
2020-08-13 15:37:30,997 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Dollie Garza, salary=59114)]
2020-08-13 15:37:30,998 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Ruby Yates, salary=8949)]
2020-08-13 15:37:31,000 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Lela Scott, salary=16440)]
2020-08-13 15:37:31,003 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Sophia Chavez, salary=1404)]
2020-08-13 15:37:31,005 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Dollie Garza, salary=59114)]
2020-08-13 15:37:31,006 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Ruby Yates, salary=8949)]
2020-08-13 15:37:31,012 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Lela Scott, salary=16440)]
2020-08-13 15:37:31,016 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Sophia Chavez, salary=1404)]
2020-08-13 15:37:31,018 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Dollie Garza, salary=59114)]
2020-08-13 15:37:31,028 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Ruby Yates, salary=8949)]
2020-08-13 15:37:31,030 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Lela Scott, salary=16440)]
2020-08-13 15:37:31,033 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Sophia Chavez, salary=1404)]
2020-08-13 15:37:31,047 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Dollie Garza, salary=59114)]
2020-08-13 15:37:31,049 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Ruby Yates, salary=8949)]
2020-08-13 15:37:31,055 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Lela Scott, salary=16440)]
2020-08-13 15:37:31,063 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Sophia Chavez, salary=1404)]
2020-08-13 15:37:31,066 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Dollie Garza, salary=59114)]
2020-08-13 15:37:31,068 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Ruby Yates, salary=8949)]
2020-08-13 15:37:31,070 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Lela Scott, salary=16440)]
2020-08-13 15:37:31,085 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Sophia Chavez, salary=1404)]
2020-08-13 15:37:31,087 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Dollie Garza, salary=59114)]
2020-08-13 15:37:31,094 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Ruby Yates, salary=8949)]
2020-08-13 15:37:31,097 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Lela Scott, salary=16440)]
2020-08-13 15:37:31,101 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Oscar Lane, salary=25693)]
2020-08-13 15:37:31,103 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Emilie Pope, salary=56991)]
2020-08-13 15:37:31,105 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Paul Alexander, salary=4801)]
2020-08-13 15:37:31,106 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Eric Huff, salary=56648)]
2020-08-13 15:37:31,112 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Oscar Lane, salary=25693)]
2020-08-13 15:37:31,114 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Emilie Pope, salary=56991)]
2020-08-13 15:37:31,115 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Paul Alexander, salary=4801)]
2020-08-13 15:37:31,116 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Eric Huff, salary=56648)]
2020-08-13 15:37:31,119 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Oscar Lane, salary=25693)]
2020-08-13 15:37:31,121 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Emilie Pope, salary=56991)]
2020-08-13 15:37:31,127 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Paul Alexander, salary=4801)]
2020-08-13 15:37:31,129 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Eric Huff, salary=56648)]
2020-08-13 15:37:31,131 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Oscar Lane, salary=25693)]
2020-08-13 15:37:31,134 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Emilie Pope, salary=56991)]
2020-08-13 15:37:31,136 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Paul Alexander, salary=4801)]
2020-08-13 15:37:31,139 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Eric Huff, salary=56648)]
2020-08-13 15:37:31,146 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Oscar Lane, salary=25693)]
2020-08-13 15:37:31,149 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Emilie Pope, salary=56991)]
2020-08-13 15:37:31,152 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Paul Alexander, salary=4801)]
2020-08-13 15:37:31,154 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Eric Huff, salary=56648)]
2020-08-13 15:37:31,159 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Oscar Lane, salary=25693)]
2020-08-13 15:37:31,162 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Emilie Pope, salary=56991)]
2020-08-13 15:37:31,166 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Paul Alexander, salary=4801)]
2020-08-13 15:37:31,168 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Eric Huff, salary=56648)]
2020-08-13 15:37:31,171 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Oscar Lane, salary=25693)]
2020-08-13 15:37:31,180 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Emilie Pope, salary=56991)]
2020-08-13 15:37:31,182 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Paul Alexander, salary=4801)]
2020-08-13 15:37:31,184 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Eric Huff, salary=56648)]
2020-08-13 15:37:31,186 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Barry Kennedy, salary=37118)]
2020-08-13 15:37:31,188 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Willie Huff, salary=54776)]
2020-08-13 15:37:31,194 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Victoria Gardner, salary=7860)]
2020-08-13 15:37:31,196 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Clayton Moody, salary=53790)]
2020-08-13 15:37:31,199 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Barry Kennedy, salary=37118)]
2020-08-13 15:37:31,201 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Willie Huff, salary=54776)]
2020-08-13 15:37:31,204 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Victoria Gardner, salary=7860)]
2020-08-13 15:37:31,206 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Clayton Moody, salary=53790)]
2020-08-13 15:37:31,214 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Barry Kennedy, salary=37118)]
2020-08-13 15:37:31,217 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Willie Huff, salary=54776)]
2020-08-13 15:37:31,219 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Victoria Gardner, salary=7860)]
2020-08-13 15:37:31,221 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Clayton Moody, salary=53790)]
2020-08-13 15:37:31,225 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Barry Kennedy, salary=37118)]
2020-08-13 15:37:31,229 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Willie Huff, salary=54776)]
2020-08-13 15:37:31,231 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Victoria Gardner, salary=7860)]
2020-08-13 15:37:31,233 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Clayton Moody, salary=53790)]
2020-08-13 15:37:31,235 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Barry Kennedy, salary=37118)]
2020-08-13 15:37:31,237 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Willie Huff, salary=54776)]
2020-08-13 15:37:31,239 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Victoria Gardner, salary=7860)]
2020-08-13 15:37:31,245 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Clayton Moody, salary=53790)]
2020-08-13 15:37:31,247 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Barry Kennedy, salary=37118)]
2020-08-13 15:37:31,249 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Willie Huff, salary=54776)]
2020-08-13 15:37:31,251 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Victoria Gardner, salary=7860)]
2020-08-13 15:37:31,252 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Clayton Moody, salary=53790)]
2020-08-13 15:37:31,254 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Barry Kennedy, salary=37118)]
2020-08-13 15:37:31,256 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Willie Huff, salary=54776)]
2020-08-13 15:37:31,261 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Victoria Gardner, salary=7860)]
2020-08-13 15:37:31,264 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Clayton Moody, salary=53790)]
2020-08-13 15:37:31,266 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Alexander King, salary=43045)]
2020-08-13 15:37:31,269 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Jim Chambers, salary=29064)]
2020-08-13 15:37:31,272 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Jane Bryan, salary=23706)]
2020-08-13 15:37:31,275 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Robert Coleman, salary=32684)]
2020-08-13 15:37:31,276 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Alexander King, salary=43045)]
2020-08-13 15:37:31,278 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Jim Chambers, salary=29064)]
2020-08-13 15:37:31,281 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Jane Bryan, salary=23706)]
2020-08-13 15:37:31,285 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Robert Coleman, salary=32684)]
2020-08-13 15:37:31,287 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Alexander King, salary=43045)]
2020-08-13 15:37:31,289 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Jim Chambers, salary=29064)]
2020-08-13 15:37:31,294 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Jane Bryan, salary=23706)]
2020-08-13 15:37:31,295 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Robert Coleman, salary=32684)]
2020-08-13 15:37:31,297 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Alexander King, salary=43045)]
2020-08-13 15:37:31,299 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Jim Chambers, salary=29064)]
2020-08-13 15:37:31,301 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Jane Bryan, salary=23706)]
2020-08-13 15:37:31,303 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Robert Coleman, salary=32684)]
2020-08-13 15:37:31,305 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Alexander King, salary=43045)]
2020-08-13 15:37:31,309 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Jim Chambers, salary=29064)]
2020-08-13 15:37:31,311 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Jane Bryan, salary=23706)]
2020-08-13 15:37:31,315 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Robert Coleman, salary=32684)]
2020-08-13 15:37:31,317 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Alexander King, salary=43045)]
2020-08-13 15:37:31,319 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Jim Chambers, salary=29064)]
2020-08-13 15:37:31,330 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Jane Bryan, salary=23706)]
2020-08-13 15:37:31,332 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Robert Coleman, salary=32684)]
2020-08-13 15:37:31,334 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Alexander King, salary=43045)]
2020-08-13 15:37:31,337 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Jim Chambers, salary=29064)]
2020-08-13 15:37:31,340 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Jane Bryan, salary=23706)]
2020-08-13 15:37:31,347 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Robert Coleman, salary=32684)]
2020-08-13 15:37:31,350 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Miguel Owen, salary=1497)]
2020-08-13 15:37:31,351 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Alta Cox, salary=59153)]
2020-08-13 15:37:31,353 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Estelle Hicks, salary=36514)]
2020-08-13 15:37:31,355 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Cynthia Hines, salary=29897)]
2020-08-13 15:37:31,357 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Miguel Owen, salary=1497)]
2020-08-13 15:37:31,362 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Alta Cox, salary=59153)]
2020-08-13 15:37:31,364 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Estelle Hicks, salary=36514)]
2020-08-13 15:37:31,366 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Cynthia Hines, salary=29897)]
2020-08-13 15:37:31,367 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Miguel Owen, salary=1497)]
2020-08-13 15:37:31,369 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Alta Cox, salary=59153)]
2020-08-13 15:37:31,371 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Estelle Hicks, salary=36514)]
2020-08-13 15:37:31,373 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Cynthia Hines, salary=29897)]
2020-08-13 15:37:31,379 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Miguel Owen, salary=1497)]
2020-08-13 15:37:31,390 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Alta Cox, salary=59153)]
2020-08-13 15:37:31,398 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Estelle Hicks, salary=36514)]
2020-08-13 15:37:31,401 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Cynthia Hines, salary=29897)]
2020-08-13 15:37:31,405 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Miguel Owen, salary=1497)]
2020-08-13 15:37:31,407 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Alta Cox, salary=59153)]
2020-08-13 15:37:31,412 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Estelle Hicks, salary=36514)]
2020-08-13 15:37:31,414 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Cynthia Hines, salary=29897)]
2020-08-13 15:37:31,418 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Miguel Owen, salary=1497)]
2020-08-13 15:37:31,420 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Alta Cox, salary=59153)]
2020-08-13 15:37:31,423 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Estelle Hicks, salary=36514)]
2020-08-13 15:37:31,426 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Cynthia Hines, salary=29897)]
2020-08-13 15:37:31,429 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Miguel Owen, salary=1497)]
2020-08-13 15:37:31,431 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Alta Cox, salary=59153)]
2020-08-13 15:37:31,434 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Estelle Hicks, salary=36514)]
2020-08-13 15:37:31,436 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Cynthia Hines, salary=29897)]
2020-08-13 15:37:31,439 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Derek Freeman, salary=16316)]
2020-08-13 15:37:31,445 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Ina Lambert, salary=38485)]
2020-08-13 15:37:31,448 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Derek Diaz, salary=52136)]
2020-08-13 15:37:31,451 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Verna Ward, salary=37249)]
2020-08-13 15:37:31,453 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Derek Freeman, salary=16316)]
2020-08-13 15:37:31,455 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Ina Lambert, salary=38485)]
2020-08-13 15:37:31,457 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Derek Diaz, salary=52136)]
2020-08-13 15:37:31,463 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Verna Ward, salary=37249)]
2020-08-13 15:37:31,465 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Derek Freeman, salary=16316)]
2020-08-13 15:37:31,467 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Ina Lambert, salary=38485)]
2020-08-13 15:37:31,469 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Derek Diaz, salary=52136)]
2020-08-13 15:37:31,479 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Verna Ward, salary=37249)]
2020-08-13 15:37:31,482 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Derek Freeman, salary=16316)]
2020-08-13 15:37:31,484 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Ina Lambert, salary=38485)]
2020-08-13 15:37:31,486 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Derek Diaz, salary=52136)]
2020-08-13 15:37:31,487 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Verna Ward, salary=37249)]
2020-08-13 15:37:31,489 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Derek Freeman, salary=16316)]
2020-08-13 15:37:31,492 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Ina Lambert, salary=38485)]
2020-08-13 15:37:31,494 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Derek Diaz, salary=52136)]
2020-08-13 15:37:31,495 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Verna Ward, salary=37249)]
2020-08-13 15:37:31,497 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Derek Freeman, salary=16316)]
2020-08-13 15:37:31,500 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Ina Lambert, salary=38485)]
2020-08-13 15:37:31,502 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Derek Diaz, salary=52136)]
2020-08-13 15:37:31,504 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Verna Ward, salary=37249)]
2020-08-13 15:37:31,508 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Derek Freeman, salary=16316)]
2020-08-13 15:37:31,509 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Ina Lambert, salary=38485)]
2020-08-13 15:37:31,511 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Derek Diaz, salary=52136)]
2020-08-13 15:37:31,515 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Verna Ward, salary=37249)]
2020-08-13 15:37:31,517 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Alan Lawrence, salary=12900)]
2020-08-13 15:37:31,532 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Caleb Townsend, salary=29935)]
2020-08-13 15:37:31,534 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Maud Powell, salary=28523)]
2020-08-13 15:37:31,536 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Alejandro Bowman, salary=23289)]
2020-08-13 15:37:31,538 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Alan Lawrence, salary=12900)]
2020-08-13 15:37:31,544 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Caleb Townsend, salary=29935)]
2020-08-13 15:37:31,547 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Maud Powell, salary=28523)]
2020-08-13 15:37:31,549 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Alejandro Bowman, salary=23289)]
2020-08-13 15:37:31,550 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Alan Lawrence, salary=12900)]
2020-08-13 15:37:31,552 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Caleb Townsend, salary=29935)]
2020-08-13 15:37:31,554 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Maud Powell, salary=28523)]
2020-08-13 15:37:31,561 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Alejandro Bowman, salary=23289)]
2020-08-13 15:37:31,565 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Alan Lawrence, salary=12900)]
2020-08-13 15:37:31,567 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Caleb Townsend, salary=29935)]
2020-08-13 15:37:31,569 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Maud Powell, salary=28523)]
2020-08-13 15:37:31,571 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Alejandro Bowman, salary=23289)]
2020-08-13 15:37:31,583 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Alan Lawrence, salary=12900)]
2020-08-13 15:37:31,598 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Caleb Townsend, salary=29935)]
2020-08-13 15:37:31,601 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Maud Powell, salary=28523)]
2020-08-13 15:37:31,603 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Alejandro Bowman, salary=23289)]
2020-08-13 15:37:31,606 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Alan Lawrence, salary=12900)]
2020-08-13 15:37:31,614 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Caleb Townsend, salary=29935)]
2020-08-13 15:37:31,616 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Maud Powell, salary=28523)]
2020-08-13 15:37:31,621 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Alejandro Bowman, salary=23289)]
2020-08-13 15:37:31,622 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Alan Lawrence, salary=12900)]
2020-08-13 15:37:31,628 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Caleb Townsend, salary=29935)]
2020-08-13 15:37:31,630 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Maud Powell, salary=28523)]
2020-08-13 15:37:31,632 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Alejandro Bowman, salary=23289)]
2020-08-13 15:37:31,634 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Katharine Meyer, salary=17090)]
2020-08-13 15:37:31,659 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Marion Garcia, salary=41361)]
2020-08-13 15:37:31,662 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Gary Perez, salary=35256)]
2020-08-13 15:37:31,664 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Mamie Garner, salary=30041)]
2020-08-13 15:37:31,666 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Katharine Meyer, salary=17090)]
2020-08-13 15:37:31,692 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Marion Garcia, salary=41361)]
2020-08-13 15:37:31,696 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Gary Perez, salary=35256)]
2020-08-13 15:37:31,699 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Mamie Garner, salary=30041)]
2020-08-13 15:37:31,702 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Katharine Meyer, salary=17090)]
2020-08-13 15:37:31,712 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Marion Garcia, salary=41361)]
2020-08-13 15:37:31,718 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Gary Perez, salary=35256)]
2020-08-13 15:37:31,719 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Mamie Garner, salary=30041)]
2020-08-13 15:37:31,733 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Katharine Meyer, salary=17090)]
2020-08-13 15:37:31,737 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Marion Garcia, salary=41361)]
2020-08-13 15:37:31,739 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Gary Perez, salary=35256)]
2020-08-13 15:37:31,748 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Mamie Garner, salary=30041)]
2020-08-13 15:37:31,750 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Katharine Meyer, salary=17090)]
2020-08-13 15:37:31,751 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Marion Garcia, salary=41361)]
2020-08-13 15:37:31,753 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Gary Perez, salary=35256)]
2020-08-13 15:37:31,755 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Mamie Garner, salary=30041)]
2020-08-13 15:37:31,757 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Katharine Meyer, salary=17090)]
2020-08-13 15:37:31,764 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Marion Garcia, salary=41361)]
2020-08-13 15:37:31,767 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Gary Perez, salary=35256)]
2020-08-13 15:37:31,771 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Mamie Garner, salary=30041)]
2020-08-13 15:37:31,773 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Katharine Meyer, salary=17090)]
2020-08-13 15:37:31,781 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Marion Garcia, salary=41361)]
2020-08-13 15:37:31,784 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Gary Perez, salary=35256)]
2020-08-13 15:37:31,787 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Mamie Garner, salary=30041)]
2020-08-13 15:37:31,789 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Randy Ferguson, salary=42622)]
2020-08-13 15:37:31,809 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Gussie Walton, salary=44450)]
2020-08-13 15:37:31,813 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Sara Castillo, salary=52670)]
2020-08-13 15:37:31,816 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Virgie Norman, salary=7906)]
2020-08-13 15:37:31,818 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Randy Ferguson, salary=42622)]
2020-08-13 15:37:31,820 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Gussie Walton, salary=44450)]
2020-08-13 15:37:31,821 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Sara Castillo, salary=52670)]
2020-08-13 15:37:31,823 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Virgie Norman, salary=7906)]
2020-08-13 15:37:31,830 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Randy Ferguson, salary=42622)]
2020-08-13 15:37:31,832 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Gussie Walton, salary=44450)]
2020-08-13 15:37:31,837 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Sara Castillo, salary=52670)]
2020-08-13 15:37:31,839 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Virgie Norman, salary=7906)]
2020-08-13 15:37:31,846 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Randy Ferguson, salary=42622)]
2020-08-13 15:37:31,848 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Gussie Walton, salary=44450)]
2020-08-13 15:37:31,850 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Sara Castillo, salary=52670)]
2020-08-13 15:37:31,852 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Virgie Norman, salary=7906)]
2020-08-13 15:37:31,854 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Randy Ferguson, salary=42622)]
2020-08-13 15:37:31,856 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Gussie Walton, salary=44450)]
2020-08-13 15:37:31,862 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Sara Castillo, salary=52670)]
2020-08-13 15:37:31,864 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Virgie Norman, salary=7906)]
2020-08-13 15:37:31,866 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Randy Ferguson, salary=42622)]
2020-08-13 15:37:31,868 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Gussie Walton, salary=44450)]
2020-08-13 15:37:31,870 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Sara Castillo, salary=52670)]
2020-08-13 15:37:31,872 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Virgie Norman, salary=7906)]
2020-08-13 15:37:31,874 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Randy Ferguson, salary=42622)]
2020-08-13 15:37:31,877 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Gussie Walton, salary=44450)]
2020-08-13 15:37:31,879 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Sara Castillo, salary=52670)]
2020-08-13 15:37:31,881 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Virgie Norman, salary=7906)]
2020-08-13 15:37:31,883 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Marvin Vaughn, salary=12889)]
2020-08-13 15:37:31,885 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=James Brewer, salary=38121)]
2020-08-13 15:37:31,887 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Mable Hale, salary=13575)]
2020-08-13 15:37:31,888 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Jeff Stokes, salary=51945)]
2020-08-13 15:37:31,891 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Marvin Vaughn, salary=12889)]
2020-08-13 15:37:31,895 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=James Brewer, salary=38121)]
2020-08-13 15:37:31,897 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Mable Hale, salary=13575)]
2020-08-13 15:37:31,900 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Jeff Stokes, salary=51945)]
2020-08-13 15:37:31,902 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Marvin Vaughn, salary=12889)]
2020-08-13 15:37:31,903 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=James Brewer, salary=38121)]
2020-08-13 15:37:31,905 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Mable Hale, salary=13575)]
2020-08-13 15:37:31,907 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Jeff Stokes, salary=51945)]
2020-08-13 15:37:31,911 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Marvin Vaughn, salary=12889)]
2020-08-13 15:37:31,913 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=James Brewer, salary=38121)]
2020-08-13 15:37:31,914 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Mable Hale, salary=13575)]
2020-08-13 15:37:31,916 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Jeff Stokes, salary=51945)]
2020-08-13 15:37:31,917 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Marvin Vaughn, salary=12889)]
2020-08-13 15:37:31,919 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=James Brewer, salary=38121)]
2020-08-13 15:37:31,921 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Mable Hale, salary=13575)]
2020-08-13 15:37:31,923 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Jeff Stokes, salary=51945)]
2020-08-13 15:37:31,927 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Marvin Vaughn, salary=12889)]
2020-08-13 15:37:31,929 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=James Brewer, salary=38121)]
2020-08-13 15:37:31,931 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Mable Hale, salary=13575)]
2020-08-13 15:37:31,934 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Jeff Stokes, salary=51945)]
2020-08-13 15:37:31,936 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Marvin Vaughn, salary=12889)]
2020-08-13 15:37:31,937 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=James Brewer, salary=38121)]
2020-08-13 15:37:31,939 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Mable Hale, salary=13575)]
2020-08-13 15:37:31,945 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Jeff Stokes, salary=51945)]
2020-08-13 15:37:31,946 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bess Howell, salary=33153)]
2020-08-13 15:37:31,948 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Adeline Brock, salary=46421)]
2020-08-13 15:37:31,950 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Alberta Franklin, salary=8893)]
2020-08-13 15:37:31,951 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Chase Palmer, salary=57118)]
2020-08-13 15:37:31,953 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bess Howell, salary=33153)]
2020-08-13 15:37:31,955 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Adeline Brock, salary=46421)]
2020-08-13 15:37:31,956 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Alberta Franklin, salary=8893)]
2020-08-13 15:37:31,961 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Chase Palmer, salary=57118)]
2020-08-13 15:37:31,962 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bess Howell, salary=33153)]
2020-08-13 15:37:31,964 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Adeline Brock, salary=46421)]
2020-08-13 15:37:31,966 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Alberta Franklin, salary=8893)]
2020-08-13 15:37:31,968 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Chase Palmer, salary=57118)]
2020-08-13 15:37:31,970 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bess Howell, salary=33153)]
2020-08-13 15:37:31,972 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Adeline Brock, salary=46421)]
2020-08-13 15:37:31,978 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Alberta Franklin, salary=8893)]
2020-08-13 15:37:31,980 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Chase Palmer, salary=57118)]
2020-08-13 15:37:31,982 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bess Howell, salary=33153)]
2020-08-13 15:37:31,984 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Adeline Brock, salary=46421)]
2020-08-13 15:37:31,986 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Alberta Franklin, salary=8893)]
2020-08-13 15:37:31,988 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Chase Palmer, salary=57118)]
2020-08-13 15:37:31,989 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bess Howell, salary=33153)]
2020-08-13 15:37:31,993 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Adeline Brock, salary=46421)]
2020-08-13 15:37:31,995 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Alberta Franklin, salary=8893)]
2020-08-13 15:37:31,997 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Chase Palmer, salary=57118)]
2020-08-13 15:37:31,999 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bess Howell, salary=33153)]
2020-08-13 15:37:32,001 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Adeline Brock, salary=46421)]
2020-08-13 15:37:32,002 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Alberta Franklin, salary=8893)]
2020-08-13 15:37:32,004 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Chase Palmer, salary=57118)]
2020-08-13 15:37:32,017 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Rhoda Torres, salary=13166)]
2020-08-13 15:37:32,019 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Danny Sullivan, salary=16641)]
2020-08-13 15:37:32,021 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Rebecca Hart, salary=15834)]
2020-08-13 15:37:32,026 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Jim Osborne, salary=32928)]
2020-08-13 15:37:32,029 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Rhoda Torres, salary=13166)]
2020-08-13 15:37:32,030 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Danny Sullivan, salary=16641)]
2020-08-13 15:37:32,032 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Rebecca Hart, salary=15834)]
2020-08-13 15:37:32,034 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Jim Osborne, salary=32928)]
2020-08-13 15:37:32,036 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Rhoda Torres, salary=13166)]
2020-08-13 15:37:32,038 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Danny Sullivan, salary=16641)]
2020-08-13 15:37:32,041 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Rebecca Hart, salary=15834)]
2020-08-13 15:37:32,045 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Jim Osborne, salary=32928)]
2020-08-13 15:37:32,047 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Rhoda Torres, salary=13166)]
2020-08-13 15:37:32,048 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Danny Sullivan, salary=16641)]
2020-08-13 15:37:32,050 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Rebecca Hart, salary=15834)]
2020-08-13 15:37:32,052 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Jim Osborne, salary=32928)]
2020-08-13 15:37:32,054 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Rhoda Torres, salary=13166)]
2020-08-13 15:37:32,055 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Danny Sullivan, salary=16641)]
2020-08-13 15:37:32,065 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Rebecca Hart, salary=15834)]
2020-08-13 15:37:32,066 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Jim Osborne, salary=32928)]
2020-08-13 15:37:32,068 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Rhoda Torres, salary=13166)]
2020-08-13 15:37:32,071 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Danny Sullivan, salary=16641)]
2020-08-13 15:37:32,076 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Rebecca Hart, salary=15834)]
2020-08-13 15:37:32,078 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Jim Osborne, salary=32928)]
2020-08-13 15:37:32,082 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Rhoda Torres, salary=13166)]
2020-08-13 15:37:32,084 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Danny Sullivan, salary=16641)]
2020-08-13 15:37:32,085 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Rebecca Hart, salary=15834)]
2020-08-13 15:37:32,087 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Jim Osborne, salary=32928)]
2020-08-13 15:37:32,162 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition2] executed in 3s682ms
2020-08-13 15:37:32,165 INFO org.springframework.batch.core.step.AbstractStep [task-3] Step: [myStep:partition1] executed in 3s617ms
2020-08-13 15:37:32,169 INFO org.springframework.batch.core.step.AbstractStep [task-6] Step: [myStep:partition5] executed in 3s605ms
2020-08-13 15:37:32,170 INFO org.springframework.batch.core.step.AbstractStep [task-4] Step: [myStep:partition0] executed in 3s611ms
2020-08-13 15:37:32,171 INFO org.springframework.batch.core.step.AbstractStep [task-5] Step: [myStep:partition3] executed in 3s607ms
2020-08-13 15:37:32,172 INFO org.springframework.batch.core.step.AbstractStep [task-7] Step: [myStep:partition6] executed in 3s601ms
2020-08-13 15:37:32,172 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition4] executed in 3s643ms
2020-08-13 15:37:32,180 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 3s794ms
2020-08-13 15:37:32,187 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 3s832ms
2020-08-13 15:37:41,741 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [Thread-99] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 15:37:41,977 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 1188 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 15:37:41,978 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 15:37:42,660 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 15:37:42,830 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 15:37:42,848 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 0.98 seconds (JVM running for 18.882)
2020-08-13 15:37:42,850 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 15:37:42,851 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 15:37:42,851 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 15:37:42,862 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 15:37:42,887 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 15:37:42,899 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 15:37:43,022 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Bill Douglas, salary=13649)]
2020-08-13 15:37:43,029 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Bill Douglas, salary=13649)]
2020-08-13 15:37:43,038 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Jennie Gutierrez, salary=10767)]
2020-08-13 15:37:43,040 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Tillie McCormick, salary=278)]
2020-08-13 15:37:43,042 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Lilly Reed, salary=16681)]
2020-08-13 15:37:43,044 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Bill Douglas, salary=13649)]
2020-08-13 15:37:43,047 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Jennie Gutierrez, salary=10767)]
2020-08-13 15:37:43,049 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Tillie McCormick, salary=278)]
2020-08-13 15:37:43,051 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Lilly Reed, salary=16681)]
2020-08-13 15:37:43,054 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Bill Douglas, salary=13649)]
2020-08-13 15:37:43,056 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Jennie Gutierrez, salary=10767)]
2020-08-13 15:37:43,058 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Tillie McCormick, salary=278)]
2020-08-13 15:37:43,060 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Lilly Reed, salary=16681)]
2020-08-13 15:37:43,064 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Bill Douglas, salary=13649)]
2020-08-13 15:37:43,110 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Jennie Gutierrez, salary=10767)]
2020-08-13 15:37:43,122 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Tillie McCormick, salary=278)]
2020-08-13 15:37:43,125 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Lilly Reed, salary=16681)]
2020-08-13 15:37:43,128 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Bill Douglas, salary=13649)]
2020-08-13 15:37:43,130 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Jennie Gutierrez, salary=10767)]
2020-08-13 15:37:43,131 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Tillie McCormick, salary=278)]
2020-08-13 15:37:43,133 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Lilly Reed, salary=16681)]
2020-08-13 15:37:43,135 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Bill Douglas, salary=13649)]
2020-08-13 15:37:43,137 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Jennie Gutierrez, salary=10767)]
2020-08-13 15:37:43,139 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Tillie McCormick, salary=278)]
2020-08-13 15:37:43,141 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Lilly Reed, salary=16681)]
2020-08-13 15:37:43,142 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Jennie Gutierrez, salary=10767)]
2020-08-13 15:37:43,144 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Tillie McCormick, salary=278)]
2020-08-13 15:37:43,145 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Lilly Reed, salary=16681)]
2020-08-13 15:37:43,147 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Ollie Shaw, salary=19563)]
2020-08-13 15:37:43,149 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Ollie Shaw, salary=19563)]
2020-08-13 15:37:43,150 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=Bobby Sanchez, salary=17889)]
2020-08-13 15:37:43,161 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Mattie Waters, salary=24742)]
2020-08-13 15:37:43,166 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Tyler Copeland, salary=51879)]
2020-08-13 15:37:43,169 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Ollie Shaw, salary=19563)]
2020-08-13 15:37:43,174 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=Bobby Sanchez, salary=17889)]
2020-08-13 15:37:43,176 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Mattie Waters, salary=24742)]
2020-08-13 15:37:43,177 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Tyler Copeland, salary=51879)]
2020-08-13 15:37:43,180 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Ollie Shaw, salary=19563)]
2020-08-13 15:37:43,182 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=Bobby Sanchez, salary=17889)]
2020-08-13 15:37:43,184 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Mattie Waters, salary=24742)]
2020-08-13 15:37:43,186 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Tyler Copeland, salary=51879)]
2020-08-13 15:37:43,188 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Ollie Shaw, salary=19563)]
2020-08-13 15:37:43,190 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=Bobby Sanchez, salary=17889)]
2020-08-13 15:37:43,192 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Mattie Waters, salary=24742)]
2020-08-13 15:37:43,193 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Tyler Copeland, salary=51879)]
2020-08-13 15:37:43,195 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Ollie Shaw, salary=19563)]
2020-08-13 15:37:43,197 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=Bobby Sanchez, salary=17889)]
2020-08-13 15:37:43,198 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Mattie Waters, salary=24742)]
2020-08-13 15:37:43,210 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Tyler Copeland, salary=51879)]
2020-08-13 15:37:43,212 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Ollie Shaw, salary=19563)]
2020-08-13 15:37:43,214 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=Bobby Sanchez, salary=17889)]
2020-08-13 15:37:43,217 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Mattie Waters, salary=24742)]
2020-08-13 15:37:43,220 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Tyler Copeland, salary=51879)]
2020-08-13 15:37:43,226 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=Bobby Sanchez, salary=17889)]
2020-08-13 15:37:43,228 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Mattie Waters, salary=24742)]
2020-08-13 15:37:43,231 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Tyler Copeland, salary=51879)]
2020-08-13 15:37:43,233 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Loretta Caldwell, salary=47707)]
2020-08-13 15:37:43,237 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Loretta Caldwell, salary=47707)]
2020-08-13 15:37:43,241 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Mario French, salary=53328)]
2020-08-13 15:37:43,244 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Dominic Graham, salary=18542)]
2020-08-13 15:37:43,247 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=Callie Barber, salary=235)]
2020-08-13 15:37:43,250 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Loretta Caldwell, salary=47707)]
2020-08-13 15:37:43,260 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Mario French, salary=53328)]
2020-08-13 15:37:43,264 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Dominic Graham, salary=18542)]
2020-08-13 15:37:43,270 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=Callie Barber, salary=235)]
2020-08-13 15:37:43,282 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Loretta Caldwell, salary=47707)]
2020-08-13 15:37:43,284 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Mario French, salary=53328)]
2020-08-13 15:37:43,287 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Dominic Graham, salary=18542)]
2020-08-13 15:37:43,296 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=Callie Barber, salary=235)]
2020-08-13 15:37:43,300 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Loretta Caldwell, salary=47707)]
2020-08-13 15:37:43,302 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Mario French, salary=53328)]
2020-08-13 15:37:43,304 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Dominic Graham, salary=18542)]
2020-08-13 15:37:43,310 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=Callie Barber, salary=235)]
2020-08-13 15:37:43,313 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Loretta Caldwell, salary=47707)]
2020-08-13 15:37:43,315 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Mario French, salary=53328)]
2020-08-13 15:37:43,317 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Dominic Graham, salary=18542)]
2020-08-13 15:37:43,320 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=Callie Barber, salary=235)]
2020-08-13 15:37:43,326 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Loretta Caldwell, salary=47707)]
2020-08-13 15:37:43,327 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Mario French, salary=53328)]
2020-08-13 15:37:43,329 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Dominic Graham, salary=18542)]
2020-08-13 15:37:43,332 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=Callie Barber, salary=235)]
2020-08-13 15:37:43,333 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Mario French, salary=53328)]
2020-08-13 15:37:43,335 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Dominic Graham, salary=18542)]
2020-08-13 15:37:43,337 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=Callie Barber, salary=235)]
2020-08-13 15:37:43,343 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Elmer Poole, salary=46394)]
2020-08-13 15:37:43,345 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Elmer Poole, salary=46394)]
2020-08-13 15:37:43,347 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Luella Reyes, salary=42103)]
2020-08-13 15:37:43,349 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Donald Drake, salary=36583)]
2020-08-13 15:37:43,352 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Mario Franklin, salary=55598)]
2020-08-13 15:37:43,353 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Elmer Poole, salary=46394)]
2020-08-13 15:37:43,359 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Luella Reyes, salary=42103)]
2020-08-13 15:37:43,364 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Donald Drake, salary=36583)]
2020-08-13 15:37:43,367 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Mario Franklin, salary=55598)]
2020-08-13 15:37:43,369 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Elmer Poole, salary=46394)]
2020-08-13 15:37:43,371 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Luella Reyes, salary=42103)]
2020-08-13 15:37:43,377 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Donald Drake, salary=36583)]
2020-08-13 15:37:43,380 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Mario Franklin, salary=55598)]
2020-08-13 15:37:43,383 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Elmer Poole, salary=46394)]
2020-08-13 15:37:43,385 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Luella Reyes, salary=42103)]
2020-08-13 15:37:43,389 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Donald Drake, salary=36583)]
2020-08-13 15:37:43,394 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Mario Franklin, salary=55598)]
2020-08-13 15:37:43,396 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Elmer Poole, salary=46394)]
2020-08-13 15:37:43,398 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Luella Reyes, salary=42103)]
2020-08-13 15:37:43,400 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Donald Drake, salary=36583)]
2020-08-13 15:37:43,402 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Mario Franklin, salary=55598)]
2020-08-13 15:37:43,409 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Elmer Poole, salary=46394)]
2020-08-13 15:37:43,412 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Luella Reyes, salary=42103)]
2020-08-13 15:37:43,414 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Donald Drake, salary=36583)]
2020-08-13 15:37:43,416 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Mario Franklin, salary=55598)]
2020-08-13 15:37:43,418 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Luella Reyes, salary=42103)]
2020-08-13 15:37:43,419 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Donald Drake, salary=36583)]
2020-08-13 15:37:43,424 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Mario Franklin, salary=55598)]
2020-08-13 15:37:43,428 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Marion Tate, salary=18321)]
2020-08-13 15:37:43,430 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Marion Tate, salary=18321)]
2020-08-13 15:37:43,432 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Jorge Dawson, salary=14285)]
2020-08-13 15:37:43,433 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Josephine Banks, salary=47158)]
2020-08-13 15:37:43,435 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Scott Rodriquez, salary=19029)]
2020-08-13 15:37:43,442 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Marion Tate, salary=18321)]
2020-08-13 15:37:43,446 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Jorge Dawson, salary=14285)]
2020-08-13 15:37:43,448 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Josephine Banks, salary=47158)]
2020-08-13 15:37:43,449 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Scott Rodriquez, salary=19029)]
2020-08-13 15:37:43,452 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Marion Tate, salary=18321)]
2020-08-13 15:37:43,455 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Jorge Dawson, salary=14285)]
2020-08-13 15:37:43,460 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Josephine Banks, salary=47158)]
2020-08-13 15:37:43,462 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Scott Rodriquez, salary=19029)]
2020-08-13 15:37:43,467 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Marion Tate, salary=18321)]
2020-08-13 15:37:43,469 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Jorge Dawson, salary=14285)]
2020-08-13 15:37:43,476 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Josephine Banks, salary=47158)]
2020-08-13 15:37:43,479 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Scott Rodriquez, salary=19029)]
2020-08-13 15:37:43,482 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Marion Tate, salary=18321)]
2020-08-13 15:37:43,484 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Jorge Dawson, salary=14285)]
2020-08-13 15:37:43,485 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Josephine Banks, salary=47158)]
2020-08-13 15:37:43,491 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Scott Rodriquez, salary=19029)]
2020-08-13 15:37:43,494 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Marion Tate, salary=18321)]
2020-08-13 15:37:43,496 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Jorge Dawson, salary=14285)]
2020-08-13 15:37:43,498 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Josephine Banks, salary=47158)]
2020-08-13 15:37:43,499 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Scott Rodriquez, salary=19029)]
2020-08-13 15:37:43,500 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Jorge Dawson, salary=14285)]
2020-08-13 15:37:43,502 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Josephine Banks, salary=47158)]
2020-08-13 15:37:43,505 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Scott Rodriquez, salary=19029)]
2020-08-13 15:37:43,510 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Francis McDaniel, salary=30759)]
2020-08-13 15:37:43,512 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Francis McDaniel, salary=30759)]
2020-08-13 15:37:43,515 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Jay Banks, salary=42840)]
2020-08-13 15:37:43,516 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Lily Hughes, salary=35858)]
2020-08-13 15:37:43,518 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Ella Steele, salary=40652)]
2020-08-13 15:37:43,525 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Francis McDaniel, salary=30759)]
2020-08-13 15:37:43,527 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Jay Banks, salary=42840)]
2020-08-13 15:37:43,529 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Lily Hughes, salary=35858)]
2020-08-13 15:37:43,531 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Ella Steele, salary=40652)]
2020-08-13 15:37:43,533 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Francis McDaniel, salary=30759)]
2020-08-13 15:37:43,535 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Jay Banks, salary=42840)]
2020-08-13 15:37:43,543 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Lily Hughes, salary=35858)]
2020-08-13 15:37:43,545 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Ella Steele, salary=40652)]
2020-08-13 15:37:43,548 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Francis McDaniel, salary=30759)]
2020-08-13 15:37:43,551 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Jay Banks, salary=42840)]
2020-08-13 15:37:43,559 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Lily Hughes, salary=35858)]
2020-08-13 15:37:43,562 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Ella Steele, salary=40652)]
2020-08-13 15:37:43,564 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Francis McDaniel, salary=30759)]
2020-08-13 15:37:43,587 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Jay Banks, salary=42840)]
2020-08-13 15:37:43,593 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Lily Hughes, salary=35858)]
2020-08-13 15:37:43,596 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Ella Steele, salary=40652)]
2020-08-13 15:37:43,599 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Francis McDaniel, salary=30759)]
2020-08-13 15:37:43,601 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Jay Banks, salary=42840)]
2020-08-13 15:37:43,603 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Lily Hughes, salary=35858)]
2020-08-13 15:37:43,609 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Ella Steele, salary=40652)]
2020-08-13 15:37:43,611 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Jay Banks, salary=42840)]
2020-08-13 15:37:43,617 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Lily Hughes, salary=35858)]
2020-08-13 15:37:43,628 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Ella Steele, salary=40652)]
2020-08-13 15:37:43,633 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Daisy Robinson, salary=10859)]
2020-08-13 15:37:43,635 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Daisy Robinson, salary=10859)]
2020-08-13 15:37:43,643 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Verna Logan, salary=41319)]
2020-08-13 15:37:43,647 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Hulda Wright, salary=43736)]
2020-08-13 15:37:43,649 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Anthony Leonard, salary=55692)]
2020-08-13 15:37:43,651 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Daisy Robinson, salary=10859)]
2020-08-13 15:37:43,653 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Verna Logan, salary=41319)]
2020-08-13 15:37:43,658 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Hulda Wright, salary=43736)]
2020-08-13 15:37:43,663 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Anthony Leonard, salary=55692)]
2020-08-13 15:37:43,665 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Daisy Robinson, salary=10859)]
2020-08-13 15:37:43,667 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Verna Logan, salary=41319)]
2020-08-13 15:37:43,669 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Hulda Wright, salary=43736)]
2020-08-13 15:37:43,671 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Anthony Leonard, salary=55692)]
2020-08-13 15:37:43,677 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Daisy Robinson, salary=10859)]
2020-08-13 15:37:43,679 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Verna Logan, salary=41319)]
2020-08-13 15:37:43,681 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Hulda Wright, salary=43736)]
2020-08-13 15:37:43,683 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Anthony Leonard, salary=55692)]
2020-08-13 15:37:43,685 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Daisy Robinson, salary=10859)]
2020-08-13 15:37:43,692 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Verna Logan, salary=41319)]
2020-08-13 15:37:43,695 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Hulda Wright, salary=43736)]
2020-08-13 15:37:43,697 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Anthony Leonard, salary=55692)]
2020-08-13 15:37:43,699 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Daisy Robinson, salary=10859)]
2020-08-13 15:37:43,701 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Verna Logan, salary=41319)]
2020-08-13 15:37:43,703 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Hulda Wright, salary=43736)]
2020-08-13 15:37:43,704 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Anthony Leonard, salary=55692)]
2020-08-13 15:37:43,710 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Verna Logan, salary=41319)]
2020-08-13 15:37:43,711 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Hulda Wright, salary=43736)]
2020-08-13 15:37:43,713 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Anthony Leonard, salary=55692)]
2020-08-13 15:37:43,715 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Harriett Bell, salary=32241)]
2020-08-13 15:37:43,717 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Harriett Bell, salary=32241)]
2020-08-13 15:37:43,718 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=Charlotte Campbell, salary=434)]
2020-08-13 15:37:43,720 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Luis McKinney, salary=29610)]
2020-08-13 15:37:43,725 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Cynthia Leonard, salary=27394)]
2020-08-13 15:37:43,727 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Harriett Bell, salary=32241)]
2020-08-13 15:37:43,728 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=Charlotte Campbell, salary=434)]
2020-08-13 15:37:43,730 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Luis McKinney, salary=29610)]
2020-08-13 15:37:43,731 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Cynthia Leonard, salary=27394)]
2020-08-13 15:37:43,733 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Harriett Bell, salary=32241)]
2020-08-13 15:37:43,734 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=Charlotte Campbell, salary=434)]
2020-08-13 15:37:43,736 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Luis McKinney, salary=29610)]
2020-08-13 15:37:43,737 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Cynthia Leonard, salary=27394)]
2020-08-13 15:37:43,740 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Harriett Bell, salary=32241)]
2020-08-13 15:37:43,744 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=Charlotte Campbell, salary=434)]
2020-08-13 15:37:43,746 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Luis McKinney, salary=29610)]
2020-08-13 15:37:43,758 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Cynthia Leonard, salary=27394)]
2020-08-13 15:37:43,760 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Harriett Bell, salary=32241)]
2020-08-13 15:37:43,762 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=Charlotte Campbell, salary=434)]
2020-08-13 15:37:43,763 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Luis McKinney, salary=29610)]
2020-08-13 15:37:43,765 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Cynthia Leonard, salary=27394)]
2020-08-13 15:37:43,767 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Harriett Bell, salary=32241)]
2020-08-13 15:37:43,768 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=Charlotte Campbell, salary=434)]
2020-08-13 15:37:43,769 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Luis McKinney, salary=29610)]
2020-08-13 15:37:43,771 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Cynthia Leonard, salary=27394)]
2020-08-13 15:37:43,776 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=Charlotte Campbell, salary=434)]
2020-08-13 15:37:43,778 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Luis McKinney, salary=29610)]
2020-08-13 15:37:43,779 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Cynthia Leonard, salary=27394)]
2020-08-13 15:37:43,781 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Hallie Cross, salary=57607)]
2020-08-13 15:37:43,783 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Hallie Cross, salary=57607)]
2020-08-13 15:37:43,786 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Susie Hammond, salary=54862)]
2020-08-13 15:37:43,791 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Tommy Valdez, salary=7635)]
2020-08-13 15:37:43,793 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Mina Collier, salary=56192)]
2020-08-13 15:37:43,795 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Hallie Cross, salary=57607)]
2020-08-13 15:37:43,797 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Susie Hammond, salary=54862)]
2020-08-13 15:37:43,801 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Tommy Valdez, salary=7635)]
2020-08-13 15:37:43,807 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Mina Collier, salary=56192)]
2020-08-13 15:37:43,811 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Hallie Cross, salary=57607)]
2020-08-13 15:37:43,813 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Susie Hammond, salary=54862)]
2020-08-13 15:37:43,815 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Tommy Valdez, salary=7635)]
2020-08-13 15:37:43,816 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Mina Collier, salary=56192)]
2020-08-13 15:37:43,817 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Hallie Cross, salary=57607)]
2020-08-13 15:37:43,819 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Susie Hammond, salary=54862)]
2020-08-13 15:37:43,820 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Tommy Valdez, salary=7635)]
2020-08-13 15:37:43,822 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Mina Collier, salary=56192)]
2020-08-13 15:37:43,826 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Hallie Cross, salary=57607)]
2020-08-13 15:37:43,828 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Susie Hammond, salary=54862)]
2020-08-13 15:37:43,829 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Tommy Valdez, salary=7635)]
2020-08-13 15:37:43,831 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Mina Collier, salary=56192)]
2020-08-13 15:37:43,832 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Hallie Cross, salary=57607)]
2020-08-13 15:37:43,834 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Susie Hammond, salary=54862)]
2020-08-13 15:37:43,835 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Tommy Valdez, salary=7635)]
2020-08-13 15:37:43,837 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Mina Collier, salary=56192)]
2020-08-13 15:37:43,843 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Susie Hammond, salary=54862)]
2020-08-13 15:37:43,845 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Tommy Valdez, salary=7635)]
2020-08-13 15:37:43,847 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Mina Collier, salary=56192)]
2020-08-13 15:37:43,849 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Lucy Sanders, salary=22532)]
2020-08-13 15:37:43,851 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Lucy Sanders, salary=22532)]
2020-08-13 15:37:43,853 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Addie McDaniel, salary=24663)]
2020-08-13 15:37:43,854 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Lottie Ruiz, salary=35079)]
2020-08-13 15:37:43,859 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Charlotte Roberson, salary=14391)]
2020-08-13 15:37:43,860 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Lucy Sanders, salary=22532)]
2020-08-13 15:37:43,861 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Addie McDaniel, salary=24663)]
2020-08-13 15:37:43,863 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Lottie Ruiz, salary=35079)]
2020-08-13 15:37:43,864 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Charlotte Roberson, salary=14391)]
2020-08-13 15:37:43,865 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Lucy Sanders, salary=22532)]
2020-08-13 15:37:43,867 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Addie McDaniel, salary=24663)]
2020-08-13 15:37:43,868 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Lottie Ruiz, salary=35079)]
2020-08-13 15:37:43,870 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Charlotte Roberson, salary=14391)]
2020-08-13 15:37:43,872 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Lucy Sanders, salary=22532)]
2020-08-13 15:37:43,877 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Addie McDaniel, salary=24663)]
2020-08-13 15:37:43,879 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Lottie Ruiz, salary=35079)]
2020-08-13 15:37:43,880 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Charlotte Roberson, salary=14391)]
2020-08-13 15:37:43,882 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Lucy Sanders, salary=22532)]
2020-08-13 15:37:43,902 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Addie McDaniel, salary=24663)]
2020-08-13 15:37:43,919 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Lottie Ruiz, salary=35079)]
2020-08-13 15:37:43,921 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Charlotte Roberson, salary=14391)]
2020-08-13 15:37:43,925 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Lucy Sanders, salary=22532)]
2020-08-13 15:37:43,928 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Addie McDaniel, salary=24663)]
2020-08-13 15:37:43,929 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Lottie Ruiz, salary=35079)]
2020-08-13 15:37:43,931 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Charlotte Roberson, salary=14391)]
2020-08-13 15:37:43,932 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Addie McDaniel, salary=24663)]
2020-08-13 15:37:43,934 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Lottie Ruiz, salary=35079)]
2020-08-13 15:37:43,936 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Charlotte Roberson, salary=14391)]
2020-08-13 15:37:43,942 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Beatrice Black, salary=47459)]
2020-08-13 15:37:43,945 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Beatrice Black, salary=47459)]
2020-08-13 15:37:43,946 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Albert Holt, salary=53550)]
2020-08-13 15:37:43,948 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Lenora McLaughlin, salary=9259)]
2020-08-13 15:37:43,949 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Travis Sanchez, salary=19000)]
2020-08-13 15:37:43,951 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Beatrice Black, salary=47459)]
2020-08-13 15:37:43,979 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Albert Holt, salary=53550)]
2020-08-13 15:37:43,982 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Lenora McLaughlin, salary=9259)]
2020-08-13 15:37:43,983 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Travis Sanchez, salary=19000)]
2020-08-13 15:37:43,985 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Beatrice Black, salary=47459)]
2020-08-13 15:37:43,987 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Albert Holt, salary=53550)]
2020-08-13 15:37:43,995 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Lenora McLaughlin, salary=9259)]
2020-08-13 15:37:43,998 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Travis Sanchez, salary=19000)]
2020-08-13 15:37:43,999 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Beatrice Black, salary=47459)]
2020-08-13 15:37:44,001 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Albert Holt, salary=53550)]
2020-08-13 15:37:44,003 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Lenora McLaughlin, salary=9259)]
2020-08-13 15:37:44,008 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Travis Sanchez, salary=19000)]
2020-08-13 15:37:44,011 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Beatrice Black, salary=47459)]
2020-08-13 15:37:44,013 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Albert Holt, salary=53550)]
2020-08-13 15:37:44,015 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Lenora McLaughlin, salary=9259)]
2020-08-13 15:37:44,016 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Travis Sanchez, salary=19000)]
2020-08-13 15:37:44,018 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Beatrice Black, salary=47459)]
2020-08-13 15:37:44,019 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Albert Holt, salary=53550)]
2020-08-13 15:37:44,020 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Lenora McLaughlin, salary=9259)]
2020-08-13 15:37:44,031 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Travis Sanchez, salary=19000)]
2020-08-13 15:37:44,032 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Albert Holt, salary=53550)]
2020-08-13 15:37:44,034 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Lenora McLaughlin, salary=9259)]
2020-08-13 15:37:44,035 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Travis Sanchez, salary=19000)]
2020-08-13 15:37:44,037 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Jean Castro, salary=1187)]
2020-08-13 15:37:44,040 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Jean Castro, salary=1187)]
2020-08-13 15:37:44,043 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Oscar Griffin, salary=35474)]
2020-08-13 15:37:44,045 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Jordan Mann, salary=7702)]
2020-08-13 15:37:44,046 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Virgie Hamilton, salary=12305)]
2020-08-13 15:37:44,048 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Jean Castro, salary=1187)]
2020-08-13 15:37:44,050 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Oscar Griffin, salary=35474)]
2020-08-13 15:37:44,051 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Jordan Mann, salary=7702)]
2020-08-13 15:37:44,053 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Virgie Hamilton, salary=12305)]
2020-08-13 15:37:44,060 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Jean Castro, salary=1187)]
2020-08-13 15:37:44,062 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Oscar Griffin, salary=35474)]
2020-08-13 15:37:44,064 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Jordan Mann, salary=7702)]
2020-08-13 15:37:44,066 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Virgie Hamilton, salary=12305)]
2020-08-13 15:37:44,068 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Jean Castro, salary=1187)]
2020-08-13 15:37:44,070 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Oscar Griffin, salary=35474)]
2020-08-13 15:37:44,099 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Jordan Mann, salary=7702)]
2020-08-13 15:37:44,101 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Virgie Hamilton, salary=12305)]
2020-08-13 15:37:44,102 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Jean Castro, salary=1187)]
2020-08-13 15:37:44,107 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Oscar Griffin, salary=35474)]
2020-08-13 15:37:44,110 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Jordan Mann, salary=7702)]
2020-08-13 15:37:44,112 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Virgie Hamilton, salary=12305)]
2020-08-13 15:37:44,114 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Jean Castro, salary=1187)]
2020-08-13 15:37:44,116 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Oscar Griffin, salary=35474)]
2020-08-13 15:37:44,118 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Jordan Mann, salary=7702)]
2020-08-13 15:37:44,127 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Virgie Hamilton, salary=12305)]
2020-08-13 15:37:44,129 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Oscar Griffin, salary=35474)]
2020-08-13 15:37:44,132 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Jordan Mann, salary=7702)]
2020-08-13 15:37:44,134 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Virgie Hamilton, salary=12305)]
2020-08-13 15:37:44,136 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Amelia King, salary=52264)]
2020-08-13 15:37:44,141 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Amelia King, salary=52264)]
2020-08-13 15:37:44,144 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Julia Burns, salary=27572)]
2020-08-13 15:37:44,147 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Herman Joseph, salary=48687)]
2020-08-13 15:37:44,149 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Gregory Owen, salary=50226)]
2020-08-13 15:37:44,151 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Amelia King, salary=52264)]
2020-08-13 15:37:44,152 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Julia Burns, salary=27572)]
2020-08-13 15:37:44,157 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Herman Joseph, salary=48687)]
2020-08-13 15:37:44,161 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Gregory Owen, salary=50226)]
2020-08-13 15:37:44,162 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Amelia King, salary=52264)]
2020-08-13 15:37:44,164 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Julia Burns, salary=27572)]
2020-08-13 15:37:44,165 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Herman Joseph, salary=48687)]
2020-08-13 15:37:44,167 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Gregory Owen, salary=50226)]
2020-08-13 15:37:44,169 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Amelia King, salary=52264)]
2020-08-13 15:37:44,171 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Julia Burns, salary=27572)]
2020-08-13 15:37:44,176 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Herman Joseph, salary=48687)]
2020-08-13 15:37:44,178 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Gregory Owen, salary=50226)]
2020-08-13 15:37:44,180 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Amelia King, salary=52264)]
2020-08-13 15:37:44,182 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Julia Burns, salary=27572)]
2020-08-13 15:37:44,184 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Herman Joseph, salary=48687)]
2020-08-13 15:37:44,185 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Gregory Owen, salary=50226)]
2020-08-13 15:37:44,186 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Amelia King, salary=52264)]
2020-08-13 15:37:44,188 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Julia Burns, salary=27572)]
2020-08-13 15:37:44,191 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Herman Joseph, salary=48687)]
2020-08-13 15:37:44,194 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Gregory Owen, salary=50226)]
2020-08-13 15:37:44,195 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Julia Burns, salary=27572)]
2020-08-13 15:37:44,197 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Herman Joseph, salary=48687)]
2020-08-13 15:37:44,198 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Gregory Owen, salary=50226)]
2020-08-13 15:37:44,199 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Sophia Chavez, salary=1404)]
2020-08-13 15:37:44,200 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Sophia Chavez, salary=1404)]
2020-08-13 15:37:44,201 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Dollie Garza, salary=59114)]
2020-08-13 15:37:44,203 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Ruby Yates, salary=8949)]
2020-08-13 15:37:44,204 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Lela Scott, salary=16440)]
2020-08-13 15:37:44,208 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Sophia Chavez, salary=1404)]
2020-08-13 15:37:44,209 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Dollie Garza, salary=59114)]
2020-08-13 15:37:44,211 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Ruby Yates, salary=8949)]
2020-08-13 15:37:44,212 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Lela Scott, salary=16440)]
2020-08-13 15:37:44,213 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Sophia Chavez, salary=1404)]
2020-08-13 15:37:44,214 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Dollie Garza, salary=59114)]
2020-08-13 15:37:44,216 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Ruby Yates, salary=8949)]
2020-08-13 15:37:44,217 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Lela Scott, salary=16440)]
2020-08-13 15:37:44,218 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Sophia Chavez, salary=1404)]
2020-08-13 15:37:44,219 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Dollie Garza, salary=59114)]
2020-08-13 15:37:44,221 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Ruby Yates, salary=8949)]
2020-08-13 15:37:44,224 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Lela Scott, salary=16440)]
2020-08-13 15:37:44,227 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Sophia Chavez, salary=1404)]
2020-08-13 15:37:44,228 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Dollie Garza, salary=59114)]
2020-08-13 15:37:44,230 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Ruby Yates, salary=8949)]
2020-08-13 15:37:44,232 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Lela Scott, salary=16440)]
2020-08-13 15:37:44,234 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Sophia Chavez, salary=1404)]
2020-08-13 15:37:44,235 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Dollie Garza, salary=59114)]
2020-08-13 15:37:44,236 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Ruby Yates, salary=8949)]
2020-08-13 15:37:44,238 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Lela Scott, salary=16440)]
2020-08-13 15:37:44,242 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Dollie Garza, salary=59114)]
2020-08-13 15:37:44,244 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Ruby Yates, salary=8949)]
2020-08-13 15:37:44,245 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Lela Scott, salary=16440)]
2020-08-13 15:37:44,247 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Oscar Lane, salary=25693)]
2020-08-13 15:37:44,248 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Oscar Lane, salary=25693)]
2020-08-13 15:37:44,250 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Emilie Pope, salary=56991)]
2020-08-13 15:37:44,251 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Paul Alexander, salary=4801)]
2020-08-13 15:37:44,253 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Eric Huff, salary=56648)]
2020-08-13 15:37:44,255 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Oscar Lane, salary=25693)]
2020-08-13 15:37:44,259 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Emilie Pope, salary=56991)]
2020-08-13 15:37:44,261 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Paul Alexander, salary=4801)]
2020-08-13 15:37:44,270 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Eric Huff, salary=56648)]
2020-08-13 15:37:44,278 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Oscar Lane, salary=25693)]
2020-08-13 15:37:44,280 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Emilie Pope, salary=56991)]
2020-08-13 15:37:44,283 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Paul Alexander, salary=4801)]
2020-08-13 15:37:44,285 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Eric Huff, salary=56648)]
2020-08-13 15:37:44,290 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Oscar Lane, salary=25693)]
2020-08-13 15:37:44,292 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Emilie Pope, salary=56991)]
2020-08-13 15:37:44,294 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Paul Alexander, salary=4801)]
2020-08-13 15:37:44,296 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Eric Huff, salary=56648)]
2020-08-13 15:37:44,298 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Oscar Lane, salary=25693)]
2020-08-13 15:37:44,300 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Emilie Pope, salary=56991)]
2020-08-13 15:37:44,302 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Paul Alexander, salary=4801)]
2020-08-13 15:37:44,309 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Eric Huff, salary=56648)]
2020-08-13 15:37:44,311 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Oscar Lane, salary=25693)]
2020-08-13 15:37:44,313 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Emilie Pope, salary=56991)]
2020-08-13 15:37:44,316 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Paul Alexander, salary=4801)]
2020-08-13 15:37:44,318 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Eric Huff, salary=56648)]
2020-08-13 15:37:44,323 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Emilie Pope, salary=56991)]
2020-08-13 15:37:44,326 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Paul Alexander, salary=4801)]
2020-08-13 15:37:44,328 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Eric Huff, salary=56648)]
2020-08-13 15:37:44,330 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Barry Kennedy, salary=37118)]
2020-08-13 15:37:44,331 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Barry Kennedy, salary=37118)]
2020-08-13 15:37:44,333 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Willie Huff, salary=54776)]
2020-08-13 15:37:44,335 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Victoria Gardner, salary=7860)]
2020-08-13 15:37:44,337 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Clayton Moody, salary=53790)]
2020-08-13 15:37:44,343 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Barry Kennedy, salary=37118)]
2020-08-13 15:37:44,346 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Willie Huff, salary=54776)]
2020-08-13 15:37:44,348 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Victoria Gardner, salary=7860)]
2020-08-13 15:37:44,349 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Clayton Moody, salary=53790)]
2020-08-13 15:37:44,351 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Barry Kennedy, salary=37118)]
2020-08-13 15:37:44,353 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Willie Huff, salary=54776)]
2020-08-13 15:37:44,358 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Victoria Gardner, salary=7860)]
2020-08-13 15:37:44,360 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Clayton Moody, salary=53790)]
2020-08-13 15:37:44,363 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Barry Kennedy, salary=37118)]
2020-08-13 15:37:44,364 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Willie Huff, salary=54776)]
2020-08-13 15:37:44,366 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Victoria Gardner, salary=7860)]
2020-08-13 15:37:44,368 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Clayton Moody, salary=53790)]
2020-08-13 15:37:44,370 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Barry Kennedy, salary=37118)]
2020-08-13 15:37:44,378 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Willie Huff, salary=54776)]
2020-08-13 15:37:44,379 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Victoria Gardner, salary=7860)]
2020-08-13 15:37:44,382 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Clayton Moody, salary=53790)]
2020-08-13 15:37:44,384 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Barry Kennedy, salary=37118)]
2020-08-13 15:37:44,390 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Willie Huff, salary=54776)]
2020-08-13 15:37:44,393 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Victoria Gardner, salary=7860)]
2020-08-13 15:37:44,395 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Clayton Moody, salary=53790)]
2020-08-13 15:37:44,398 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Willie Huff, salary=54776)]
2020-08-13 15:37:44,400 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Victoria Gardner, salary=7860)]
2020-08-13 15:37:44,402 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Clayton Moody, salary=53790)]
2020-08-13 15:37:44,406 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Alexander King, salary=43045)]
2020-08-13 15:37:44,411 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Alexander King, salary=43045)]
2020-08-13 15:37:44,413 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Jim Chambers, salary=29064)]
2020-08-13 15:37:44,415 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Jane Bryan, salary=23706)]
2020-08-13 15:37:44,421 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Robert Coleman, salary=32684)]
2020-08-13 15:37:44,427 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Alexander King, salary=43045)]
2020-08-13 15:37:44,429 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Jim Chambers, salary=29064)]
2020-08-13 15:37:44,432 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Jane Bryan, salary=23706)]
2020-08-13 15:37:44,434 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Robert Coleman, salary=32684)]
2020-08-13 15:37:44,436 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Alexander King, salary=43045)]
2020-08-13 15:37:44,443 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Jim Chambers, salary=29064)]
2020-08-13 15:37:44,445 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Jane Bryan, salary=23706)]
2020-08-13 15:37:44,447 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Robert Coleman, salary=32684)]
2020-08-13 15:37:44,449 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Alexander King, salary=43045)]
2020-08-13 15:37:44,450 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Jim Chambers, salary=29064)]
2020-08-13 15:37:44,453 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Jane Bryan, salary=23706)]
2020-08-13 15:37:44,456 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Robert Coleman, salary=32684)]
2020-08-13 15:37:44,460 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Alexander King, salary=43045)]
2020-08-13 15:37:44,462 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Jim Chambers, salary=29064)]
2020-08-13 15:37:44,464 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Jane Bryan, salary=23706)]
2020-08-13 15:37:44,467 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Robert Coleman, salary=32684)]
2020-08-13 15:37:44,470 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Alexander King, salary=43045)]
2020-08-13 15:37:44,480 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Jim Chambers, salary=29064)]
2020-08-13 15:37:44,482 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Jane Bryan, salary=23706)]
2020-08-13 15:37:44,485 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Robert Coleman, salary=32684)]
2020-08-13 15:37:44,489 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Jim Chambers, salary=29064)]
2020-08-13 15:37:44,493 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Jane Bryan, salary=23706)]
2020-08-13 15:37:44,501 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Robert Coleman, salary=32684)]
2020-08-13 15:37:44,504 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Miguel Owen, salary=1497)]
2020-08-13 15:37:44,510 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Miguel Owen, salary=1497)]
2020-08-13 15:37:44,513 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Alta Cox, salary=59153)]
2020-08-13 15:37:44,516 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Estelle Hicks, salary=36514)]
2020-08-13 15:37:44,518 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Cynthia Hines, salary=29897)]
2020-08-13 15:37:44,525 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Miguel Owen, salary=1497)]
2020-08-13 15:37:44,529 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Alta Cox, salary=59153)]
2020-08-13 15:37:44,533 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Estelle Hicks, salary=36514)]
2020-08-13 15:37:44,535 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Cynthia Hines, salary=29897)]
2020-08-13 15:37:44,537 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Miguel Owen, salary=1497)]
2020-08-13 15:37:44,546 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Alta Cox, salary=59153)]
2020-08-13 15:37:44,548 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Estelle Hicks, salary=36514)]
2020-08-13 15:37:44,550 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Cynthia Hines, salary=29897)]
2020-08-13 15:37:44,553 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Miguel Owen, salary=1497)]
2020-08-13 15:37:44,561 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Alta Cox, salary=59153)]
2020-08-13 15:37:44,564 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Estelle Hicks, salary=36514)]
2020-08-13 15:37:44,566 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Cynthia Hines, salary=29897)]
2020-08-13 15:37:44,569 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Miguel Owen, salary=1497)]
2020-08-13 15:37:44,576 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Alta Cox, salary=59153)]
2020-08-13 15:37:44,580 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Estelle Hicks, salary=36514)]
2020-08-13 15:37:44,583 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Cynthia Hines, salary=29897)]
2020-08-13 15:37:44,585 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Miguel Owen, salary=1497)]
2020-08-13 15:37:44,587 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Alta Cox, salary=59153)]
2020-08-13 15:37:44,591 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Estelle Hicks, salary=36514)]
2020-08-13 15:37:44,594 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Cynthia Hines, salary=29897)]
2020-08-13 15:37:44,596 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Alta Cox, salary=59153)]
2020-08-13 15:37:44,597 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Estelle Hicks, salary=36514)]
2020-08-13 15:37:44,599 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Cynthia Hines, salary=29897)]
2020-08-13 15:37:44,601 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Derek Freeman, salary=16316)]
2020-08-13 15:37:44,603 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Derek Freeman, salary=16316)]
2020-08-13 15:37:44,605 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Ina Lambert, salary=38485)]
2020-08-13 15:37:44,611 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Derek Diaz, salary=52136)]
2020-08-13 15:37:44,613 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Verna Ward, salary=37249)]
2020-08-13 15:37:44,615 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Derek Freeman, salary=16316)]
2020-08-13 15:37:44,617 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Ina Lambert, salary=38485)]
2020-08-13 15:37:44,619 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Derek Diaz, salary=52136)]
2020-08-13 15:37:44,621 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Verna Ward, salary=37249)]
2020-08-13 15:37:44,627 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Derek Freeman, salary=16316)]
2020-08-13 15:37:44,629 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Ina Lambert, salary=38485)]
2020-08-13 15:37:44,631 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Derek Diaz, salary=52136)]
2020-08-13 15:37:44,632 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Verna Ward, salary=37249)]
2020-08-13 15:37:44,634 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Derek Freeman, salary=16316)]
2020-08-13 15:37:44,636 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Ina Lambert, salary=38485)]
2020-08-13 15:37:44,638 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Derek Diaz, salary=52136)]
2020-08-13 15:37:44,643 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Verna Ward, salary=37249)]
2020-08-13 15:37:44,648 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Derek Freeman, salary=16316)]
2020-08-13 15:37:44,650 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Ina Lambert, salary=38485)]
2020-08-13 15:37:44,653 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Derek Diaz, salary=52136)]
2020-08-13 15:37:44,658 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Verna Ward, salary=37249)]
2020-08-13 15:37:44,660 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Derek Freeman, salary=16316)]
2020-08-13 15:37:44,662 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Ina Lambert, salary=38485)]
2020-08-13 15:37:44,663 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Derek Diaz, salary=52136)]
2020-08-13 15:37:44,665 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Verna Ward, salary=37249)]
2020-08-13 15:37:44,667 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Ina Lambert, salary=38485)]
2020-08-13 15:37:44,668 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Derek Diaz, salary=52136)]
2020-08-13 15:37:44,674 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Verna Ward, salary=37249)]
2020-08-13 15:37:44,676 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Alan Lawrence, salary=12900)]
2020-08-13 15:37:44,679 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Alan Lawrence, salary=12900)]
2020-08-13 15:37:44,681 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Caleb Townsend, salary=29935)]
2020-08-13 15:37:44,683 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Maud Powell, salary=28523)]
2020-08-13 15:37:44,685 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Alejandro Bowman, salary=23289)]
2020-08-13 15:37:44,687 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Alan Lawrence, salary=12900)]
2020-08-13 15:37:44,692 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Caleb Townsend, salary=29935)]
2020-08-13 15:37:44,695 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Maud Powell, salary=28523)]
2020-08-13 15:37:44,698 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Alejandro Bowman, salary=23289)]
2020-08-13 15:37:44,700 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Alan Lawrence, salary=12900)]
2020-08-13 15:37:44,702 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Caleb Townsend, salary=29935)]
2020-08-13 15:37:44,708 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Maud Powell, salary=28523)]
2020-08-13 15:37:44,710 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Alejandro Bowman, salary=23289)]
2020-08-13 15:37:44,712 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Alan Lawrence, salary=12900)]
2020-08-13 15:37:44,714 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Caleb Townsend, salary=29935)]
2020-08-13 15:37:44,717 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Maud Powell, salary=28523)]
2020-08-13 15:37:44,719 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Alejandro Bowman, salary=23289)]
2020-08-13 15:37:44,725 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Alan Lawrence, salary=12900)]
2020-08-13 15:37:44,727 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Caleb Townsend, salary=29935)]
2020-08-13 15:37:44,729 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Maud Powell, salary=28523)]
2020-08-13 15:37:44,731 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Alejandro Bowman, salary=23289)]
2020-08-13 15:37:44,733 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Alan Lawrence, salary=12900)]
2020-08-13 15:37:44,734 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Caleb Townsend, salary=29935)]
2020-08-13 15:37:44,736 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Maud Powell, salary=28523)]
2020-08-13 15:37:44,742 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Alejandro Bowman, salary=23289)]
2020-08-13 15:37:44,745 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Caleb Townsend, salary=29935)]
2020-08-13 15:37:44,748 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Maud Powell, salary=28523)]
2020-08-13 15:37:44,749 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Alejandro Bowman, salary=23289)]
2020-08-13 15:37:44,751 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Katharine Meyer, salary=17090)]
2020-08-13 15:37:44,752 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Katharine Meyer, salary=17090)]
2020-08-13 15:37:44,759 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Marion Garcia, salary=41361)]
2020-08-13 15:37:44,760 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Gary Perez, salary=35256)]
2020-08-13 15:37:44,762 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Mamie Garner, salary=30041)]
2020-08-13 15:37:44,764 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Katharine Meyer, salary=17090)]
2020-08-13 15:37:44,765 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Marion Garcia, salary=41361)]
2020-08-13 15:37:44,767 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Gary Perez, salary=35256)]
2020-08-13 15:37:44,769 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Mamie Garner, salary=30041)]
2020-08-13 15:37:44,770 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Katharine Meyer, salary=17090)]
2020-08-13 15:37:44,775 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Marion Garcia, salary=41361)]
2020-08-13 15:37:44,777 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Gary Perez, salary=35256)]
2020-08-13 15:37:44,779 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Mamie Garner, salary=30041)]
2020-08-13 15:37:44,780 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Katharine Meyer, salary=17090)]
2020-08-13 15:37:44,782 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Marion Garcia, salary=41361)]
2020-08-13 15:37:44,784 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Gary Perez, salary=35256)]
2020-08-13 15:37:44,785 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Mamie Garner, salary=30041)]
2020-08-13 15:37:44,787 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Katharine Meyer, salary=17090)]
2020-08-13 15:37:44,793 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Marion Garcia, salary=41361)]
2020-08-13 15:37:44,794 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Gary Perez, salary=35256)]
2020-08-13 15:37:44,796 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Mamie Garner, salary=30041)]
2020-08-13 15:37:44,798 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Katharine Meyer, salary=17090)]
2020-08-13 15:37:44,799 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Marion Garcia, salary=41361)]
2020-08-13 15:37:44,801 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Gary Perez, salary=35256)]
2020-08-13 15:37:44,802 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Mamie Garner, salary=30041)]
2020-08-13 15:37:44,804 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Marion Garcia, salary=41361)]
2020-08-13 15:37:44,809 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Gary Perez, salary=35256)]
2020-08-13 15:37:44,811 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Mamie Garner, salary=30041)]
2020-08-13 15:37:44,812 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Randy Ferguson, salary=42622)]
2020-08-13 15:37:44,814 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Randy Ferguson, salary=42622)]
2020-08-13 15:37:44,815 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Gussie Walton, salary=44450)]
2020-08-13 15:37:44,817 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Sara Castillo, salary=52670)]
2020-08-13 15:37:44,818 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Virgie Norman, salary=7906)]
2020-08-13 15:37:44,820 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Randy Ferguson, salary=42622)]
2020-08-13 15:37:44,824 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Gussie Walton, salary=44450)]
2020-08-13 15:37:44,827 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Sara Castillo, salary=52670)]
2020-08-13 15:37:44,829 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Virgie Norman, salary=7906)]
2020-08-13 15:37:44,830 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Randy Ferguson, salary=42622)]
2020-08-13 15:37:44,832 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Gussie Walton, salary=44450)]
2020-08-13 15:37:44,833 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Sara Castillo, salary=52670)]
2020-08-13 15:37:44,834 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Virgie Norman, salary=7906)]
2020-08-13 15:37:44,836 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Randy Ferguson, salary=42622)]
2020-08-13 15:37:44,837 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Gussie Walton, salary=44450)]
2020-08-13 15:37:44,842 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Sara Castillo, salary=52670)]
2020-08-13 15:37:44,844 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Virgie Norman, salary=7906)]
2020-08-13 15:37:44,845 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Randy Ferguson, salary=42622)]
2020-08-13 15:37:44,847 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Gussie Walton, salary=44450)]
2020-08-13 15:37:44,849 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Sara Castillo, salary=52670)]
2020-08-13 15:37:44,851 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Virgie Norman, salary=7906)]
2020-08-13 15:37:44,853 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Randy Ferguson, salary=42622)]
2020-08-13 15:37:44,859 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Gussie Walton, salary=44450)]
2020-08-13 15:37:44,870 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Sara Castillo, salary=52670)]
2020-08-13 15:37:44,876 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Virgie Norman, salary=7906)]
2020-08-13 15:37:44,879 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Gussie Walton, salary=44450)]
2020-08-13 15:37:44,880 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Sara Castillo, salary=52670)]
2020-08-13 15:37:44,882 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Virgie Norman, salary=7906)]
2020-08-13 15:37:44,884 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Marvin Vaughn, salary=12889)]
2020-08-13 15:37:44,886 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Marvin Vaughn, salary=12889)]
2020-08-13 15:37:44,893 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=James Brewer, salary=38121)]
2020-08-13 15:37:44,895 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Mable Hale, salary=13575)]
2020-08-13 15:37:44,897 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Jeff Stokes, salary=51945)]
2020-08-13 15:37:44,899 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Marvin Vaughn, salary=12889)]
2020-08-13 15:37:44,901 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=James Brewer, salary=38121)]
2020-08-13 15:37:44,909 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Mable Hale, salary=13575)]
2020-08-13 15:37:44,912 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Jeff Stokes, salary=51945)]
2020-08-13 15:37:44,915 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Marvin Vaughn, salary=12889)]
2020-08-13 15:37:44,919 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=James Brewer, salary=38121)]
2020-08-13 15:37:44,921 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Mable Hale, salary=13575)]
2020-08-13 15:37:44,925 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Jeff Stokes, salary=51945)]
2020-08-13 15:37:44,928 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Marvin Vaughn, salary=12889)]
2020-08-13 15:37:44,930 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=James Brewer, salary=38121)]
2020-08-13 15:37:44,931 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Mable Hale, salary=13575)]
2020-08-13 15:37:44,933 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Jeff Stokes, salary=51945)]
2020-08-13 15:37:44,935 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Marvin Vaughn, salary=12889)]
2020-08-13 15:37:44,936 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=James Brewer, salary=38121)]
2020-08-13 15:37:44,938 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Mable Hale, salary=13575)]
2020-08-13 15:37:44,944 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Jeff Stokes, salary=51945)]
2020-08-13 15:37:44,946 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Marvin Vaughn, salary=12889)]
2020-08-13 15:37:44,947 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=James Brewer, salary=38121)]
2020-08-13 15:37:44,949 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Mable Hale, salary=13575)]
2020-08-13 15:37:44,950 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Jeff Stokes, salary=51945)]
2020-08-13 15:37:44,952 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=James Brewer, salary=38121)]
2020-08-13 15:37:44,953 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Mable Hale, salary=13575)]
2020-08-13 15:37:44,960 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Jeff Stokes, salary=51945)]
2020-08-13 15:37:44,963 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bess Howell, salary=33153)]
2020-08-13 15:37:44,964 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bess Howell, salary=33153)]
2020-08-13 15:37:44,966 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Adeline Brock, salary=46421)]
2020-08-13 15:37:44,967 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Alberta Franklin, salary=8893)]
2020-08-13 15:37:44,969 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Chase Palmer, salary=57118)]
2020-08-13 15:37:44,970 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bess Howell, salary=33153)]
2020-08-13 15:37:44,977 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Adeline Brock, salary=46421)]
2020-08-13 15:37:44,979 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Alberta Franklin, salary=8893)]
2020-08-13 15:37:44,981 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Chase Palmer, salary=57118)]
2020-08-13 15:37:44,983 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bess Howell, salary=33153)]
2020-08-13 15:37:44,984 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Adeline Brock, salary=46421)]
2020-08-13 15:37:44,986 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Alberta Franklin, salary=8893)]
2020-08-13 15:37:44,987 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Chase Palmer, salary=57118)]
2020-08-13 15:37:44,992 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bess Howell, salary=33153)]
2020-08-13 15:37:44,995 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Adeline Brock, salary=46421)]
2020-08-13 15:37:44,996 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Alberta Franklin, salary=8893)]
2020-08-13 15:37:44,998 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Chase Palmer, salary=57118)]
2020-08-13 15:37:44,999 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bess Howell, salary=33153)]
2020-08-13 15:37:45,001 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Adeline Brock, salary=46421)]
2020-08-13 15:37:45,002 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Alberta Franklin, salary=8893)]
2020-08-13 15:37:45,004 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Chase Palmer, salary=57118)]
2020-08-13 15:37:45,014 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bess Howell, salary=33153)]
2020-08-13 15:37:45,016 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Adeline Brock, salary=46421)]
2020-08-13 15:37:45,019 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Alberta Franklin, salary=8893)]
2020-08-13 15:37:45,026 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Chase Palmer, salary=57118)]
2020-08-13 15:37:45,028 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Adeline Brock, salary=46421)]
2020-08-13 15:37:45,030 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Alberta Franklin, salary=8893)]
2020-08-13 15:37:45,036 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Chase Palmer, salary=57118)]
2020-08-13 15:37:45,043 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Rhoda Torres, salary=13166)]
2020-08-13 15:37:45,045 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Rhoda Torres, salary=13166)]
2020-08-13 15:37:45,047 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Danny Sullivan, salary=16641)]
2020-08-13 15:37:45,048 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Rebecca Hart, salary=15834)]
2020-08-13 15:37:45,051 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Jim Osborne, salary=32928)]
2020-08-13 15:37:45,059 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Rhoda Torres, salary=13166)]
2020-08-13 15:37:45,061 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Danny Sullivan, salary=16641)]
2020-08-13 15:37:45,064 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Rebecca Hart, salary=15834)]
2020-08-13 15:37:45,066 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Jim Osborne, salary=32928)]
2020-08-13 15:37:45,068 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Rhoda Torres, salary=13166)]
2020-08-13 15:37:45,071 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Danny Sullivan, salary=16641)]
2020-08-13 15:37:45,076 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Rebecca Hart, salary=15834)]
2020-08-13 15:37:45,078 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Jim Osborne, salary=32928)]
2020-08-13 15:37:45,079 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Rhoda Torres, salary=13166)]
2020-08-13 15:37:45,082 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Danny Sullivan, salary=16641)]
2020-08-13 15:37:45,084 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Rebecca Hart, salary=15834)]
2020-08-13 15:37:45,085 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Jim Osborne, salary=32928)]
2020-08-13 15:37:45,087 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Rhoda Torres, salary=13166)]
2020-08-13 15:37:45,092 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Danny Sullivan, salary=16641)]
2020-08-13 15:37:45,094 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Rebecca Hart, salary=15834)]
2020-08-13 15:37:45,095 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Jim Osborne, salary=32928)]
2020-08-13 15:37:45,097 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Rhoda Torres, salary=13166)]
2020-08-13 15:37:45,099 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Danny Sullivan, salary=16641)]
2020-08-13 15:37:45,100 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Rebecca Hart, salary=15834)]
2020-08-13 15:37:45,102 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Jim Osborne, salary=32928)]
2020-08-13 15:37:45,110 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Danny Sullivan, salary=16641)]
2020-08-13 15:37:45,111 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Rebecca Hart, salary=15834)]
2020-08-13 15:37:45,113 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Jim Osborne, salary=32928)]
2020-08-13 15:37:45,152 INFO org.springframework.batch.core.step.AbstractStep [task-4] Step: [myStep:partition6] executed in 2s226ms
2020-08-13 15:37:45,153 INFO org.springframework.batch.core.step.AbstractStep [task-3] Step: [myStep:partition0] executed in 2s227ms
2020-08-13 15:37:45,163 INFO org.springframework.batch.core.step.AbstractStep [task-5] Step: [myStep:partition3] executed in 2s237ms
2020-08-13 15:37:45,164 INFO org.springframework.batch.core.step.AbstractStep [task-7] Step: [myStep:partition1] executed in 2s239ms
2020-08-13 15:37:45,165 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition2] executed in 2s245ms
2020-08-13 15:37:45,167 INFO org.springframework.batch.core.step.AbstractStep [task-6] Step: [myStep:partition5] executed in 2s241ms
2020-08-13 15:37:45,168 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition4] executed in 2s248ms
2020-08-13 15:37:45,170 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 2s271ms
2020-08-13 15:37:45,177 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 2s280ms
2020-08-13 15:37:45,180 INFO org.springframework.boot.devtools.autoconfigure.ConditionEvaluationDeltaLoggingListener [restartedMain] Condition evaluation unchanged
2020-08-13 15:38:15,662 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 11004 (D:\Spring-Batch\batch\target\classes started by Mani kandan in D:\Spring-Batch\batch)
2020-08-13 15:38:15,670 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 15:38:15,771 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 15:38:17,195 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 15:38:17,743 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 15:38:17,785 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 2.867 seconds (JVM running for 3.63)
2020-08-13 15:38:17,789 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 15:38:17,791 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 15:38:17,792 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 15:38:17,837 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 15:38:17,957 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 15:38:18,044 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 15:38:18,295 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Bill Douglas, salary=13649)]
2020-08-13 15:38:18,304 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Bill Douglas, salary=13649)]
2020-08-13 15:38:18,309 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Jennie Gutierrez, salary=10767)]
2020-08-13 15:38:18,313 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Tillie McCormick, salary=278)]
2020-08-13 15:38:18,320 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Lilly Reed, salary=16681)]
2020-08-13 15:38:18,325 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Jennie Gutierrez, salary=10767)]
2020-08-13 15:38:18,329 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Tillie McCormick, salary=278)]
2020-08-13 15:38:18,338 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Lilly Reed, salary=16681)]
2020-08-13 15:38:18,343 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Bill Douglas, salary=13649)]
2020-08-13 15:38:18,347 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Jennie Gutierrez, salary=10767)]
2020-08-13 15:38:18,354 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Tillie McCormick, salary=278)]
2020-08-13 15:38:18,358 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Lilly Reed, salary=16681)]
2020-08-13 15:38:18,363 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Bill Douglas, salary=13649)]
2020-08-13 15:38:18,391 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Jennie Gutierrez, salary=10767)]
2020-08-13 15:38:18,401 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Tillie McCormick, salary=278)]
2020-08-13 15:38:18,410 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Lilly Reed, salary=16681)]
2020-08-13 15:38:18,421 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Bill Douglas, salary=13649)]
2020-08-13 15:38:18,428 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Jennie Gutierrez, salary=10767)]
2020-08-13 15:38:18,440 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Tillie McCormick, salary=278)]
2020-08-13 15:38:18,446 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Lilly Reed, salary=16681)]
2020-08-13 15:38:18,454 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Bill Douglas, salary=13649)]
2020-08-13 15:38:18,472 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Jennie Gutierrez, salary=10767)]
2020-08-13 15:38:18,479 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Tillie McCormick, salary=278)]
2020-08-13 15:38:18,487 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Lilly Reed, salary=16681)]
2020-08-13 15:38:18,491 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Bill Douglas, salary=13649)]
2020-08-13 15:38:18,495 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Jennie Gutierrez, salary=10767)]
2020-08-13 15:38:18,498 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Tillie McCormick, salary=278)]
2020-08-13 15:38:18,502 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Lilly Reed, salary=16681)]
2020-08-13 15:38:18,511 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Ollie Shaw, salary=19563)]
2020-08-13 15:38:18,518 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Ollie Shaw, salary=19563)]
2020-08-13 15:38:18,522 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=Bobby Sanchez, salary=17889)]
2020-08-13 15:38:18,525 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Mattie Waters, salary=24742)]
2020-08-13 15:38:18,529 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Tyler Copeland, salary=51879)]
2020-08-13 15:38:18,533 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=Bobby Sanchez, salary=17889)]
2020-08-13 15:38:18,537 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Mattie Waters, salary=24742)]
2020-08-13 15:38:18,540 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Tyler Copeland, salary=51879)]
2020-08-13 15:38:18,544 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Ollie Shaw, salary=19563)]
2020-08-13 15:38:18,560 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=Bobby Sanchez, salary=17889)]
2020-08-13 15:38:18,569 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Mattie Waters, salary=24742)]
2020-08-13 15:38:18,572 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Tyler Copeland, salary=51879)]
2020-08-13 15:38:18,577 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Ollie Shaw, salary=19563)]
2020-08-13 15:38:18,582 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=Bobby Sanchez, salary=17889)]
2020-08-13 15:38:18,586 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Mattie Waters, salary=24742)]
2020-08-13 15:38:18,589 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Tyler Copeland, salary=51879)]
2020-08-13 15:38:18,593 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Ollie Shaw, salary=19563)]
2020-08-13 15:38:18,596 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=Bobby Sanchez, salary=17889)]
2020-08-13 15:38:18,610 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Mattie Waters, salary=24742)]
2020-08-13 15:38:18,622 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Tyler Copeland, salary=51879)]
2020-08-13 15:38:18,629 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Ollie Shaw, salary=19563)]
2020-08-13 15:38:18,637 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=Bobby Sanchez, salary=17889)]
2020-08-13 15:38:18,640 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Mattie Waters, salary=24742)]
2020-08-13 15:38:18,644 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Tyler Copeland, salary=51879)]
2020-08-13 15:38:18,651 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Ollie Shaw, salary=19563)]
2020-08-13 15:38:18,656 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=Bobby Sanchez, salary=17889)]
2020-08-13 15:38:18,660 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Mattie Waters, salary=24742)]
2020-08-13 15:38:18,663 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Tyler Copeland, salary=51879)]
2020-08-13 15:38:18,674 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Loretta Caldwell, salary=47707)]
2020-08-13 15:38:18,678 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Loretta Caldwell, salary=47707)]
2020-08-13 15:38:18,684 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Mario French, salary=53328)]
2020-08-13 15:38:18,688 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Dominic Graham, salary=18542)]
2020-08-13 15:38:18,691 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=Callie Barber, salary=235)]
2020-08-13 15:38:18,694 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Mario French, salary=53328)]
2020-08-13 15:38:18,718 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Dominic Graham, salary=18542)]
2020-08-13 15:38:18,725 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=Callie Barber, salary=235)]
2020-08-13 15:38:18,742 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Loretta Caldwell, salary=47707)]
2020-08-13 15:38:18,754 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Mario French, salary=53328)]
2020-08-13 15:38:18,759 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Dominic Graham, salary=18542)]
2020-08-13 15:38:18,764 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=Callie Barber, salary=235)]
2020-08-13 15:38:18,773 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Loretta Caldwell, salary=47707)]
2020-08-13 15:38:18,777 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Mario French, salary=53328)]
2020-08-13 15:38:18,787 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Dominic Graham, salary=18542)]
2020-08-13 15:38:18,794 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=Callie Barber, salary=235)]
2020-08-13 15:38:18,801 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Loretta Caldwell, salary=47707)]
2020-08-13 15:38:18,805 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Mario French, salary=53328)]
2020-08-13 15:38:18,811 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Dominic Graham, salary=18542)]
2020-08-13 15:38:18,830 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=Callie Barber, salary=235)]
2020-08-13 15:38:18,838 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Loretta Caldwell, salary=47707)]
2020-08-13 15:38:18,843 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Mario French, salary=53328)]
2020-08-13 15:38:18,855 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Dominic Graham, salary=18542)]
2020-08-13 15:38:18,859 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=Callie Barber, salary=235)]
2020-08-13 15:38:18,875 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Loretta Caldwell, salary=47707)]
2020-08-13 15:38:18,882 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Mario French, salary=53328)]
2020-08-13 15:38:18,885 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Dominic Graham, salary=18542)]
2020-08-13 15:38:18,889 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=Callie Barber, salary=235)]
2020-08-13 15:38:18,895 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Elmer Poole, salary=46394)]
2020-08-13 15:38:18,918 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Elmer Poole, salary=46394)]
2020-08-13 15:38:18,923 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Luella Reyes, salary=42103)]
2020-08-13 15:38:18,928 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Donald Drake, salary=36583)]
2020-08-13 15:38:18,934 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Mario Franklin, salary=55598)]
2020-08-13 15:38:18,938 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Luella Reyes, salary=42103)]
2020-08-13 15:38:18,943 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Donald Drake, salary=36583)]
2020-08-13 15:38:18,947 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Mario Franklin, salary=55598)]
2020-08-13 15:38:18,953 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Elmer Poole, salary=46394)]
2020-08-13 15:38:18,956 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Luella Reyes, salary=42103)]
2020-08-13 15:38:18,960 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Donald Drake, salary=36583)]
2020-08-13 15:38:18,964 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Mario Franklin, salary=55598)]
2020-08-13 15:38:18,968 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Elmer Poole, salary=46394)]
2020-08-13 15:38:18,972 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Luella Reyes, salary=42103)]
2020-08-13 15:38:18,976 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Donald Drake, salary=36583)]
2020-08-13 15:38:18,985 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Mario Franklin, salary=55598)]
2020-08-13 15:38:18,994 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Elmer Poole, salary=46394)]
2020-08-13 15:38:19,002 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Luella Reyes, salary=42103)]
2020-08-13 15:38:19,007 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Donald Drake, salary=36583)]
2020-08-13 15:38:19,019 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Mario Franklin, salary=55598)]
2020-08-13 15:38:19,028 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Elmer Poole, salary=46394)]
2020-08-13 15:38:19,035 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Luella Reyes, salary=42103)]
2020-08-13 15:38:19,041 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Donald Drake, salary=36583)]
2020-08-13 15:38:19,045 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Mario Franklin, salary=55598)]
2020-08-13 15:38:19,053 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Elmer Poole, salary=46394)]
2020-08-13 15:38:19,058 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Luella Reyes, salary=42103)]
2020-08-13 15:38:19,064 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Donald Drake, salary=36583)]
2020-08-13 15:38:19,074 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Mario Franklin, salary=55598)]
2020-08-13 15:38:19,078 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Marion Tate, salary=18321)]
2020-08-13 15:38:19,087 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Marion Tate, salary=18321)]
2020-08-13 15:38:19,092 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Jorge Dawson, salary=14285)]
2020-08-13 15:38:19,096 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Josephine Banks, salary=47158)]
2020-08-13 15:38:19,110 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Scott Rodriquez, salary=19029)]
2020-08-13 15:38:19,121 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Jorge Dawson, salary=14285)]
2020-08-13 15:38:19,126 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Josephine Banks, salary=47158)]
2020-08-13 15:38:19,131 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Scott Rodriquez, salary=19029)]
2020-08-13 15:38:19,137 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Marion Tate, salary=18321)]
2020-08-13 15:38:19,140 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Jorge Dawson, salary=14285)]
2020-08-13 15:38:19,155 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Josephine Banks, salary=47158)]
2020-08-13 15:38:19,161 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Scott Rodriquez, salary=19029)]
2020-08-13 15:38:19,166 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Marion Tate, salary=18321)]
2020-08-13 15:38:19,170 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Jorge Dawson, salary=14285)]
2020-08-13 15:38:19,173 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Josephine Banks, salary=47158)]
2020-08-13 15:38:19,199 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Scott Rodriquez, salary=19029)]
2020-08-13 15:38:19,203 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Marion Tate, salary=18321)]
2020-08-13 15:38:19,208 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Jorge Dawson, salary=14285)]
2020-08-13 15:38:19,211 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Josephine Banks, salary=47158)]
2020-08-13 15:38:19,214 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Scott Rodriquez, salary=19029)]
2020-08-13 15:38:19,217 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Marion Tate, salary=18321)]
2020-08-13 15:38:19,221 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Jorge Dawson, salary=14285)]
2020-08-13 15:38:19,225 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Josephine Banks, salary=47158)]
2020-08-13 15:38:19,234 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Scott Rodriquez, salary=19029)]
2020-08-13 15:38:19,238 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Marion Tate, salary=18321)]
2020-08-13 15:38:19,242 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Jorge Dawson, salary=14285)]
2020-08-13 15:38:19,245 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Josephine Banks, salary=47158)]
2020-08-13 15:38:19,253 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Scott Rodriquez, salary=19029)]
2020-08-13 15:38:19,256 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Francis McDaniel, salary=30759)]
2020-08-13 15:38:19,260 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Francis McDaniel, salary=30759)]
2020-08-13 15:38:19,263 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Jay Banks, salary=42840)]
2020-08-13 15:38:19,269 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Lily Hughes, salary=35858)]
2020-08-13 15:38:19,272 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Ella Steele, salary=40652)]
2020-08-13 15:38:19,276 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Jay Banks, salary=42840)]
2020-08-13 15:38:19,280 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Lily Hughes, salary=35858)]
2020-08-13 15:38:19,286 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Ella Steele, salary=40652)]
2020-08-13 15:38:19,289 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Francis McDaniel, salary=30759)]
2020-08-13 15:38:19,291 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Jay Banks, salary=42840)]
2020-08-13 15:38:19,294 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Lily Hughes, salary=35858)]
2020-08-13 15:38:19,296 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Ella Steele, salary=40652)]
2020-08-13 15:38:19,303 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Francis McDaniel, salary=30759)]
2020-08-13 15:38:19,307 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Jay Banks, salary=42840)]
2020-08-13 15:38:19,310 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Lily Hughes, salary=35858)]
2020-08-13 15:38:19,312 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Ella Steele, salary=40652)]
2020-08-13 15:38:19,320 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Francis McDaniel, salary=30759)]
2020-08-13 15:38:19,323 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Jay Banks, salary=42840)]
2020-08-13 15:38:19,326 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Lily Hughes, salary=35858)]
2020-08-13 15:38:19,335 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Ella Steele, salary=40652)]
2020-08-13 15:38:19,339 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Francis McDaniel, salary=30759)]
2020-08-13 15:38:19,342 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Jay Banks, salary=42840)]
2020-08-13 15:38:19,346 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Lily Hughes, salary=35858)]
2020-08-13 15:38:19,353 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Ella Steele, salary=40652)]
2020-08-13 15:38:19,356 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Francis McDaniel, salary=30759)]
2020-08-13 15:38:19,359 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Jay Banks, salary=42840)]
2020-08-13 15:38:19,362 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Lily Hughes, salary=35858)]
2020-08-13 15:38:19,368 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Ella Steele, salary=40652)]
2020-08-13 15:38:19,372 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Daisy Robinson, salary=10859)]
2020-08-13 15:38:19,387 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Daisy Robinson, salary=10859)]
2020-08-13 15:38:19,390 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Verna Logan, salary=41319)]
2020-08-13 15:38:19,392 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Hulda Wright, salary=43736)]
2020-08-13 15:38:19,396 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Anthony Leonard, salary=55692)]
2020-08-13 15:38:19,403 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Verna Logan, salary=41319)]
2020-08-13 15:38:19,407 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Hulda Wright, salary=43736)]
2020-08-13 15:38:19,411 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Anthony Leonard, salary=55692)]
2020-08-13 15:38:19,419 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Daisy Robinson, salary=10859)]
2020-08-13 15:38:19,422 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Verna Logan, salary=41319)]
2020-08-13 15:38:19,425 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Hulda Wright, salary=43736)]
2020-08-13 15:38:19,428 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Anthony Leonard, salary=55692)]
2020-08-13 15:38:19,434 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Daisy Robinson, salary=10859)]
2020-08-13 15:38:19,439 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Verna Logan, salary=41319)]
2020-08-13 15:38:19,442 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Hulda Wright, salary=43736)]
2020-08-13 15:38:19,445 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Anthony Leonard, salary=55692)]
2020-08-13 15:38:19,460 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Daisy Robinson, salary=10859)]
2020-08-13 15:38:19,477 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Verna Logan, salary=41319)]
2020-08-13 15:38:19,485 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Hulda Wright, salary=43736)]
2020-08-13 15:38:19,493 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Anthony Leonard, salary=55692)]
2020-08-13 15:38:19,496 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Daisy Robinson, salary=10859)]
2020-08-13 15:38:19,504 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Verna Logan, salary=41319)]
2020-08-13 15:38:19,520 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Hulda Wright, salary=43736)]
2020-08-13 15:38:19,524 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Anthony Leonard, salary=55692)]
2020-08-13 15:38:19,529 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Daisy Robinson, salary=10859)]
2020-08-13 15:38:19,536 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Verna Logan, salary=41319)]
2020-08-13 15:38:19,540 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Hulda Wright, salary=43736)]
2020-08-13 15:38:19,543 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Anthony Leonard, salary=55692)]
2020-08-13 15:38:19,547 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Harriett Bell, salary=32241)]
2020-08-13 15:38:19,554 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Harriett Bell, salary=32241)]
2020-08-13 15:38:19,557 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=Charlotte Campbell, salary=434)]
2020-08-13 15:38:19,560 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Luis McKinney, salary=29610)]
2020-08-13 15:38:19,563 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Cynthia Leonard, salary=27394)]
2020-08-13 15:38:19,570 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=Charlotte Campbell, salary=434)]
2020-08-13 15:38:19,573 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Luis McKinney, salary=29610)]
2020-08-13 15:38:19,576 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Cynthia Leonard, salary=27394)]
2020-08-13 15:38:19,580 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Harriett Bell, salary=32241)]
2020-08-13 15:38:19,588 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=Charlotte Campbell, salary=434)]
2020-08-13 15:38:19,590 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Luis McKinney, salary=29610)]
2020-08-13 15:38:19,594 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Cynthia Leonard, salary=27394)]
2020-08-13 15:38:19,605 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Harriett Bell, salary=32241)]
2020-08-13 15:38:19,608 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=Charlotte Campbell, salary=434)]
2020-08-13 15:38:19,612 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Luis McKinney, salary=29610)]
2020-08-13 15:38:19,618 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Cynthia Leonard, salary=27394)]
2020-08-13 15:38:19,636 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Harriett Bell, salary=32241)]
2020-08-13 15:38:19,640 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=Charlotte Campbell, salary=434)]
2020-08-13 15:38:19,643 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Luis McKinney, salary=29610)]
2020-08-13 15:38:19,649 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Cynthia Leonard, salary=27394)]
2020-08-13 15:38:19,653 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Harriett Bell, salary=32241)]
2020-08-13 15:38:19,656 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=Charlotte Campbell, salary=434)]
2020-08-13 15:38:19,660 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Luis McKinney, salary=29610)]
2020-08-13 15:38:19,670 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Cynthia Leonard, salary=27394)]
2020-08-13 15:38:19,674 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Harriett Bell, salary=32241)]
2020-08-13 15:38:19,685 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=Charlotte Campbell, salary=434)]
2020-08-13 15:38:19,688 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Luis McKinney, salary=29610)]
2020-08-13 15:38:19,692 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Cynthia Leonard, salary=27394)]
2020-08-13 15:38:19,695 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Hallie Cross, salary=57607)]
2020-08-13 15:38:19,701 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Hallie Cross, salary=57607)]
2020-08-13 15:38:19,704 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Susie Hammond, salary=54862)]
2020-08-13 15:38:19,707 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Tommy Valdez, salary=7635)]
2020-08-13 15:38:19,712 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Mina Collier, salary=56192)]
2020-08-13 15:38:19,718 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Susie Hammond, salary=54862)]
2020-08-13 15:38:19,722 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Tommy Valdez, salary=7635)]
2020-08-13 15:38:19,725 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Mina Collier, salary=56192)]
2020-08-13 15:38:19,733 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Hallie Cross, salary=57607)]
2020-08-13 15:38:19,736 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Susie Hammond, salary=54862)]
2020-08-13 15:38:19,738 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Tommy Valdez, salary=7635)]
2020-08-13 15:38:19,741 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Mina Collier, salary=56192)]
2020-08-13 15:38:19,752 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Hallie Cross, salary=57607)]
2020-08-13 15:38:19,755 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Susie Hammond, salary=54862)]
2020-08-13 15:38:19,758 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Tommy Valdez, salary=7635)]
2020-08-13 15:38:19,774 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Mina Collier, salary=56192)]
2020-08-13 15:38:19,784 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Hallie Cross, salary=57607)]
2020-08-13 15:38:19,788 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Susie Hammond, salary=54862)]
2020-08-13 15:38:19,791 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Tommy Valdez, salary=7635)]
2020-08-13 15:38:19,794 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Mina Collier, salary=56192)]
2020-08-13 15:38:19,804 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Hallie Cross, salary=57607)]
2020-08-13 15:38:19,808 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Susie Hammond, salary=54862)]
2020-08-13 15:38:19,816 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Tommy Valdez, salary=7635)]
2020-08-13 15:38:19,823 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Mina Collier, salary=56192)]
2020-08-13 15:38:19,826 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Hallie Cross, salary=57607)]
2020-08-13 15:38:19,829 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Susie Hammond, salary=54862)]
2020-08-13 15:38:19,833 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Tommy Valdez, salary=7635)]
2020-08-13 15:38:19,838 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Mina Collier, salary=56192)]
2020-08-13 15:38:19,840 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Lucy Sanders, salary=22532)]
2020-08-13 15:38:19,843 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Lucy Sanders, salary=22532)]
2020-08-13 15:38:19,845 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Addie McDaniel, salary=24663)]
2020-08-13 15:38:19,850 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Lottie Ruiz, salary=35079)]
2020-08-13 15:38:19,853 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Charlotte Roberson, salary=14391)]
2020-08-13 15:38:19,855 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Addie McDaniel, salary=24663)]
2020-08-13 15:38:19,857 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Lottie Ruiz, salary=35079)]
2020-08-13 15:38:19,860 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Charlotte Roberson, salary=14391)]
2020-08-13 15:38:19,875 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Lucy Sanders, salary=22532)]
2020-08-13 15:38:19,889 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Addie McDaniel, salary=24663)]
2020-08-13 15:38:19,893 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Lottie Ruiz, salary=35079)]
2020-08-13 15:38:19,895 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Charlotte Roberson, salary=14391)]
2020-08-13 15:38:19,903 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Lucy Sanders, salary=22532)]
2020-08-13 15:38:19,907 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Addie McDaniel, salary=24663)]
2020-08-13 15:38:19,909 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Lottie Ruiz, salary=35079)]
2020-08-13 15:38:19,912 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Charlotte Roberson, salary=14391)]
2020-08-13 15:38:19,929 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Lucy Sanders, salary=22532)]
2020-08-13 15:38:19,931 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Addie McDaniel, salary=24663)]
2020-08-13 15:38:19,937 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Lottie Ruiz, salary=35079)]
2020-08-13 15:38:19,939 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Charlotte Roberson, salary=14391)]
2020-08-13 15:38:19,942 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Lucy Sanders, salary=22532)]
2020-08-13 15:38:19,945 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Addie McDaniel, salary=24663)]
2020-08-13 15:38:19,948 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Lottie Ruiz, salary=35079)]
2020-08-13 15:38:19,955 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Charlotte Roberson, salary=14391)]
2020-08-13 15:38:19,957 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Lucy Sanders, salary=22532)]
2020-08-13 15:38:19,960 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Addie McDaniel, salary=24663)]
2020-08-13 15:38:19,963 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Lottie Ruiz, salary=35079)]
2020-08-13 15:38:19,968 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Charlotte Roberson, salary=14391)]
2020-08-13 15:38:19,971 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Beatrice Black, salary=47459)]
2020-08-13 15:38:19,974 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Albert Holt, salary=53550)]
2020-08-13 15:38:19,977 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Lenora McLaughlin, salary=9259)]
2020-08-13 15:38:19,986 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Beatrice Black, salary=47459)]
2020-08-13 15:38:19,989 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Albert Holt, salary=53550)]
2020-08-13 15:38:19,992 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Lenora McLaughlin, salary=9259)]
2020-08-13 15:38:19,995 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Travis Sanchez, salary=19000)]
2020-08-13 15:38:19,998 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Travis Sanchez, salary=19000)]
2020-08-13 15:38:20,002 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Beatrice Black, salary=47459)]
2020-08-13 15:38:20,004 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Albert Holt, salary=53550)]
2020-08-13 15:38:20,006 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Lenora McLaughlin, salary=9259)]
2020-08-13 15:38:20,008 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Travis Sanchez, salary=19000)]
2020-08-13 15:38:20,010 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Beatrice Black, salary=47459)]
2020-08-13 15:38:20,012 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Albert Holt, salary=53550)]
2020-08-13 15:38:20,019 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Lenora McLaughlin, salary=9259)]
2020-08-13 15:38:20,021 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Travis Sanchez, salary=19000)]
2020-08-13 15:38:20,023 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Beatrice Black, salary=47459)]
2020-08-13 15:38:20,027 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Albert Holt, salary=53550)]
2020-08-13 15:38:20,030 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Lenora McLaughlin, salary=9259)]
2020-08-13 15:38:20,037 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Travis Sanchez, salary=19000)]
2020-08-13 15:38:20,040 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Beatrice Black, salary=47459)]
2020-08-13 15:38:20,043 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Albert Holt, salary=53550)]
2020-08-13 15:38:20,046 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Lenora McLaughlin, salary=9259)]
2020-08-13 15:38:20,049 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Travis Sanchez, salary=19000)]
2020-08-13 15:38:20,051 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Beatrice Black, salary=47459)]
2020-08-13 15:38:20,057 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Albert Holt, salary=53550)]
2020-08-13 15:38:20,060 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Lenora McLaughlin, salary=9259)]
2020-08-13 15:38:20,064 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Travis Sanchez, salary=19000)]
2020-08-13 15:38:20,070 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Jean Castro, salary=1187)]
2020-08-13 15:38:20,073 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Oscar Griffin, salary=35474)]
2020-08-13 15:38:20,075 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Jordan Mann, salary=7702)]
2020-08-13 15:38:20,077 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Jean Castro, salary=1187)]
2020-08-13 15:38:20,079 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Oscar Griffin, salary=35474)]
2020-08-13 15:38:20,084 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Jordan Mann, salary=7702)]
2020-08-13 15:38:20,088 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Virgie Hamilton, salary=12305)]
2020-08-13 15:38:20,090 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Virgie Hamilton, salary=12305)]
2020-08-13 15:38:20,093 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Jean Castro, salary=1187)]
2020-08-13 15:38:20,095 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Oscar Griffin, salary=35474)]
2020-08-13 15:38:20,097 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Jordan Mann, salary=7702)]
2020-08-13 15:38:20,102 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Virgie Hamilton, salary=12305)]
2020-08-13 15:38:20,105 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Jean Castro, salary=1187)]
2020-08-13 15:38:20,107 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Oscar Griffin, salary=35474)]
2020-08-13 15:38:20,110 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Jordan Mann, salary=7702)]
2020-08-13 15:38:20,112 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Virgie Hamilton, salary=12305)]
2020-08-13 15:38:20,114 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Jean Castro, salary=1187)]
2020-08-13 15:38:20,120 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Oscar Griffin, salary=35474)]
2020-08-13 15:38:20,122 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Jordan Mann, salary=7702)]
2020-08-13 15:38:20,124 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Virgie Hamilton, salary=12305)]
2020-08-13 15:38:20,126 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Jean Castro, salary=1187)]
2020-08-13 15:38:20,128 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Oscar Griffin, salary=35474)]
2020-08-13 15:38:20,130 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Jordan Mann, salary=7702)]
2020-08-13 15:38:20,135 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Virgie Hamilton, salary=12305)]
2020-08-13 15:38:20,137 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Jean Castro, salary=1187)]
2020-08-13 15:38:20,139 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Oscar Griffin, salary=35474)]
2020-08-13 15:38:20,140 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Jordan Mann, salary=7702)]
2020-08-13 15:38:20,142 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Virgie Hamilton, salary=12305)]
2020-08-13 15:38:20,143 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Amelia King, salary=52264)]
2020-08-13 15:38:20,145 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Julia Burns, salary=27572)]
2020-08-13 15:38:20,146 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Herman Joseph, salary=48687)]
2020-08-13 15:38:20,152 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Amelia King, salary=52264)]
2020-08-13 15:38:20,154 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Julia Burns, salary=27572)]
2020-08-13 15:38:20,156 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Herman Joseph, salary=48687)]
2020-08-13 15:38:20,158 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Gregory Owen, salary=50226)]
2020-08-13 15:38:20,161 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Gregory Owen, salary=50226)]
2020-08-13 15:38:20,169 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Amelia King, salary=52264)]
2020-08-13 15:38:20,172 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Julia Burns, salary=27572)]
2020-08-13 15:38:20,176 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Herman Joseph, salary=48687)]
2020-08-13 15:38:20,179 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Gregory Owen, salary=50226)]
2020-08-13 15:38:20,185 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Amelia King, salary=52264)]
2020-08-13 15:38:20,187 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Julia Burns, salary=27572)]
2020-08-13 15:38:20,191 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Herman Joseph, salary=48687)]
2020-08-13 15:38:20,205 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Gregory Owen, salary=50226)]
2020-08-13 15:38:20,208 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Amelia King, salary=52264)]
2020-08-13 15:38:20,210 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Julia Burns, salary=27572)]
2020-08-13 15:38:20,212 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Herman Joseph, salary=48687)]
2020-08-13 15:38:20,216 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Gregory Owen, salary=50226)]
2020-08-13 15:38:20,220 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Amelia King, salary=52264)]
2020-08-13 15:38:20,222 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Julia Burns, salary=27572)]
2020-08-13 15:38:20,223 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Herman Joseph, salary=48687)]
2020-08-13 15:38:20,225 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Gregory Owen, salary=50226)]
2020-08-13 15:38:20,227 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Amelia King, salary=52264)]
2020-08-13 15:38:20,229 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Julia Burns, salary=27572)]
2020-08-13 15:38:20,237 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Herman Joseph, salary=48687)]
2020-08-13 15:38:20,239 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Gregory Owen, salary=50226)]
2020-08-13 15:38:20,241 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Sophia Chavez, salary=1404)]
2020-08-13 15:38:20,243 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Dollie Garza, salary=59114)]
2020-08-13 15:38:20,245 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Ruby Yates, salary=8949)]
2020-08-13 15:38:20,249 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Sophia Chavez, salary=1404)]
2020-08-13 15:38:20,253 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Dollie Garza, salary=59114)]
2020-08-13 15:38:20,255 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Ruby Yates, salary=8949)]
2020-08-13 15:38:20,257 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Lela Scott, salary=16440)]
2020-08-13 15:38:20,259 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Lela Scott, salary=16440)]
2020-08-13 15:38:20,261 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Sophia Chavez, salary=1404)]
2020-08-13 15:38:20,264 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Dollie Garza, salary=59114)]
2020-08-13 15:38:20,270 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Ruby Yates, salary=8949)]
2020-08-13 15:38:20,272 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Lela Scott, salary=16440)]
2020-08-13 15:38:20,274 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Sophia Chavez, salary=1404)]
2020-08-13 15:38:20,276 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Dollie Garza, salary=59114)]
2020-08-13 15:38:20,278 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Ruby Yates, salary=8949)]
2020-08-13 15:38:20,281 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Lela Scott, salary=16440)]
2020-08-13 15:38:20,286 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Sophia Chavez, salary=1404)]
2020-08-13 15:38:20,288 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Dollie Garza, salary=59114)]
2020-08-13 15:38:20,292 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Ruby Yates, salary=8949)]
2020-08-13 15:38:20,294 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Lela Scott, salary=16440)]
2020-08-13 15:38:20,296 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Sophia Chavez, salary=1404)]
2020-08-13 15:38:20,303 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Dollie Garza, salary=59114)]
2020-08-13 15:38:20,305 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Ruby Yates, salary=8949)]
2020-08-13 15:38:20,318 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Lela Scott, salary=16440)]
2020-08-13 15:38:20,321 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Sophia Chavez, salary=1404)]
2020-08-13 15:38:20,323 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Dollie Garza, salary=59114)]
2020-08-13 15:38:20,325 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Ruby Yates, salary=8949)]
2020-08-13 15:38:20,327 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Lela Scott, salary=16440)]
2020-08-13 15:38:20,329 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Oscar Lane, salary=25693)]
2020-08-13 15:38:20,331 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Emilie Pope, salary=56991)]
2020-08-13 15:38:20,336 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Paul Alexander, salary=4801)]
2020-08-13 15:38:20,338 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Oscar Lane, salary=25693)]
2020-08-13 15:38:20,340 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Emilie Pope, salary=56991)]
2020-08-13 15:38:20,343 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Paul Alexander, salary=4801)]
2020-08-13 15:38:20,347 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Eric Huff, salary=56648)]
2020-08-13 15:38:20,349 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Eric Huff, salary=56648)]
2020-08-13 15:38:20,352 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Oscar Lane, salary=25693)]
2020-08-13 15:38:20,354 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Emilie Pope, salary=56991)]
2020-08-13 15:38:20,357 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Paul Alexander, salary=4801)]
2020-08-13 15:38:20,360 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Eric Huff, salary=56648)]
2020-08-13 15:38:20,362 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Oscar Lane, salary=25693)]
2020-08-13 15:38:20,370 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Emilie Pope, salary=56991)]
2020-08-13 15:38:20,372 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Paul Alexander, salary=4801)]
2020-08-13 15:38:20,374 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Eric Huff, salary=56648)]
2020-08-13 15:38:20,376 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Oscar Lane, salary=25693)]
2020-08-13 15:38:20,378 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Emilie Pope, salary=56991)]
2020-08-13 15:38:20,380 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Paul Alexander, salary=4801)]
2020-08-13 15:38:20,385 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Eric Huff, salary=56648)]
2020-08-13 15:38:20,387 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Oscar Lane, salary=25693)]
2020-08-13 15:38:20,389 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Emilie Pope, salary=56991)]
2020-08-13 15:38:20,391 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Paul Alexander, salary=4801)]
2020-08-13 15:38:20,393 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Eric Huff, salary=56648)]
2020-08-13 15:38:20,395 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Oscar Lane, salary=25693)]
2020-08-13 15:38:20,401 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Emilie Pope, salary=56991)]
2020-08-13 15:38:20,405 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Paul Alexander, salary=4801)]
2020-08-13 15:38:20,407 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Eric Huff, salary=56648)]
2020-08-13 15:38:20,410 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Barry Kennedy, salary=37118)]
2020-08-13 15:38:20,412 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Willie Huff, salary=54776)]
2020-08-13 15:38:20,417 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Victoria Gardner, salary=7860)]
2020-08-13 15:38:20,420 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Barry Kennedy, salary=37118)]
2020-08-13 15:38:20,422 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Willie Huff, salary=54776)]
2020-08-13 15:38:20,425 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Victoria Gardner, salary=7860)]
2020-08-13 15:38:20,428 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Clayton Moody, salary=53790)]
2020-08-13 15:38:20,435 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Clayton Moody, salary=53790)]
2020-08-13 15:38:20,438 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Barry Kennedy, salary=37118)]
2020-08-13 15:38:20,440 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Willie Huff, salary=54776)]
2020-08-13 15:38:20,442 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Victoria Gardner, salary=7860)]
2020-08-13 15:38:20,444 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Clayton Moody, salary=53790)]
2020-08-13 15:38:20,450 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Barry Kennedy, salary=37118)]
2020-08-13 15:38:20,454 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Willie Huff, salary=54776)]
2020-08-13 15:38:20,456 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Victoria Gardner, salary=7860)]
2020-08-13 15:38:20,459 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Clayton Moody, salary=53790)]
2020-08-13 15:38:20,461 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Barry Kennedy, salary=37118)]
2020-08-13 15:38:20,468 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Willie Huff, salary=54776)]
2020-08-13 15:38:20,472 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Victoria Gardner, salary=7860)]
2020-08-13 15:38:20,474 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Clayton Moody, salary=53790)]
2020-08-13 15:38:20,476 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Barry Kennedy, salary=37118)]
2020-08-13 15:38:20,478 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Willie Huff, salary=54776)]
2020-08-13 15:38:20,480 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Victoria Gardner, salary=7860)]
2020-08-13 15:38:20,486 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Clayton Moody, salary=53790)]
2020-08-13 15:38:20,488 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Barry Kennedy, salary=37118)]
2020-08-13 15:38:20,492 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Willie Huff, salary=54776)]
2020-08-13 15:38:20,495 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Victoria Gardner, salary=7860)]
2020-08-13 15:38:20,498 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Clayton Moody, salary=53790)]
2020-08-13 15:38:20,500 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Alexander King, salary=43045)]
2020-08-13 15:38:20,505 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Jim Chambers, salary=29064)]
2020-08-13 15:38:20,507 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Jane Bryan, salary=23706)]
2020-08-13 15:38:20,521 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Alexander King, salary=43045)]
2020-08-13 15:38:20,523 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Jim Chambers, salary=29064)]
2020-08-13 15:38:20,525 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Jane Bryan, salary=23706)]
2020-08-13 15:38:20,527 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Robert Coleman, salary=32684)]
2020-08-13 15:38:20,529 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Robert Coleman, salary=32684)]
2020-08-13 15:38:20,535 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Alexander King, salary=43045)]
2020-08-13 15:38:20,537 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Jim Chambers, salary=29064)]
2020-08-13 15:38:20,539 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Jane Bryan, salary=23706)]
2020-08-13 15:38:20,541 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Robert Coleman, salary=32684)]
2020-08-13 15:38:20,543 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Alexander King, salary=43045)]
2020-08-13 15:38:20,545 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Jim Chambers, salary=29064)]
2020-08-13 15:38:20,547 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Jane Bryan, salary=23706)]
2020-08-13 15:38:20,553 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Robert Coleman, salary=32684)]
2020-08-13 15:38:20,556 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Alexander King, salary=43045)]
2020-08-13 15:38:20,563 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Jim Chambers, salary=29064)]
2020-08-13 15:38:20,569 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Jane Bryan, salary=23706)]
2020-08-13 15:38:20,571 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Robert Coleman, salary=32684)]
2020-08-13 15:38:20,576 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Alexander King, salary=43045)]
2020-08-13 15:38:20,586 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Jim Chambers, salary=29064)]
2020-08-13 15:38:20,593 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Jane Bryan, salary=23706)]
2020-08-13 15:38:20,597 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Robert Coleman, salary=32684)]
2020-08-13 15:38:20,605 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Alexander King, salary=43045)]
2020-08-13 15:38:20,608 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Jim Chambers, salary=29064)]
2020-08-13 15:38:20,612 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Jane Bryan, salary=23706)]
2020-08-13 15:38:20,620 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Robert Coleman, salary=32684)]
2020-08-13 15:38:20,624 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Miguel Owen, salary=1497)]
2020-08-13 15:38:20,627 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Alta Cox, salary=59153)]
2020-08-13 15:38:20,630 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Estelle Hicks, salary=36514)]
2020-08-13 15:38:20,635 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Miguel Owen, salary=1497)]
2020-08-13 15:38:20,638 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Alta Cox, salary=59153)]
2020-08-13 15:38:20,640 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Estelle Hicks, salary=36514)]
2020-08-13 15:38:20,642 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Cynthia Hines, salary=29897)]
2020-08-13 15:38:20,644 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Cynthia Hines, salary=29897)]
2020-08-13 15:38:20,645 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Miguel Owen, salary=1497)]
2020-08-13 15:38:20,647 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Alta Cox, salary=59153)]
2020-08-13 15:38:20,652 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Estelle Hicks, salary=36514)]
2020-08-13 15:38:20,654 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Cynthia Hines, salary=29897)]
2020-08-13 15:38:20,657 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Miguel Owen, salary=1497)]
2020-08-13 15:38:20,659 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Alta Cox, salary=59153)]
2020-08-13 15:38:20,660 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Estelle Hicks, salary=36514)]
2020-08-13 15:38:20,663 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Cynthia Hines, salary=29897)]
2020-08-13 15:38:20,668 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Miguel Owen, salary=1497)]
2020-08-13 15:38:20,671 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Alta Cox, salary=59153)]
2020-08-13 15:38:20,673 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Estelle Hicks, salary=36514)]
2020-08-13 15:38:20,675 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Cynthia Hines, salary=29897)]
2020-08-13 15:38:20,678 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Miguel Owen, salary=1497)]
2020-08-13 15:38:20,680 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Alta Cox, salary=59153)]
2020-08-13 15:38:20,686 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Estelle Hicks, salary=36514)]
2020-08-13 15:38:20,688 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Cynthia Hines, salary=29897)]
2020-08-13 15:38:20,691 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Miguel Owen, salary=1497)]
2020-08-13 15:38:20,693 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Alta Cox, salary=59153)]
2020-08-13 15:38:20,695 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Estelle Hicks, salary=36514)]
2020-08-13 15:38:20,699 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Cynthia Hines, salary=29897)]
2020-08-13 15:38:20,704 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Derek Freeman, salary=16316)]
2020-08-13 15:38:20,707 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Ina Lambert, salary=38485)]
2020-08-13 15:38:20,710 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Derek Diaz, salary=52136)]
2020-08-13 15:38:20,712 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Derek Freeman, salary=16316)]
2020-08-13 15:38:20,721 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Ina Lambert, salary=38485)]
2020-08-13 15:38:20,723 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Derek Diaz, salary=52136)]
2020-08-13 15:38:20,726 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Verna Ward, salary=37249)]
2020-08-13 15:38:20,729 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Verna Ward, salary=37249)]
2020-08-13 15:38:20,735 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Derek Freeman, salary=16316)]
2020-08-13 15:38:20,737 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Ina Lambert, salary=38485)]
2020-08-13 15:38:20,739 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Derek Diaz, salary=52136)]
2020-08-13 15:38:20,741 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Verna Ward, salary=37249)]
2020-08-13 15:38:20,743 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Derek Freeman, salary=16316)]
2020-08-13 15:38:20,745 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Ina Lambert, salary=38485)]
2020-08-13 15:38:20,752 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Derek Diaz, salary=52136)]
2020-08-13 15:38:20,753 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Verna Ward, salary=37249)]
2020-08-13 15:38:20,755 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Derek Freeman, salary=16316)]
2020-08-13 15:38:20,757 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Ina Lambert, salary=38485)]
2020-08-13 15:38:20,759 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Derek Diaz, salary=52136)]
2020-08-13 15:38:20,761 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Verna Ward, salary=37249)]
2020-08-13 15:38:20,763 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Derek Freeman, salary=16316)]
2020-08-13 15:38:20,770 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Ina Lambert, salary=38485)]
2020-08-13 15:38:20,772 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Derek Diaz, salary=52136)]
2020-08-13 15:38:20,774 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Verna Ward, salary=37249)]
2020-08-13 15:38:20,776 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Derek Freeman, salary=16316)]
2020-08-13 15:38:20,779 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Ina Lambert, salary=38485)]
2020-08-13 15:38:20,786 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Derek Diaz, salary=52136)]
2020-08-13 15:38:20,788 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Verna Ward, salary=37249)]
2020-08-13 15:38:20,791 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Alan Lawrence, salary=12900)]
2020-08-13 15:38:20,793 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Caleb Townsend, salary=29935)]
2020-08-13 15:38:20,795 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Maud Powell, salary=28523)]
2020-08-13 15:38:20,800 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Alan Lawrence, salary=12900)]
2020-08-13 15:38:20,802 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Caleb Townsend, salary=29935)]
2020-08-13 15:38:20,805 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Maud Powell, salary=28523)]
2020-08-13 15:38:20,807 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Alejandro Bowman, salary=23289)]
2020-08-13 15:38:20,809 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Alejandro Bowman, salary=23289)]
2020-08-13 15:38:20,810 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Alan Lawrence, salary=12900)]
2020-08-13 15:38:20,812 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Caleb Townsend, salary=29935)]
2020-08-13 15:38:20,818 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Maud Powell, salary=28523)]
2020-08-13 15:38:20,820 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Alejandro Bowman, salary=23289)]
2020-08-13 15:38:20,822 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Alan Lawrence, salary=12900)]
2020-08-13 15:38:20,823 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Caleb Townsend, salary=29935)]
2020-08-13 15:38:20,825 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Maud Powell, salary=28523)]
2020-08-13 15:38:20,826 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Alejandro Bowman, salary=23289)]
2020-08-13 15:38:20,827 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Alan Lawrence, salary=12900)]
2020-08-13 15:38:20,829 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Caleb Townsend, salary=29935)]
2020-08-13 15:38:20,830 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Maud Powell, salary=28523)]
2020-08-13 15:38:20,834 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Alejandro Bowman, salary=23289)]
2020-08-13 15:38:20,836 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Alan Lawrence, salary=12900)]
2020-08-13 15:38:20,837 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Caleb Townsend, salary=29935)]
2020-08-13 15:38:20,839 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Maud Powell, salary=28523)]
2020-08-13 15:38:20,840 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Alejandro Bowman, salary=23289)]
2020-08-13 15:38:20,842 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Alan Lawrence, salary=12900)]
2020-08-13 15:38:20,844 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Caleb Townsend, salary=29935)]
2020-08-13 15:38:20,846 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Maud Powell, salary=28523)]
2020-08-13 15:38:20,852 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Alejandro Bowman, salary=23289)]
2020-08-13 15:38:20,854 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Katharine Meyer, salary=17090)]
2020-08-13 15:38:20,857 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Marion Garcia, salary=41361)]
2020-08-13 15:38:20,860 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Gary Perez, salary=35256)]
2020-08-13 15:38:20,862 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Katharine Meyer, salary=17090)]
2020-08-13 15:38:20,868 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Marion Garcia, salary=41361)]
2020-08-13 15:38:20,870 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Gary Perez, salary=35256)]
2020-08-13 15:38:20,871 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Mamie Garner, salary=30041)]
2020-08-13 15:38:20,873 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Mamie Garner, salary=30041)]
2020-08-13 15:38:20,875 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Katharine Meyer, salary=17090)]
2020-08-13 15:38:20,878 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Marion Garcia, salary=41361)]
2020-08-13 15:38:20,880 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Gary Perez, salary=35256)]
2020-08-13 15:38:20,887 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Mamie Garner, salary=30041)]
2020-08-13 15:38:20,889 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Katharine Meyer, salary=17090)]
2020-08-13 15:38:20,891 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Marion Garcia, salary=41361)]
2020-08-13 15:38:20,893 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Gary Perez, salary=35256)]
2020-08-13 15:38:20,895 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Mamie Garner, salary=30041)]
2020-08-13 15:38:20,897 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Katharine Meyer, salary=17090)]
2020-08-13 15:38:20,903 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Marion Garcia, salary=41361)]
2020-08-13 15:38:20,905 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Gary Perez, salary=35256)]
2020-08-13 15:38:20,906 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Mamie Garner, salary=30041)]
2020-08-13 15:38:20,909 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Katharine Meyer, salary=17090)]
2020-08-13 15:38:20,911 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Marion Garcia, salary=41361)]
2020-08-13 15:38:20,916 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Gary Perez, salary=35256)]
2020-08-13 15:38:20,919 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Mamie Garner, salary=30041)]
2020-08-13 15:38:20,921 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Katharine Meyer, salary=17090)]
2020-08-13 15:38:20,923 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Marion Garcia, salary=41361)]
2020-08-13 15:38:20,925 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Gary Perez, salary=35256)]
2020-08-13 15:38:20,927 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Mamie Garner, salary=30041)]
2020-08-13 15:38:20,929 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Randy Ferguson, salary=42622)]
2020-08-13 15:38:20,931 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Gussie Walton, salary=44450)]
2020-08-13 15:38:20,935 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Sara Castillo, salary=52670)]
2020-08-13 15:38:20,937 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Randy Ferguson, salary=42622)]
2020-08-13 15:38:20,941 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Gussie Walton, salary=44450)]
2020-08-13 15:38:20,942 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Sara Castillo, salary=52670)]
2020-08-13 15:38:20,944 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Virgie Norman, salary=7906)]
2020-08-13 15:38:20,946 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Virgie Norman, salary=7906)]
2020-08-13 15:38:20,951 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Randy Ferguson, salary=42622)]
2020-08-13 15:38:20,953 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Gussie Walton, salary=44450)]
2020-08-13 15:38:20,956 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Sara Castillo, salary=52670)]
2020-08-13 15:38:20,957 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Virgie Norman, salary=7906)]
2020-08-13 15:38:20,959 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Randy Ferguson, salary=42622)]
2020-08-13 15:38:20,962 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Gussie Walton, salary=44450)]
2020-08-13 15:38:20,963 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Sara Castillo, salary=52670)]
2020-08-13 15:38:20,969 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Virgie Norman, salary=7906)]
2020-08-13 15:38:20,971 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Randy Ferguson, salary=42622)]
2020-08-13 15:38:20,973 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Gussie Walton, salary=44450)]
2020-08-13 15:38:20,976 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Sara Castillo, salary=52670)]
2020-08-13 15:38:20,980 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Virgie Norman, salary=7906)]
2020-08-13 15:38:20,986 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Randy Ferguson, salary=42622)]
2020-08-13 15:38:20,990 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Gussie Walton, salary=44450)]
2020-08-13 15:38:20,993 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Sara Castillo, salary=52670)]
2020-08-13 15:38:20,995 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Virgie Norman, salary=7906)]
2020-08-13 15:38:20,997 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Randy Ferguson, salary=42622)]
2020-08-13 15:38:21,005 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Gussie Walton, salary=44450)]
2020-08-13 15:38:21,007 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Sara Castillo, salary=52670)]
2020-08-13 15:38:21,009 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Virgie Norman, salary=7906)]
2020-08-13 15:38:21,011 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Marvin Vaughn, salary=12889)]
2020-08-13 15:38:21,013 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=James Brewer, salary=38121)]
2020-08-13 15:38:21,019 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Mable Hale, salary=13575)]
2020-08-13 15:38:21,020 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Marvin Vaughn, salary=12889)]
2020-08-13 15:38:21,022 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=James Brewer, salary=38121)]
2020-08-13 15:38:21,023 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Mable Hale, salary=13575)]
2020-08-13 15:38:21,025 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Jeff Stokes, salary=51945)]
2020-08-13 15:38:21,027 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Jeff Stokes, salary=51945)]
2020-08-13 15:38:21,028 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Marvin Vaughn, salary=12889)]
2020-08-13 15:38:21,030 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=James Brewer, salary=38121)]
2020-08-13 15:38:21,032 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Mable Hale, salary=13575)]
2020-08-13 15:38:21,035 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Jeff Stokes, salary=51945)]
2020-08-13 15:38:21,037 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Marvin Vaughn, salary=12889)]
2020-08-13 15:38:21,038 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=James Brewer, salary=38121)]
2020-08-13 15:38:21,039 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Mable Hale, salary=13575)]
2020-08-13 15:38:21,042 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Jeff Stokes, salary=51945)]
2020-08-13 15:38:21,043 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Marvin Vaughn, salary=12889)]
2020-08-13 15:38:21,045 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=James Brewer, salary=38121)]
2020-08-13 15:38:21,047 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Mable Hale, salary=13575)]
2020-08-13 15:38:21,052 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Jeff Stokes, salary=51945)]
2020-08-13 15:38:21,054 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Marvin Vaughn, salary=12889)]
2020-08-13 15:38:21,056 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=James Brewer, salary=38121)]
2020-08-13 15:38:21,058 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Mable Hale, salary=13575)]
2020-08-13 15:38:21,060 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Jeff Stokes, salary=51945)]
2020-08-13 15:38:21,061 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Marvin Vaughn, salary=12889)]
2020-08-13 15:38:21,063 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=James Brewer, salary=38121)]
2020-08-13 15:38:21,067 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Mable Hale, salary=13575)]
2020-08-13 15:38:21,069 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Jeff Stokes, salary=51945)]
2020-08-13 15:38:21,071 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bess Howell, salary=33153)]
2020-08-13 15:38:21,073 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Adeline Brock, salary=46421)]
2020-08-13 15:38:21,075 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Alberta Franklin, salary=8893)]
2020-08-13 15:38:21,077 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bess Howell, salary=33153)]
2020-08-13 15:38:21,079 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Adeline Brock, salary=46421)]
2020-08-13 15:38:21,086 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Alberta Franklin, salary=8893)]
2020-08-13 15:38:21,090 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Chase Palmer, salary=57118)]
2020-08-13 15:38:21,092 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Chase Palmer, salary=57118)]
2020-08-13 15:38:21,095 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bess Howell, salary=33153)]
2020-08-13 15:38:21,101 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Adeline Brock, salary=46421)]
2020-08-13 15:38:21,103 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Alberta Franklin, salary=8893)]
2020-08-13 15:38:21,105 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Chase Palmer, salary=57118)]
2020-08-13 15:38:21,107 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bess Howell, salary=33153)]
2020-08-13 15:38:21,108 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Adeline Brock, salary=46421)]
2020-08-13 15:38:21,110 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Alberta Franklin, salary=8893)]
2020-08-13 15:38:21,113 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Chase Palmer, salary=57118)]
2020-08-13 15:38:21,124 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bess Howell, salary=33153)]
2020-08-13 15:38:21,127 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Adeline Brock, salary=46421)]
2020-08-13 15:38:21,129 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Alberta Franklin, salary=8893)]
2020-08-13 15:38:21,133 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Chase Palmer, salary=57118)]
2020-08-13 15:38:21,136 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bess Howell, salary=33153)]
2020-08-13 15:38:21,138 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Adeline Brock, salary=46421)]
2020-08-13 15:38:21,139 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Alberta Franklin, salary=8893)]
2020-08-13 15:38:21,141 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Chase Palmer, salary=57118)]
2020-08-13 15:38:21,142 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bess Howell, salary=33153)]
2020-08-13 15:38:21,144 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Adeline Brock, salary=46421)]
2020-08-13 15:38:21,146 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Alberta Franklin, salary=8893)]
2020-08-13 15:38:21,153 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Chase Palmer, salary=57118)]
2020-08-13 15:38:21,155 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Rhoda Torres, salary=13166)]
2020-08-13 15:38:21,157 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Danny Sullivan, salary=16641)]
2020-08-13 15:38:21,159 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Rebecca Hart, salary=15834)]
2020-08-13 15:38:21,161 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Rhoda Torres, salary=13166)]
2020-08-13 15:38:21,162 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Danny Sullivan, salary=16641)]
2020-08-13 15:38:21,168 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Rebecca Hart, salary=15834)]
2020-08-13 15:38:21,170 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Jim Osborne, salary=32928)]
2020-08-13 15:38:21,172 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Jim Osborne, salary=32928)]
2020-08-13 15:38:21,175 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Rhoda Torres, salary=13166)]
2020-08-13 15:38:21,177 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Danny Sullivan, salary=16641)]
2020-08-13 15:38:21,178 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Rebecca Hart, salary=15834)]
2020-08-13 15:38:21,180 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Jim Osborne, salary=32928)]
2020-08-13 15:38:21,185 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Rhoda Torres, salary=13166)]
2020-08-13 15:38:21,187 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Danny Sullivan, salary=16641)]
2020-08-13 15:38:21,188 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Rebecca Hart, salary=15834)]
2020-08-13 15:38:21,190 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Jim Osborne, salary=32928)]
2020-08-13 15:38:21,192 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Rhoda Torres, salary=13166)]
2020-08-13 15:38:21,194 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Danny Sullivan, salary=16641)]
2020-08-13 15:38:21,196 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Rebecca Hart, salary=15834)]
2020-08-13 15:38:21,200 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Jim Osborne, salary=32928)]
2020-08-13 15:38:21,202 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Rhoda Torres, salary=13166)]
2020-08-13 15:38:21,204 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Danny Sullivan, salary=16641)]
2020-08-13 15:38:21,205 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Rebecca Hart, salary=15834)]
2020-08-13 15:38:21,207 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Jim Osborne, salary=32928)]
2020-08-13 15:38:21,208 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Rhoda Torres, salary=13166)]
2020-08-13 15:38:21,210 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Danny Sullivan, salary=16641)]
2020-08-13 15:38:21,212 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Rebecca Hart, salary=15834)]
2020-08-13 15:38:21,213 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Jim Osborne, salary=32928)]
2020-08-13 15:38:21,253 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition2] executed in 3s115ms
2020-08-13 15:38:21,270 INFO org.springframework.batch.core.step.AbstractStep [task-3] Step: [myStep:partition1] executed in 3s66ms
2020-08-13 15:38:21,271 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition5] executed in 3s80ms
2020-08-13 15:38:21,272 INFO org.springframework.batch.core.step.AbstractStep [task-5] Step: [myStep:partition0] executed in 3s42ms
2020-08-13 15:38:21,272 INFO org.springframework.batch.core.step.AbstractStep [task-4] Step: [myStep:partition4] executed in 3s47ms
2020-08-13 15:38:21,274 INFO org.springframework.batch.core.step.AbstractStep [task-6] Step: [myStep:partition6] executed in 3s37ms
2020-08-13 15:38:21,274 INFO org.springframework.batch.core.step.AbstractStep [task-7] Step: [myStep:partition3] executed in 3s34ms
2020-08-13 15:38:21,276 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 3s231ms
2020-08-13 15:38:21,287 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 3s268ms
2020-08-13 15:39:02,564 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [Thread-97] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 15:39:02,804 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 11004 (D:\Spring-Batch\batch\target\classes started by Mani kandan in D:\Spring-Batch\batch)
2020-08-13 15:39:02,809 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 15:39:03,350 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 15:39:03,538 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 15:39:03,549 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 0.848 seconds (JVM running for 49.394)
2020-08-13 15:39:03,552 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 15:39:03,553 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 15:39:03,555 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 15:39:03,565 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 15:39:03,571 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 15:39:03,613 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 15:39:03,910 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Bill Douglas, salary=13649), Employee(id=2, name=Jennie Gutierrez, salary=10767), Employee(id=3, name=Tillie McCormick, salary=278), Employee(id=4, name=Lilly Reed, salary=16681), Employee(id=5, name=Ollie Shaw, salary=19563), Employee(id=6, name=Bobby Sanchez, salary=17889), Employee(id=7, name=Mattie Waters, salary=24742), Employee(id=8, name=Tyler Copeland, salary=51879), Employee(id=9, name=Loretta Caldwell, salary=47707), Employee(id=10, name=Mario French, salary=53328), Employee(id=11, name=Dominic Graham, salary=18542), Employee(id=12, name=Callie Barber, salary=235), Employee(id=13, name=Elmer Poole, salary=46394), Employee(id=14, name=Luella Reyes, salary=42103), Employee(id=15, name=Donald Drake, salary=36583), Employee(id=16, name=Mario Franklin, salary=55598), Employee(id=17, name=Marion Tate, salary=18321), Employee(id=18, name=Jorge Dawson, salary=14285), Employee(id=19, name=Josephine Banks, salary=47158), Employee(id=20, name=Scott Rodriquez, salary=19029), Employee(id=21, name=Francis McDaniel, salary=30759), Employee(id=22, name=Jay Banks, salary=42840), Employee(id=23, name=Lily Hughes, salary=35858), Employee(id=24, name=Ella Steele, salary=40652), Employee(id=25, name=Daisy Robinson, salary=10859), Employee(id=26, name=Verna Logan, salary=41319), Employee(id=27, name=Hulda Wright, salary=43736), Employee(id=28, name=Anthony Leonard, salary=55692), Employee(id=29, name=Harriett Bell, salary=32241), Employee(id=30, name=Charlotte Campbell, salary=434), Employee(id=31, name=Luis McKinney, salary=29610), Employee(id=32, name=Cynthia Leonard, salary=27394), Employee(id=33, name=Hallie Cross, salary=57607), Employee(id=34, name=Susie Hammond, salary=54862), Employee(id=35, name=Tommy Valdez, salary=7635), Employee(id=36, name=Mina Collier, salary=56192), Employee(id=37, name=Lucy Sanders, salary=22532), Employee(id=38, name=Addie McDaniel, salary=24663), Employee(id=39, name=Lottie Ruiz, salary=35079), Employee(id=40, name=Charlotte Roberson, salary=14391), Employee(id=41, name=Beatrice Black, salary=47459), Employee(id=42, name=Albert Holt, salary=53550), Employee(id=43, name=Lenora McLaughlin, salary=9259), Employee(id=44, name=Travis Sanchez, salary=19000), Employee(id=45, name=Jean Castro, salary=1187), Employee(id=46, name=Oscar Griffin, salary=35474), Employee(id=47, name=Jordan Mann, salary=7702), Employee(id=48, name=Virgie Hamilton, salary=12305), Employee(id=49, name=Amelia King, salary=52264), Employee(id=50, name=Julia Burns, salary=27572), Employee(id=51, name=Herman Joseph, salary=48687), Employee(id=52, name=Gregory Owen, salary=50226), Employee(id=53, name=Sophia Chavez, salary=1404), Employee(id=54, name=Dollie Garza, salary=59114), Employee(id=55, name=Ruby Yates, salary=8949), Employee(id=56, name=Lela Scott, salary=16440), Employee(id=57, name=Oscar Lane, salary=25693), Employee(id=58, name=Emilie Pope, salary=56991), Employee(id=59, name=Paul Alexander, salary=4801), Employee(id=60, name=Eric Huff, salary=56648), Employee(id=61, name=Barry Kennedy, salary=37118), Employee(id=62, name=Willie Huff, salary=54776), Employee(id=63, name=Victoria Gardner, salary=7860), Employee(id=64, name=Clayton Moody, salary=53790), Employee(id=65, name=Alexander King, salary=43045), Employee(id=66, name=Jim Chambers, salary=29064), Employee(id=67, name=Jane Bryan, salary=23706), Employee(id=68, name=Robert Coleman, salary=32684), Employee(id=69, name=Miguel Owen, salary=1497), Employee(id=70, name=Alta Cox, salary=59153), Employee(id=71, name=Estelle Hicks, salary=36514), Employee(id=72, name=Cynthia Hines, salary=29897), Employee(id=73, name=Derek Freeman, salary=16316), Employee(id=74, name=Ina Lambert, salary=38485), Employee(id=75, name=Derek Diaz, salary=52136), Employee(id=76, name=Verna Ward, salary=37249), Employee(id=77, name=Alan Lawrence, salary=12900), Employee(id=78, name=Caleb Townsend, salary=29935), Employee(id=79, name=Maud Powell, salary=28523), Employee(id=80, name=Alejandro Bowman, salary=23289), Employee(id=81, name=Katharine Meyer, salary=17090), Employee(id=82, name=Marion Garcia, salary=41361), Employee(id=83, name=Gary Perez, salary=35256), Employee(id=84, name=Mamie Garner, salary=30041), Employee(id=85, name=Randy Ferguson, salary=42622), Employee(id=86, name=Gussie Walton, salary=44450), Employee(id=87, name=Sara Castillo, salary=52670), Employee(id=88, name=Virgie Norman, salary=7906), Employee(id=89, name=Marvin Vaughn, salary=12889), Employee(id=90, name=James Brewer, salary=38121), Employee(id=91, name=Mable Hale, salary=13575), Employee(id=92, name=Jeff Stokes, salary=51945), Employee(id=93, name=Bess Howell, salary=33153), Employee(id=94, name=Adeline Brock, salary=46421), Employee(id=95, name=Alberta Franklin, salary=8893), Employee(id=96, name=Chase Palmer, salary=57118), Employee(id=97, name=Rhoda Torres, salary=13166), Employee(id=98, name=Danny Sullivan, salary=16641), Employee(id=99, name=Rebecca Hart, salary=15834), Employee(id=100, name=Jim Osborne, salary=32928)]
2020-08-13 15:39:03,988 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Bill Douglas, salary=13649), Employee(id=2, name=Jennie Gutierrez, salary=10767), Employee(id=3, name=Tillie McCormick, salary=278), Employee(id=4, name=Lilly Reed, salary=16681), Employee(id=5, name=Ollie Shaw, salary=19563), Employee(id=6, name=Bobby Sanchez, salary=17889), Employee(id=7, name=Mattie Waters, salary=24742), Employee(id=8, name=Tyler Copeland, salary=51879), Employee(id=9, name=Loretta Caldwell, salary=47707), Employee(id=10, name=Mario French, salary=53328), Employee(id=11, name=Dominic Graham, salary=18542), Employee(id=12, name=Callie Barber, salary=235), Employee(id=13, name=Elmer Poole, salary=46394), Employee(id=14, name=Luella Reyes, salary=42103), Employee(id=15, name=Donald Drake, salary=36583), Employee(id=16, name=Mario Franklin, salary=55598), Employee(id=17, name=Marion Tate, salary=18321), Employee(id=18, name=Jorge Dawson, salary=14285), Employee(id=19, name=Josephine Banks, salary=47158), Employee(id=20, name=Scott Rodriquez, salary=19029), Employee(id=21, name=Francis McDaniel, salary=30759), Employee(id=22, name=Jay Banks, salary=42840), Employee(id=23, name=Lily Hughes, salary=35858), Employee(id=24, name=Ella Steele, salary=40652), Employee(id=25, name=Daisy Robinson, salary=10859), Employee(id=26, name=Verna Logan, salary=41319), Employee(id=27, name=Hulda Wright, salary=43736), Employee(id=28, name=Anthony Leonard, salary=55692), Employee(id=29, name=Harriett Bell, salary=32241), Employee(id=30, name=Charlotte Campbell, salary=434), Employee(id=31, name=Luis McKinney, salary=29610), Employee(id=32, name=Cynthia Leonard, salary=27394), Employee(id=33, name=Hallie Cross, salary=57607), Employee(id=34, name=Susie Hammond, salary=54862), Employee(id=35, name=Tommy Valdez, salary=7635), Employee(id=36, name=Mina Collier, salary=56192), Employee(id=37, name=Lucy Sanders, salary=22532), Employee(id=38, name=Addie McDaniel, salary=24663), Employee(id=39, name=Lottie Ruiz, salary=35079), Employee(id=40, name=Charlotte Roberson, salary=14391), Employee(id=41, name=Beatrice Black, salary=47459), Employee(id=42, name=Albert Holt, salary=53550), Employee(id=43, name=Lenora McLaughlin, salary=9259), Employee(id=44, name=Travis Sanchez, salary=19000), Employee(id=45, name=Jean Castro, salary=1187), Employee(id=46, name=Oscar Griffin, salary=35474), Employee(id=47, name=Jordan Mann, salary=7702), Employee(id=48, name=Virgie Hamilton, salary=12305), Employee(id=49, name=Amelia King, salary=52264), Employee(id=50, name=Julia Burns, salary=27572), Employee(id=51, name=Herman Joseph, salary=48687), Employee(id=52, name=Gregory Owen, salary=50226), Employee(id=53, name=Sophia Chavez, salary=1404), Employee(id=54, name=Dollie Garza, salary=59114), Employee(id=55, name=Ruby Yates, salary=8949), Employee(id=56, name=Lela Scott, salary=16440), Employee(id=57, name=Oscar Lane, salary=25693), Employee(id=58, name=Emilie Pope, salary=56991), Employee(id=59, name=Paul Alexander, salary=4801), Employee(id=60, name=Eric Huff, salary=56648), Employee(id=61, name=Barry Kennedy, salary=37118), Employee(id=62, name=Willie Huff, salary=54776), Employee(id=63, name=Victoria Gardner, salary=7860), Employee(id=64, name=Clayton Moody, salary=53790), Employee(id=65, name=Alexander King, salary=43045), Employee(id=66, name=Jim Chambers, salary=29064), Employee(id=67, name=Jane Bryan, salary=23706), Employee(id=68, name=Robert Coleman, salary=32684), Employee(id=69, name=Miguel Owen, salary=1497), Employee(id=70, name=Alta Cox, salary=59153), Employee(id=71, name=Estelle Hicks, salary=36514), Employee(id=72, name=Cynthia Hines, salary=29897), Employee(id=73, name=Derek Freeman, salary=16316), Employee(id=74, name=Ina Lambert, salary=38485), Employee(id=75, name=Derek Diaz, salary=52136), Employee(id=76, name=Verna Ward, salary=37249), Employee(id=77, name=Alan Lawrence, salary=12900), Employee(id=78, name=Caleb Townsend, salary=29935), Employee(id=79, name=Maud Powell, salary=28523), Employee(id=80, name=Alejandro Bowman, salary=23289), Employee(id=81, name=Katharine Meyer, salary=17090), Employee(id=82, name=Marion Garcia, salary=41361), Employee(id=83, name=Gary Perez, salary=35256), Employee(id=84, name=Mamie Garner, salary=30041), Employee(id=85, name=Randy Ferguson, salary=42622), Employee(id=86, name=Gussie Walton, salary=44450), Employee(id=87, name=Sara Castillo, salary=52670), Employee(id=88, name=Virgie Norman, salary=7906), Employee(id=89, name=Marvin Vaughn, salary=12889), Employee(id=90, name=James Brewer, salary=38121), Employee(id=91, name=Mable Hale, salary=13575), Employee(id=92, name=Jeff Stokes, salary=51945), Employee(id=93, name=Bess Howell, salary=33153), Employee(id=94, name=Adeline Brock, salary=46421), Employee(id=95, name=Alberta Franklin, salary=8893), Employee(id=96, name=Chase Palmer, salary=57118), Employee(id=97, name=Rhoda Torres, salary=13166), Employee(id=98, name=Danny Sullivan, salary=16641), Employee(id=99, name=Rebecca Hart, salary=15834), Employee(id=100, name=Jim Osborne, salary=32928)]
2020-08-13 15:39:04,047 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Bill Douglas, salary=13649), Employee(id=2, name=Jennie Gutierrez, salary=10767), Employee(id=3, name=Tillie McCormick, salary=278), Employee(id=4, name=Lilly Reed, salary=16681), Employee(id=5, name=Ollie Shaw, salary=19563), Employee(id=6, name=Bobby Sanchez, salary=17889), Employee(id=7, name=Mattie Waters, salary=24742), Employee(id=8, name=Tyler Copeland, salary=51879), Employee(id=9, name=Loretta Caldwell, salary=47707), Employee(id=10, name=Mario French, salary=53328), Employee(id=11, name=Dominic Graham, salary=18542), Employee(id=12, name=Callie Barber, salary=235), Employee(id=13, name=Elmer Poole, salary=46394), Employee(id=14, name=Luella Reyes, salary=42103), Employee(id=15, name=Donald Drake, salary=36583), Employee(id=16, name=Mario Franklin, salary=55598), Employee(id=17, name=Marion Tate, salary=18321), Employee(id=18, name=Jorge Dawson, salary=14285), Employee(id=19, name=Josephine Banks, salary=47158), Employee(id=20, name=Scott Rodriquez, salary=19029), Employee(id=21, name=Francis McDaniel, salary=30759), Employee(id=22, name=Jay Banks, salary=42840), Employee(id=23, name=Lily Hughes, salary=35858), Employee(id=24, name=Ella Steele, salary=40652), Employee(id=25, name=Daisy Robinson, salary=10859), Employee(id=26, name=Verna Logan, salary=41319), Employee(id=27, name=Hulda Wright, salary=43736), Employee(id=28, name=Anthony Leonard, salary=55692), Employee(id=29, name=Harriett Bell, salary=32241), Employee(id=30, name=Charlotte Campbell, salary=434), Employee(id=31, name=Luis McKinney, salary=29610), Employee(id=32, name=Cynthia Leonard, salary=27394), Employee(id=33, name=Hallie Cross, salary=57607), Employee(id=34, name=Susie Hammond, salary=54862), Employee(id=35, name=Tommy Valdez, salary=7635), Employee(id=36, name=Mina Collier, salary=56192), Employee(id=37, name=Lucy Sanders, salary=22532), Employee(id=38, name=Addie McDaniel, salary=24663), Employee(id=39, name=Lottie Ruiz, salary=35079), Employee(id=40, name=Charlotte Roberson, salary=14391), Employee(id=41, name=Beatrice Black, salary=47459), Employee(id=42, name=Albert Holt, salary=53550), Employee(id=43, name=Lenora McLaughlin, salary=9259), Employee(id=44, name=Travis Sanchez, salary=19000), Employee(id=45, name=Jean Castro, salary=1187), Employee(id=46, name=Oscar Griffin, salary=35474), Employee(id=47, name=Jordan Mann, salary=7702), Employee(id=48, name=Virgie Hamilton, salary=12305), Employee(id=49, name=Amelia King, salary=52264), Employee(id=50, name=Julia Burns, salary=27572), Employee(id=51, name=Herman Joseph, salary=48687), Employee(id=52, name=Gregory Owen, salary=50226), Employee(id=53, name=Sophia Chavez, salary=1404), Employee(id=54, name=Dollie Garza, salary=59114), Employee(id=55, name=Ruby Yates, salary=8949), Employee(id=56, name=Lela Scott, salary=16440), Employee(id=57, name=Oscar Lane, salary=25693), Employee(id=58, name=Emilie Pope, salary=56991), Employee(id=59, name=Paul Alexander, salary=4801), Employee(id=60, name=Eric Huff, salary=56648), Employee(id=61, name=Barry Kennedy, salary=37118), Employee(id=62, name=Willie Huff, salary=54776), Employee(id=63, name=Victoria Gardner, salary=7860), Employee(id=64, name=Clayton Moody, salary=53790), Employee(id=65, name=Alexander King, salary=43045), Employee(id=66, name=Jim Chambers, salary=29064), Employee(id=67, name=Jane Bryan, salary=23706), Employee(id=68, name=Robert Coleman, salary=32684), Employee(id=69, name=Miguel Owen, salary=1497), Employee(id=70, name=Alta Cox, salary=59153), Employee(id=71, name=Estelle Hicks, salary=36514), Employee(id=72, name=Cynthia Hines, salary=29897), Employee(id=73, name=Derek Freeman, salary=16316), Employee(id=74, name=Ina Lambert, salary=38485), Employee(id=75, name=Derek Diaz, salary=52136), Employee(id=76, name=Verna Ward, salary=37249), Employee(id=77, name=Alan Lawrence, salary=12900), Employee(id=78, name=Caleb Townsend, salary=29935), Employee(id=79, name=Maud Powell, salary=28523), Employee(id=80, name=Alejandro Bowman, salary=23289), Employee(id=81, name=Katharine Meyer, salary=17090), Employee(id=82, name=Marion Garcia, salary=41361), Employee(id=83, name=Gary Perez, salary=35256), Employee(id=84, name=Mamie Garner, salary=30041), Employee(id=85, name=Randy Ferguson, salary=42622), Employee(id=86, name=Gussie Walton, salary=44450), Employee(id=87, name=Sara Castillo, salary=52670), Employee(id=88, name=Virgie Norman, salary=7906), Employee(id=89, name=Marvin Vaughn, salary=12889), Employee(id=90, name=James Brewer, salary=38121), Employee(id=91, name=Mable Hale, salary=13575), Employee(id=92, name=Jeff Stokes, salary=51945), Employee(id=93, name=Bess Howell, salary=33153), Employee(id=94, name=Adeline Brock, salary=46421), Employee(id=95, name=Alberta Franklin, salary=8893), Employee(id=96, name=Chase Palmer, salary=57118), Employee(id=97, name=Rhoda Torres, salary=13166), Employee(id=98, name=Danny Sullivan, salary=16641), Employee(id=99, name=Rebecca Hart, salary=15834), Employee(id=100, name=Jim Osborne, salary=32928)]
2020-08-13 15:39:04,076 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Bill Douglas, salary=13649), Employee(id=2, name=Jennie Gutierrez, salary=10767), Employee(id=3, name=Tillie McCormick, salary=278), Employee(id=4, name=Lilly Reed, salary=16681), Employee(id=5, name=Ollie Shaw, salary=19563), Employee(id=6, name=Bobby Sanchez, salary=17889), Employee(id=7, name=Mattie Waters, salary=24742), Employee(id=8, name=Tyler Copeland, salary=51879), Employee(id=9, name=Loretta Caldwell, salary=47707), Employee(id=10, name=Mario French, salary=53328), Employee(id=11, name=Dominic Graham, salary=18542), Employee(id=12, name=Callie Barber, salary=235), Employee(id=13, name=Elmer Poole, salary=46394), Employee(id=14, name=Luella Reyes, salary=42103), Employee(id=15, name=Donald Drake, salary=36583), Employee(id=16, name=Mario Franklin, salary=55598), Employee(id=17, name=Marion Tate, salary=18321), Employee(id=18, name=Jorge Dawson, salary=14285), Employee(id=19, name=Josephine Banks, salary=47158), Employee(id=20, name=Scott Rodriquez, salary=19029), Employee(id=21, name=Francis McDaniel, salary=30759), Employee(id=22, name=Jay Banks, salary=42840), Employee(id=23, name=Lily Hughes, salary=35858), Employee(id=24, name=Ella Steele, salary=40652), Employee(id=25, name=Daisy Robinson, salary=10859), Employee(id=26, name=Verna Logan, salary=41319), Employee(id=27, name=Hulda Wright, salary=43736), Employee(id=28, name=Anthony Leonard, salary=55692), Employee(id=29, name=Harriett Bell, salary=32241), Employee(id=30, name=Charlotte Campbell, salary=434), Employee(id=31, name=Luis McKinney, salary=29610), Employee(id=32, name=Cynthia Leonard, salary=27394), Employee(id=33, name=Hallie Cross, salary=57607), Employee(id=34, name=Susie Hammond, salary=54862), Employee(id=35, name=Tommy Valdez, salary=7635), Employee(id=36, name=Mina Collier, salary=56192), Employee(id=37, name=Lucy Sanders, salary=22532), Employee(id=38, name=Addie McDaniel, salary=24663), Employee(id=39, name=Lottie Ruiz, salary=35079), Employee(id=40, name=Charlotte Roberson, salary=14391), Employee(id=41, name=Beatrice Black, salary=47459), Employee(id=42, name=Albert Holt, salary=53550), Employee(id=43, name=Lenora McLaughlin, salary=9259), Employee(id=44, name=Travis Sanchez, salary=19000), Employee(id=45, name=Jean Castro, salary=1187), Employee(id=46, name=Oscar Griffin, salary=35474), Employee(id=47, name=Jordan Mann, salary=7702), Employee(id=48, name=Virgie Hamilton, salary=12305), Employee(id=49, name=Amelia King, salary=52264), Employee(id=50, name=Julia Burns, salary=27572), Employee(id=51, name=Herman Joseph, salary=48687), Employee(id=52, name=Gregory Owen, salary=50226), Employee(id=53, name=Sophia Chavez, salary=1404), Employee(id=54, name=Dollie Garza, salary=59114), Employee(id=55, name=Ruby Yates, salary=8949), Employee(id=56, name=Lela Scott, salary=16440), Employee(id=57, name=Oscar Lane, salary=25693), Employee(id=58, name=Emilie Pope, salary=56991), Employee(id=59, name=Paul Alexander, salary=4801), Employee(id=60, name=Eric Huff, salary=56648), Employee(id=61, name=Barry Kennedy, salary=37118), Employee(id=62, name=Willie Huff, salary=54776), Employee(id=63, name=Victoria Gardner, salary=7860), Employee(id=64, name=Clayton Moody, salary=53790), Employee(id=65, name=Alexander King, salary=43045), Employee(id=66, name=Jim Chambers, salary=29064), Employee(id=67, name=Jane Bryan, salary=23706), Employee(id=68, name=Robert Coleman, salary=32684), Employee(id=69, name=Miguel Owen, salary=1497), Employee(id=70, name=Alta Cox, salary=59153), Employee(id=71, name=Estelle Hicks, salary=36514), Employee(id=72, name=Cynthia Hines, salary=29897), Employee(id=73, name=Derek Freeman, salary=16316), Employee(id=74, name=Ina Lambert, salary=38485), Employee(id=75, name=Derek Diaz, salary=52136), Employee(id=76, name=Verna Ward, salary=37249), Employee(id=77, name=Alan Lawrence, salary=12900), Employee(id=78, name=Caleb Townsend, salary=29935), Employee(id=79, name=Maud Powell, salary=28523), Employee(id=80, name=Alejandro Bowman, salary=23289), Employee(id=81, name=Katharine Meyer, salary=17090), Employee(id=82, name=Marion Garcia, salary=41361), Employee(id=83, name=Gary Perez, salary=35256), Employee(id=84, name=Mamie Garner, salary=30041), Employee(id=85, name=Randy Ferguson, salary=42622), Employee(id=86, name=Gussie Walton, salary=44450), Employee(id=87, name=Sara Castillo, salary=52670), Employee(id=88, name=Virgie Norman, salary=7906), Employee(id=89, name=Marvin Vaughn, salary=12889), Employee(id=90, name=James Brewer, salary=38121), Employee(id=91, name=Mable Hale, salary=13575), Employee(id=92, name=Jeff Stokes, salary=51945), Employee(id=93, name=Bess Howell, salary=33153), Employee(id=94, name=Adeline Brock, salary=46421), Employee(id=95, name=Alberta Franklin, salary=8893), Employee(id=96, name=Chase Palmer, salary=57118), Employee(id=97, name=Rhoda Torres, salary=13166), Employee(id=98, name=Danny Sullivan, salary=16641), Employee(id=99, name=Rebecca Hart, salary=15834), Employee(id=100, name=Jim Osborne, salary=32928)]
2020-08-13 15:39:04,113 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Bill Douglas, salary=13649), Employee(id=2, name=Jennie Gutierrez, salary=10767), Employee(id=3, name=Tillie McCormick, salary=278), Employee(id=4, name=Lilly Reed, salary=16681), Employee(id=5, name=Ollie Shaw, salary=19563), Employee(id=6, name=Bobby Sanchez, salary=17889), Employee(id=7, name=Mattie Waters, salary=24742), Employee(id=8, name=Tyler Copeland, salary=51879), Employee(id=9, name=Loretta Caldwell, salary=47707), Employee(id=10, name=Mario French, salary=53328), Employee(id=11, name=Dominic Graham, salary=18542), Employee(id=12, name=Callie Barber, salary=235), Employee(id=13, name=Elmer Poole, salary=46394), Employee(id=14, name=Luella Reyes, salary=42103), Employee(id=15, name=Donald Drake, salary=36583), Employee(id=16, name=Mario Franklin, salary=55598), Employee(id=17, name=Marion Tate, salary=18321), Employee(id=18, name=Jorge Dawson, salary=14285), Employee(id=19, name=Josephine Banks, salary=47158), Employee(id=20, name=Scott Rodriquez, salary=19029), Employee(id=21, name=Francis McDaniel, salary=30759), Employee(id=22, name=Jay Banks, salary=42840), Employee(id=23, name=Lily Hughes, salary=35858), Employee(id=24, name=Ella Steele, salary=40652), Employee(id=25, name=Daisy Robinson, salary=10859), Employee(id=26, name=Verna Logan, salary=41319), Employee(id=27, name=Hulda Wright, salary=43736), Employee(id=28, name=Anthony Leonard, salary=55692), Employee(id=29, name=Harriett Bell, salary=32241), Employee(id=30, name=Charlotte Campbell, salary=434), Employee(id=31, name=Luis McKinney, salary=29610), Employee(id=32, name=Cynthia Leonard, salary=27394), Employee(id=33, name=Hallie Cross, salary=57607), Employee(id=34, name=Susie Hammond, salary=54862), Employee(id=35, name=Tommy Valdez, salary=7635), Employee(id=36, name=Mina Collier, salary=56192), Employee(id=37, name=Lucy Sanders, salary=22532), Employee(id=38, name=Addie McDaniel, salary=24663), Employee(id=39, name=Lottie Ruiz, salary=35079), Employee(id=40, name=Charlotte Roberson, salary=14391), Employee(id=41, name=Beatrice Black, salary=47459), Employee(id=42, name=Albert Holt, salary=53550), Employee(id=43, name=Lenora McLaughlin, salary=9259), Employee(id=44, name=Travis Sanchez, salary=19000), Employee(id=45, name=Jean Castro, salary=1187), Employee(id=46, name=Oscar Griffin, salary=35474), Employee(id=47, name=Jordan Mann, salary=7702), Employee(id=48, name=Virgie Hamilton, salary=12305), Employee(id=49, name=Amelia King, salary=52264), Employee(id=50, name=Julia Burns, salary=27572), Employee(id=51, name=Herman Joseph, salary=48687), Employee(id=52, name=Gregory Owen, salary=50226), Employee(id=53, name=Sophia Chavez, salary=1404), Employee(id=54, name=Dollie Garza, salary=59114), Employee(id=55, name=Ruby Yates, salary=8949), Employee(id=56, name=Lela Scott, salary=16440), Employee(id=57, name=Oscar Lane, salary=25693), Employee(id=58, name=Emilie Pope, salary=56991), Employee(id=59, name=Paul Alexander, salary=4801), Employee(id=60, name=Eric Huff, salary=56648), Employee(id=61, name=Barry Kennedy, salary=37118), Employee(id=62, name=Willie Huff, salary=54776), Employee(id=63, name=Victoria Gardner, salary=7860), Employee(id=64, name=Clayton Moody, salary=53790), Employee(id=65, name=Alexander King, salary=43045), Employee(id=66, name=Jim Chambers, salary=29064), Employee(id=67, name=Jane Bryan, salary=23706), Employee(id=68, name=Robert Coleman, salary=32684), Employee(id=69, name=Miguel Owen, salary=1497), Employee(id=70, name=Alta Cox, salary=59153), Employee(id=71, name=Estelle Hicks, salary=36514), Employee(id=72, name=Cynthia Hines, salary=29897), Employee(id=73, name=Derek Freeman, salary=16316), Employee(id=74, name=Ina Lambert, salary=38485), Employee(id=75, name=Derek Diaz, salary=52136), Employee(id=76, name=Verna Ward, salary=37249), Employee(id=77, name=Alan Lawrence, salary=12900), Employee(id=78, name=Caleb Townsend, salary=29935), Employee(id=79, name=Maud Powell, salary=28523), Employee(id=80, name=Alejandro Bowman, salary=23289), Employee(id=81, name=Katharine Meyer, salary=17090), Employee(id=82, name=Marion Garcia, salary=41361), Employee(id=83, name=Gary Perez, salary=35256), Employee(id=84, name=Mamie Garner, salary=30041), Employee(id=85, name=Randy Ferguson, salary=42622), Employee(id=86, name=Gussie Walton, salary=44450), Employee(id=87, name=Sara Castillo, salary=52670), Employee(id=88, name=Virgie Norman, salary=7906), Employee(id=89, name=Marvin Vaughn, salary=12889), Employee(id=90, name=James Brewer, salary=38121), Employee(id=91, name=Mable Hale, salary=13575), Employee(id=92, name=Jeff Stokes, salary=51945), Employee(id=93, name=Bess Howell, salary=33153), Employee(id=94, name=Adeline Brock, salary=46421), Employee(id=95, name=Alberta Franklin, salary=8893), Employee(id=96, name=Chase Palmer, salary=57118), Employee(id=97, name=Rhoda Torres, salary=13166), Employee(id=98, name=Danny Sullivan, salary=16641), Employee(id=99, name=Rebecca Hart, salary=15834), Employee(id=100, name=Jim Osborne, salary=32928)]
2020-08-13 15:39:04,143 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Bill Douglas, salary=13649), Employee(id=2, name=Jennie Gutierrez, salary=10767), Employee(id=3, name=Tillie McCormick, salary=278), Employee(id=4, name=Lilly Reed, salary=16681), Employee(id=5, name=Ollie Shaw, salary=19563), Employee(id=6, name=Bobby Sanchez, salary=17889), Employee(id=7, name=Mattie Waters, salary=24742), Employee(id=8, name=Tyler Copeland, salary=51879), Employee(id=9, name=Loretta Caldwell, salary=47707), Employee(id=10, name=Mario French, salary=53328), Employee(id=11, name=Dominic Graham, salary=18542), Employee(id=12, name=Callie Barber, salary=235), Employee(id=13, name=Elmer Poole, salary=46394), Employee(id=14, name=Luella Reyes, salary=42103), Employee(id=15, name=Donald Drake, salary=36583), Employee(id=16, name=Mario Franklin, salary=55598), Employee(id=17, name=Marion Tate, salary=18321), Employee(id=18, name=Jorge Dawson, salary=14285), Employee(id=19, name=Josephine Banks, salary=47158), Employee(id=20, name=Scott Rodriquez, salary=19029), Employee(id=21, name=Francis McDaniel, salary=30759), Employee(id=22, name=Jay Banks, salary=42840), Employee(id=23, name=Lily Hughes, salary=35858), Employee(id=24, name=Ella Steele, salary=40652), Employee(id=25, name=Daisy Robinson, salary=10859), Employee(id=26, name=Verna Logan, salary=41319), Employee(id=27, name=Hulda Wright, salary=43736), Employee(id=28, name=Anthony Leonard, salary=55692), Employee(id=29, name=Harriett Bell, salary=32241), Employee(id=30, name=Charlotte Campbell, salary=434), Employee(id=31, name=Luis McKinney, salary=29610), Employee(id=32, name=Cynthia Leonard, salary=27394), Employee(id=33, name=Hallie Cross, salary=57607), Employee(id=34, name=Susie Hammond, salary=54862), Employee(id=35, name=Tommy Valdez, salary=7635), Employee(id=36, name=Mina Collier, salary=56192), Employee(id=37, name=Lucy Sanders, salary=22532), Employee(id=38, name=Addie McDaniel, salary=24663), Employee(id=39, name=Lottie Ruiz, salary=35079), Employee(id=40, name=Charlotte Roberson, salary=14391), Employee(id=41, name=Beatrice Black, salary=47459), Employee(id=42, name=Albert Holt, salary=53550), Employee(id=43, name=Lenora McLaughlin, salary=9259), Employee(id=44, name=Travis Sanchez, salary=19000), Employee(id=45, name=Jean Castro, salary=1187), Employee(id=46, name=Oscar Griffin, salary=35474), Employee(id=47, name=Jordan Mann, salary=7702), Employee(id=48, name=Virgie Hamilton, salary=12305), Employee(id=49, name=Amelia King, salary=52264), Employee(id=50, name=Julia Burns, salary=27572), Employee(id=51, name=Herman Joseph, salary=48687), Employee(id=52, name=Gregory Owen, salary=50226), Employee(id=53, name=Sophia Chavez, salary=1404), Employee(id=54, name=Dollie Garza, salary=59114), Employee(id=55, name=Ruby Yates, salary=8949), Employee(id=56, name=Lela Scott, salary=16440), Employee(id=57, name=Oscar Lane, salary=25693), Employee(id=58, name=Emilie Pope, salary=56991), Employee(id=59, name=Paul Alexander, salary=4801), Employee(id=60, name=Eric Huff, salary=56648), Employee(id=61, name=Barry Kennedy, salary=37118), Employee(id=62, name=Willie Huff, salary=54776), Employee(id=63, name=Victoria Gardner, salary=7860), Employee(id=64, name=Clayton Moody, salary=53790), Employee(id=65, name=Alexander King, salary=43045), Employee(id=66, name=Jim Chambers, salary=29064), Employee(id=67, name=Jane Bryan, salary=23706), Employee(id=68, name=Robert Coleman, salary=32684), Employee(id=69, name=Miguel Owen, salary=1497), Employee(id=70, name=Alta Cox, salary=59153), Employee(id=71, name=Estelle Hicks, salary=36514), Employee(id=72, name=Cynthia Hines, salary=29897), Employee(id=73, name=Derek Freeman, salary=16316), Employee(id=74, name=Ina Lambert, salary=38485), Employee(id=75, name=Derek Diaz, salary=52136), Employee(id=76, name=Verna Ward, salary=37249), Employee(id=77, name=Alan Lawrence, salary=12900), Employee(id=78, name=Caleb Townsend, salary=29935), Employee(id=79, name=Maud Powell, salary=28523), Employee(id=80, name=Alejandro Bowman, salary=23289), Employee(id=81, name=Katharine Meyer, salary=17090), Employee(id=82, name=Marion Garcia, salary=41361), Employee(id=83, name=Gary Perez, salary=35256), Employee(id=84, name=Mamie Garner, salary=30041), Employee(id=85, name=Randy Ferguson, salary=42622), Employee(id=86, name=Gussie Walton, salary=44450), Employee(id=87, name=Sara Castillo, salary=52670), Employee(id=88, name=Virgie Norman, salary=7906), Employee(id=89, name=Marvin Vaughn, salary=12889), Employee(id=90, name=James Brewer, salary=38121), Employee(id=91, name=Mable Hale, salary=13575), Employee(id=92, name=Jeff Stokes, salary=51945), Employee(id=93, name=Bess Howell, salary=33153), Employee(id=94, name=Adeline Brock, salary=46421), Employee(id=95, name=Alberta Franklin, salary=8893), Employee(id=96, name=Chase Palmer, salary=57118), Employee(id=97, name=Rhoda Torres, salary=13166), Employee(id=98, name=Danny Sullivan, salary=16641), Employee(id=99, name=Rebecca Hart, salary=15834), Employee(id=100, name=Jim Osborne, salary=32928)]
2020-08-13 15:39:04,167 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Bill Douglas, salary=13649), Employee(id=2, name=Jennie Gutierrez, salary=10767), Employee(id=3, name=Tillie McCormick, salary=278), Employee(id=4, name=Lilly Reed, salary=16681), Employee(id=5, name=Ollie Shaw, salary=19563), Employee(id=6, name=Bobby Sanchez, salary=17889), Employee(id=7, name=Mattie Waters, salary=24742), Employee(id=8, name=Tyler Copeland, salary=51879), Employee(id=9, name=Loretta Caldwell, salary=47707), Employee(id=10, name=Mario French, salary=53328), Employee(id=11, name=Dominic Graham, salary=18542), Employee(id=12, name=Callie Barber, salary=235), Employee(id=13, name=Elmer Poole, salary=46394), Employee(id=14, name=Luella Reyes, salary=42103), Employee(id=15, name=Donald Drake, salary=36583), Employee(id=16, name=Mario Franklin, salary=55598), Employee(id=17, name=Marion Tate, salary=18321), Employee(id=18, name=Jorge Dawson, salary=14285), Employee(id=19, name=Josephine Banks, salary=47158), Employee(id=20, name=Scott Rodriquez, salary=19029), Employee(id=21, name=Francis McDaniel, salary=30759), Employee(id=22, name=Jay Banks, salary=42840), Employee(id=23, name=Lily Hughes, salary=35858), Employee(id=24, name=Ella Steele, salary=40652), Employee(id=25, name=Daisy Robinson, salary=10859), Employee(id=26, name=Verna Logan, salary=41319), Employee(id=27, name=Hulda Wright, salary=43736), Employee(id=28, name=Anthony Leonard, salary=55692), Employee(id=29, name=Harriett Bell, salary=32241), Employee(id=30, name=Charlotte Campbell, salary=434), Employee(id=31, name=Luis McKinney, salary=29610), Employee(id=32, name=Cynthia Leonard, salary=27394), Employee(id=33, name=Hallie Cross, salary=57607), Employee(id=34, name=Susie Hammond, salary=54862), Employee(id=35, name=Tommy Valdez, salary=7635), Employee(id=36, name=Mina Collier, salary=56192), Employee(id=37, name=Lucy Sanders, salary=22532), Employee(id=38, name=Addie McDaniel, salary=24663), Employee(id=39, name=Lottie Ruiz, salary=35079), Employee(id=40, name=Charlotte Roberson, salary=14391), Employee(id=41, name=Beatrice Black, salary=47459), Employee(id=42, name=Albert Holt, salary=53550), Employee(id=43, name=Lenora McLaughlin, salary=9259), Employee(id=44, name=Travis Sanchez, salary=19000), Employee(id=45, name=Jean Castro, salary=1187), Employee(id=46, name=Oscar Griffin, salary=35474), Employee(id=47, name=Jordan Mann, salary=7702), Employee(id=48, name=Virgie Hamilton, salary=12305), Employee(id=49, name=Amelia King, salary=52264), Employee(id=50, name=Julia Burns, salary=27572), Employee(id=51, name=Herman Joseph, salary=48687), Employee(id=52, name=Gregory Owen, salary=50226), Employee(id=53, name=Sophia Chavez, salary=1404), Employee(id=54, name=Dollie Garza, salary=59114), Employee(id=55, name=Ruby Yates, salary=8949), Employee(id=56, name=Lela Scott, salary=16440), Employee(id=57, name=Oscar Lane, salary=25693), Employee(id=58, name=Emilie Pope, salary=56991), Employee(id=59, name=Paul Alexander, salary=4801), Employee(id=60, name=Eric Huff, salary=56648), Employee(id=61, name=Barry Kennedy, salary=37118), Employee(id=62, name=Willie Huff, salary=54776), Employee(id=63, name=Victoria Gardner, salary=7860), Employee(id=64, name=Clayton Moody, salary=53790), Employee(id=65, name=Alexander King, salary=43045), Employee(id=66, name=Jim Chambers, salary=29064), Employee(id=67, name=Jane Bryan, salary=23706), Employee(id=68, name=Robert Coleman, salary=32684), Employee(id=69, name=Miguel Owen, salary=1497), Employee(id=70, name=Alta Cox, salary=59153), Employee(id=71, name=Estelle Hicks, salary=36514), Employee(id=72, name=Cynthia Hines, salary=29897), Employee(id=73, name=Derek Freeman, salary=16316), Employee(id=74, name=Ina Lambert, salary=38485), Employee(id=75, name=Derek Diaz, salary=52136), Employee(id=76, name=Verna Ward, salary=37249), Employee(id=77, name=Alan Lawrence, salary=12900), Employee(id=78, name=Caleb Townsend, salary=29935), Employee(id=79, name=Maud Powell, salary=28523), Employee(id=80, name=Alejandro Bowman, salary=23289), Employee(id=81, name=Katharine Meyer, salary=17090), Employee(id=82, name=Marion Garcia, salary=41361), Employee(id=83, name=Gary Perez, salary=35256), Employee(id=84, name=Mamie Garner, salary=30041), Employee(id=85, name=Randy Ferguson, salary=42622), Employee(id=86, name=Gussie Walton, salary=44450), Employee(id=87, name=Sara Castillo, salary=52670), Employee(id=88, name=Virgie Norman, salary=7906), Employee(id=89, name=Marvin Vaughn, salary=12889), Employee(id=90, name=James Brewer, salary=38121), Employee(id=91, name=Mable Hale, salary=13575), Employee(id=92, name=Jeff Stokes, salary=51945), Employee(id=93, name=Bess Howell, salary=33153), Employee(id=94, name=Adeline Brock, salary=46421), Employee(id=95, name=Alberta Franklin, salary=8893), Employee(id=96, name=Chase Palmer, salary=57118), Employee(id=97, name=Rhoda Torres, salary=13166), Employee(id=98, name=Danny Sullivan, salary=16641), Employee(id=99, name=Rebecca Hart, salary=15834), Employee(id=100, name=Jim Osborne, salary=32928)]
2020-08-13 15:39:04,187 INFO org.springframework.batch.core.step.AbstractStep [task-7] Step: [myStep:partition0] executed in 509ms
2020-08-13 15:39:04,199 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition2] executed in 519ms
2020-08-13 15:39:04,199 INFO org.springframework.batch.core.step.AbstractStep [task-5] Step: [myStep:partition5] executed in 520ms
2020-08-13 15:39:04,202 INFO org.springframework.batch.core.step.AbstractStep [task-3] Step: [myStep:partition4] executed in 522ms
2020-08-13 15:39:04,203 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition3] executed in 534ms
2020-08-13 15:39:04,211 INFO org.springframework.batch.core.step.AbstractStep [task-4] Step: [myStep:partition1] executed in 531ms
2020-08-13 15:39:04,211 INFO org.springframework.batch.core.step.AbstractStep [task-6] Step: [myStep:partition6] executed in 532ms
2020-08-13 15:39:04,213 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 599ms
2020-08-13 15:39:04,216 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 638ms
2020-08-13 15:39:04,219 INFO org.springframework.boot.devtools.autoconfigure.ConditionEvaluationDeltaLoggingListener [restartedMain] Condition evaluation unchanged
2020-08-13 15:39:53,356 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [Thread-99] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 15:39:53,611 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 11004 (D:\Spring-Batch\batch\target\classes started by Mani kandan in D:\Spring-Batch\batch)
2020-08-13 15:39:53,617 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 15:39:54,050 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 15:39:54,187 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 15:39:54,195 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 0.667 seconds (JVM running for 100.039)
2020-08-13 15:39:54,198 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 15:39:54,200 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 15:39:54,200 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 15:39:54,211 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 15:39:54,218 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 15:39:54,221 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 15:39:54,276 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Bill Douglas, salary=13649)]
2020-08-13 15:39:54,283 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Bill Douglas, salary=13649)]
2020-08-13 15:39:54,285 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Jennie Gutierrez, salary=10767)]
2020-08-13 15:39:54,288 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Tillie McCormick, salary=278)]
2020-08-13 15:39:54,290 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Lilly Reed, salary=16681)]
2020-08-13 15:39:54,291 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Jennie Gutierrez, salary=10767)]
2020-08-13 15:39:54,293 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Tillie McCormick, salary=278)]
2020-08-13 15:39:54,301 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Lilly Reed, salary=16681)]
2020-08-13 15:39:54,303 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Bill Douglas, salary=13649)]
2020-08-13 15:39:54,305 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Jennie Gutierrez, salary=10767)]
2020-08-13 15:39:54,307 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Tillie McCormick, salary=278)]
2020-08-13 15:39:54,309 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Lilly Reed, salary=16681)]
2020-08-13 15:39:54,312 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Bill Douglas, salary=13649)]
2020-08-13 15:39:54,315 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Jennie Gutierrez, salary=10767)]
2020-08-13 15:39:54,323 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Tillie McCormick, salary=278)]
2020-08-13 15:39:54,335 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Lilly Reed, salary=16681)]
2020-08-13 15:39:54,338 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Bill Douglas, salary=13649)]
2020-08-13 15:39:54,341 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Jennie Gutierrez, salary=10767)]
2020-08-13 15:39:54,343 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Tillie McCormick, salary=278)]
2020-08-13 15:39:54,345 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Lilly Reed, salary=16681)]
2020-08-13 15:39:54,350 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Bill Douglas, salary=13649)]
2020-08-13 15:39:54,354 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Jennie Gutierrez, salary=10767)]
2020-08-13 15:39:54,356 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Tillie McCormick, salary=278)]
2020-08-13 15:39:54,358 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Lilly Reed, salary=16681)]
2020-08-13 15:39:54,360 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=1, name=Bill Douglas, salary=13649)]
2020-08-13 15:39:54,363 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=2, name=Jennie Gutierrez, salary=10767)]
2020-08-13 15:39:54,368 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=3, name=Tillie McCormick, salary=278)]
2020-08-13 15:39:54,369 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=4, name=Lilly Reed, salary=16681)]
2020-08-13 15:39:54,374 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Ollie Shaw, salary=19563)]
2020-08-13 15:39:54,376 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Ollie Shaw, salary=19563)]
2020-08-13 15:39:54,379 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=Bobby Sanchez, salary=17889)]
2020-08-13 15:39:54,386 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Mattie Waters, salary=24742)]
2020-08-13 15:39:54,388 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Tyler Copeland, salary=51879)]
2020-08-13 15:39:54,390 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=Bobby Sanchez, salary=17889)]
2020-08-13 15:39:54,392 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Mattie Waters, salary=24742)]
2020-08-13 15:39:54,394 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Tyler Copeland, salary=51879)]
2020-08-13 15:39:54,402 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Ollie Shaw, salary=19563)]
2020-08-13 15:39:54,405 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=Bobby Sanchez, salary=17889)]
2020-08-13 15:39:54,407 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Mattie Waters, salary=24742)]
2020-08-13 15:39:54,408 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Tyler Copeland, salary=51879)]
2020-08-13 15:39:54,410 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Ollie Shaw, salary=19563)]
2020-08-13 15:39:54,418 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=Bobby Sanchez, salary=17889)]
2020-08-13 15:39:54,420 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Mattie Waters, salary=24742)]
2020-08-13 15:39:54,423 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Tyler Copeland, salary=51879)]
2020-08-13 15:39:54,425 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Ollie Shaw, salary=19563)]
2020-08-13 15:39:54,429 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=Bobby Sanchez, salary=17889)]
2020-08-13 15:39:54,437 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Mattie Waters, salary=24742)]
2020-08-13 15:39:54,439 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Tyler Copeland, salary=51879)]
2020-08-13 15:39:54,440 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Ollie Shaw, salary=19563)]
2020-08-13 15:39:54,442 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=Bobby Sanchez, salary=17889)]
2020-08-13 15:39:54,444 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Mattie Waters, salary=24742)]
2020-08-13 15:39:54,450 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Tyler Copeland, salary=51879)]
2020-08-13 15:39:54,452 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=5, name=Ollie Shaw, salary=19563)]
2020-08-13 15:39:54,455 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=6, name=Bobby Sanchez, salary=17889)]
2020-08-13 15:39:54,457 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=7, name=Mattie Waters, salary=24742)]
2020-08-13 15:39:54,458 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=8, name=Tyler Copeland, salary=51879)]
2020-08-13 15:39:54,461 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Loretta Caldwell, salary=47707)]
2020-08-13 15:39:54,467 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Loretta Caldwell, salary=47707)]
2020-08-13 15:39:54,469 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Mario French, salary=53328)]
2020-08-13 15:39:54,472 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Dominic Graham, salary=18542)]
2020-08-13 15:39:54,478 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=Callie Barber, salary=235)]
2020-08-13 15:39:54,484 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Mario French, salary=53328)]
2020-08-13 15:39:54,487 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Dominic Graham, salary=18542)]
2020-08-13 15:39:54,489 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=Callie Barber, salary=235)]
2020-08-13 15:39:54,502 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Loretta Caldwell, salary=47707)]
2020-08-13 15:39:54,504 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Mario French, salary=53328)]
2020-08-13 15:39:54,507 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Dominic Graham, salary=18542)]
2020-08-13 15:39:54,508 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=Callie Barber, salary=235)]
2020-08-13 15:39:54,510 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Loretta Caldwell, salary=47707)]
2020-08-13 15:39:54,520 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Mario French, salary=53328)]
2020-08-13 15:39:54,523 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Dominic Graham, salary=18542)]
2020-08-13 15:39:54,527 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=Callie Barber, salary=235)]
2020-08-13 15:39:54,535 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Loretta Caldwell, salary=47707)]
2020-08-13 15:39:54,538 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Mario French, salary=53328)]
2020-08-13 15:39:54,541 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Dominic Graham, salary=18542)]
2020-08-13 15:39:54,544 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=Callie Barber, salary=235)]
2020-08-13 15:39:54,553 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Loretta Caldwell, salary=47707)]
2020-08-13 15:39:54,557 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Mario French, salary=53328)]
2020-08-13 15:39:54,560 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Dominic Graham, salary=18542)]
2020-08-13 15:39:54,562 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=Callie Barber, salary=235)]
2020-08-13 15:39:54,573 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=9, name=Loretta Caldwell, salary=47707)]
2020-08-13 15:39:54,575 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=10, name=Mario French, salary=53328)]
2020-08-13 15:39:54,585 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=11, name=Dominic Graham, salary=18542)]
2020-08-13 15:39:54,590 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=12, name=Callie Barber, salary=235)]
2020-08-13 15:39:54,592 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Elmer Poole, salary=46394)]
2020-08-13 15:39:54,594 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Elmer Poole, salary=46394)]
2020-08-13 15:39:54,595 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Luella Reyes, salary=42103)]
2020-08-13 15:39:54,601 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Donald Drake, salary=36583)]
2020-08-13 15:39:54,602 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Mario Franklin, salary=55598)]
2020-08-13 15:39:54,604 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Luella Reyes, salary=42103)]
2020-08-13 15:39:54,606 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Donald Drake, salary=36583)]
2020-08-13 15:39:54,607 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Mario Franklin, salary=55598)]
2020-08-13 15:39:54,609 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Elmer Poole, salary=46394)]
2020-08-13 15:39:54,611 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Luella Reyes, salary=42103)]
2020-08-13 15:39:54,616 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Donald Drake, salary=36583)]
2020-08-13 15:39:54,618 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Mario Franklin, salary=55598)]
2020-08-13 15:39:54,621 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Elmer Poole, salary=46394)]
2020-08-13 15:39:54,622 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Luella Reyes, salary=42103)]
2020-08-13 15:39:54,671 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Donald Drake, salary=36583)]
2020-08-13 15:39:54,674 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Mario Franklin, salary=55598)]
2020-08-13 15:39:54,676 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Elmer Poole, salary=46394)]
2020-08-13 15:39:54,680 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Luella Reyes, salary=42103)]
2020-08-13 15:39:54,684 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Donald Drake, salary=36583)]
2020-08-13 15:39:54,691 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Mario Franklin, salary=55598)]
2020-08-13 15:39:54,694 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Elmer Poole, salary=46394)]
2020-08-13 15:39:54,701 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Luella Reyes, salary=42103)]
2020-08-13 15:39:54,706 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Donald Drake, salary=36583)]
2020-08-13 15:39:54,720 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Mario Franklin, salary=55598)]
2020-08-13 15:39:54,724 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=13, name=Elmer Poole, salary=46394)]
2020-08-13 15:39:54,728 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=14, name=Luella Reyes, salary=42103)]
2020-08-13 15:39:54,750 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=15, name=Donald Drake, salary=36583)]
2020-08-13 15:39:54,756 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=16, name=Mario Franklin, salary=55598)]
2020-08-13 15:39:54,761 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Marion Tate, salary=18321)]
2020-08-13 15:39:54,765 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Marion Tate, salary=18321)]
2020-08-13 15:39:54,767 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Jorge Dawson, salary=14285)]
2020-08-13 15:39:54,773 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Josephine Banks, salary=47158)]
2020-08-13 15:39:54,786 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Scott Rodriquez, salary=19029)]
2020-08-13 15:39:54,789 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Jorge Dawson, salary=14285)]
2020-08-13 15:39:54,792 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Josephine Banks, salary=47158)]
2020-08-13 15:39:54,794 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Scott Rodriquez, salary=19029)]
2020-08-13 15:39:54,803 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Marion Tate, salary=18321)]
2020-08-13 15:39:54,806 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Jorge Dawson, salary=14285)]
2020-08-13 15:39:54,809 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Josephine Banks, salary=47158)]
2020-08-13 15:39:54,811 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Scott Rodriquez, salary=19029)]
2020-08-13 15:39:54,819 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Marion Tate, salary=18321)]
2020-08-13 15:39:54,821 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Jorge Dawson, salary=14285)]
2020-08-13 15:39:54,823 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Josephine Banks, salary=47158)]
2020-08-13 15:39:54,828 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Scott Rodriquez, salary=19029)]
2020-08-13 15:39:54,834 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Marion Tate, salary=18321)]
2020-08-13 15:39:54,836 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Jorge Dawson, salary=14285)]
2020-08-13 15:39:54,838 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Josephine Banks, salary=47158)]
2020-08-13 15:39:54,842 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Scott Rodriquez, salary=19029)]
2020-08-13 15:39:54,844 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Marion Tate, salary=18321)]
2020-08-13 15:39:54,850 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Jorge Dawson, salary=14285)]
2020-08-13 15:39:54,852 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Josephine Banks, salary=47158)]
2020-08-13 15:39:54,855 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Scott Rodriquez, salary=19029)]
2020-08-13 15:39:54,857 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=17, name=Marion Tate, salary=18321)]
2020-08-13 15:39:54,859 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=18, name=Jorge Dawson, salary=14285)]
2020-08-13 15:39:54,862 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=19, name=Josephine Banks, salary=47158)]
2020-08-13 15:39:54,866 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=20, name=Scott Rodriquez, salary=19029)]
2020-08-13 15:39:54,869 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Francis McDaniel, salary=30759)]
2020-08-13 15:39:54,871 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Francis McDaniel, salary=30759)]
2020-08-13 15:39:54,873 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Jay Banks, salary=42840)]
2020-08-13 15:39:54,880 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Lily Hughes, salary=35858)]
2020-08-13 15:39:54,885 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Ella Steele, salary=40652)]
2020-08-13 15:39:54,888 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Jay Banks, salary=42840)]
2020-08-13 15:39:54,890 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Lily Hughes, salary=35858)]
2020-08-13 15:39:54,893 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Ella Steele, salary=40652)]
2020-08-13 15:39:54,902 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Francis McDaniel, salary=30759)]
2020-08-13 15:39:54,906 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Jay Banks, salary=42840)]
2020-08-13 15:39:54,909 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Lily Hughes, salary=35858)]
2020-08-13 15:39:54,917 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Ella Steele, salary=40652)]
2020-08-13 15:39:54,919 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Francis McDaniel, salary=30759)]
2020-08-13 15:39:54,922 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Jay Banks, salary=42840)]
2020-08-13 15:39:54,924 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Lily Hughes, salary=35858)]
2020-08-13 15:39:54,927 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Ella Steele, salary=40652)]
2020-08-13 15:39:54,935 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Francis McDaniel, salary=30759)]
2020-08-13 15:39:54,938 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Jay Banks, salary=42840)]
2020-08-13 15:39:54,941 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Lily Hughes, salary=35858)]
2020-08-13 15:39:54,944 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Ella Steele, salary=40652)]
2020-08-13 15:39:54,951 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Francis McDaniel, salary=30759)]
2020-08-13 15:39:54,954 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Jay Banks, salary=42840)]
2020-08-13 15:39:54,957 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Lily Hughes, salary=35858)]
2020-08-13 15:39:54,959 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Ella Steele, salary=40652)]
2020-08-13 15:39:54,961 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=21, name=Francis McDaniel, salary=30759)]
2020-08-13 15:39:54,976 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=22, name=Jay Banks, salary=42840)]
2020-08-13 15:39:54,984 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=23, name=Lily Hughes, salary=35858)]
2020-08-13 15:39:54,986 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=24, name=Ella Steele, salary=40652)]
2020-08-13 15:39:54,988 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Daisy Robinson, salary=10859)]
2020-08-13 15:39:54,990 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Daisy Robinson, salary=10859)]
2020-08-13 15:39:54,991 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Verna Logan, salary=41319)]
2020-08-13 15:39:54,993 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Hulda Wright, salary=43736)]
2020-08-13 15:39:54,995 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Anthony Leonard, salary=55692)]
2020-08-13 15:39:54,998 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Verna Logan, salary=41319)]
2020-08-13 15:39:55,001 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Hulda Wright, salary=43736)]
2020-08-13 15:39:55,003 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Anthony Leonard, salary=55692)]
2020-08-13 15:39:55,005 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Daisy Robinson, salary=10859)]
2020-08-13 15:39:55,007 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Verna Logan, salary=41319)]
2020-08-13 15:39:55,009 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Hulda Wright, salary=43736)]
2020-08-13 15:39:55,013 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Anthony Leonard, salary=55692)]
2020-08-13 15:39:55,016 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Daisy Robinson, salary=10859)]
2020-08-13 15:39:55,018 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Verna Logan, salary=41319)]
2020-08-13 15:39:55,021 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Hulda Wright, salary=43736)]
2020-08-13 15:39:55,023 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Anthony Leonard, salary=55692)]
2020-08-13 15:39:55,025 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Daisy Robinson, salary=10859)]
2020-08-13 15:39:55,026 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Verna Logan, salary=41319)]
2020-08-13 15:39:55,028 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Hulda Wright, salary=43736)]
2020-08-13 15:39:55,034 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Anthony Leonard, salary=55692)]
2020-08-13 15:39:55,037 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Daisy Robinson, salary=10859)]
2020-08-13 15:39:55,039 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Verna Logan, salary=41319)]
2020-08-13 15:39:55,041 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Hulda Wright, salary=43736)]
2020-08-13 15:39:55,047 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Anthony Leonard, salary=55692)]
2020-08-13 15:39:55,050 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=25, name=Daisy Robinson, salary=10859)]
2020-08-13 15:39:55,053 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=26, name=Verna Logan, salary=41319)]
2020-08-13 15:39:55,055 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=27, name=Hulda Wright, salary=43736)]
2020-08-13 15:39:55,066 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=28, name=Anthony Leonard, salary=55692)]
2020-08-13 15:39:55,070 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Harriett Bell, salary=32241)]
2020-08-13 15:39:55,074 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Harriett Bell, salary=32241)]
2020-08-13 15:39:55,077 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=Charlotte Campbell, salary=434)]
2020-08-13 15:39:55,085 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Luis McKinney, salary=29610)]
2020-08-13 15:39:55,091 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Cynthia Leonard, salary=27394)]
2020-08-13 15:39:55,094 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=Charlotte Campbell, salary=434)]
2020-08-13 15:39:55,101 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Luis McKinney, salary=29610)]
2020-08-13 15:39:55,105 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Cynthia Leonard, salary=27394)]
2020-08-13 15:39:55,109 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Harriett Bell, salary=32241)]
2020-08-13 15:39:55,117 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=Charlotte Campbell, salary=434)]
2020-08-13 15:39:55,120 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Luis McKinney, salary=29610)]
2020-08-13 15:39:55,124 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Cynthia Leonard, salary=27394)]
2020-08-13 15:39:55,127 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Harriett Bell, salary=32241)]
2020-08-13 15:39:55,134 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=Charlotte Campbell, salary=434)]
2020-08-13 15:39:55,137 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Luis McKinney, salary=29610)]
2020-08-13 15:39:55,142 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Cynthia Leonard, salary=27394)]
2020-08-13 15:39:55,149 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Harriett Bell, salary=32241)]
2020-08-13 15:39:55,153 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=Charlotte Campbell, salary=434)]
2020-08-13 15:39:55,157 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Luis McKinney, salary=29610)]
2020-08-13 15:39:55,161 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Cynthia Leonard, salary=27394)]
2020-08-13 15:39:55,183 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Harriett Bell, salary=32241)]
2020-08-13 15:39:55,185 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=Charlotte Campbell, salary=434)]
2020-08-13 15:39:55,187 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Luis McKinney, salary=29610)]
2020-08-13 15:39:55,189 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Cynthia Leonard, salary=27394)]
2020-08-13 15:39:55,191 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=29, name=Harriett Bell, salary=32241)]
2020-08-13 15:39:55,193 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=30, name=Charlotte Campbell, salary=434)]
2020-08-13 15:39:55,199 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=31, name=Luis McKinney, salary=29610)]
2020-08-13 15:39:55,201 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=32, name=Cynthia Leonard, salary=27394)]
2020-08-13 15:39:55,203 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Hallie Cross, salary=57607)]
2020-08-13 15:39:55,204 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Hallie Cross, salary=57607)]
2020-08-13 15:39:55,206 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Susie Hammond, salary=54862)]
2020-08-13 15:39:55,208 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Tommy Valdez, salary=7635)]
2020-08-13 15:39:55,209 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Mina Collier, salary=56192)]
2020-08-13 15:39:55,235 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Susie Hammond, salary=54862)]
2020-08-13 15:39:55,237 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Tommy Valdez, salary=7635)]
2020-08-13 15:39:55,240 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Mina Collier, salary=56192)]
2020-08-13 15:39:55,249 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Hallie Cross, salary=57607)]
2020-08-13 15:39:55,252 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Susie Hammond, salary=54862)]
2020-08-13 15:39:55,259 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Tommy Valdez, salary=7635)]
2020-08-13 15:39:55,265 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Mina Collier, salary=56192)]
2020-08-13 15:39:55,267 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Hallie Cross, salary=57607)]
2020-08-13 15:39:55,269 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Susie Hammond, salary=54862)]
2020-08-13 15:39:55,272 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Tommy Valdez, salary=7635)]
2020-08-13 15:39:55,274 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Mina Collier, salary=56192)]
2020-08-13 15:39:55,276 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Hallie Cross, salary=57607)]
2020-08-13 15:39:55,278 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Susie Hammond, salary=54862)]
2020-08-13 15:39:55,284 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Tommy Valdez, salary=7635)]
2020-08-13 15:39:55,288 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Mina Collier, salary=56192)]
2020-08-13 15:39:55,297 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Hallie Cross, salary=57607)]
2020-08-13 15:39:55,301 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Susie Hammond, salary=54862)]
2020-08-13 15:39:55,305 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Tommy Valdez, salary=7635)]
2020-08-13 15:39:55,308 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Mina Collier, salary=56192)]
2020-08-13 15:39:55,325 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=33, name=Hallie Cross, salary=57607)]
2020-08-13 15:39:55,339 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=34, name=Susie Hammond, salary=54862)]
2020-08-13 15:39:55,342 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=35, name=Tommy Valdez, salary=7635)]
2020-08-13 15:39:55,350 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=36, name=Mina Collier, salary=56192)]
2020-08-13 15:39:55,353 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Lucy Sanders, salary=22532)]
2020-08-13 15:39:55,356 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Lucy Sanders, salary=22532)]
2020-08-13 15:39:55,360 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Addie McDaniel, salary=24663)]
2020-08-13 15:39:55,368 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Lottie Ruiz, salary=35079)]
2020-08-13 15:39:55,370 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Charlotte Roberson, salary=14391)]
2020-08-13 15:39:55,373 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Addie McDaniel, salary=24663)]
2020-08-13 15:39:55,375 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Lottie Ruiz, salary=35079)]
2020-08-13 15:39:55,377 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Charlotte Roberson, salary=14391)]
2020-08-13 15:39:55,378 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Lucy Sanders, salary=22532)]
2020-08-13 15:39:55,383 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Addie McDaniel, salary=24663)]
2020-08-13 15:39:55,385 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Lottie Ruiz, salary=35079)]
2020-08-13 15:39:55,386 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Charlotte Roberson, salary=14391)]
2020-08-13 15:39:55,397 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Lucy Sanders, salary=22532)]
2020-08-13 15:39:55,399 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Addie McDaniel, salary=24663)]
2020-08-13 15:39:55,402 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Lottie Ruiz, salary=35079)]
2020-08-13 15:39:55,404 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Charlotte Roberson, salary=14391)]
2020-08-13 15:39:55,407 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Lucy Sanders, salary=22532)]
2020-08-13 15:39:55,409 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Addie McDaniel, salary=24663)]
2020-08-13 15:39:55,412 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Lottie Ruiz, salary=35079)]
2020-08-13 15:39:55,414 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Charlotte Roberson, salary=14391)]
2020-08-13 15:39:55,418 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Lucy Sanders, salary=22532)]
2020-08-13 15:39:55,419 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Addie McDaniel, salary=24663)]
2020-08-13 15:39:55,421 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Lottie Ruiz, salary=35079)]
2020-08-13 15:39:55,423 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Charlotte Roberson, salary=14391)]
2020-08-13 15:39:55,424 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=37, name=Lucy Sanders, salary=22532)]
2020-08-13 15:39:55,427 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=38, name=Addie McDaniel, salary=24663)]
2020-08-13 15:39:55,431 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=39, name=Lottie Ruiz, salary=35079)]
2020-08-13 15:39:55,434 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=40, name=Charlotte Roberson, salary=14391)]
2020-08-13 15:39:55,436 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Beatrice Black, salary=47459)]
2020-08-13 15:39:55,437 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Beatrice Black, salary=47459)]
2020-08-13 15:39:55,440 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Albert Holt, salary=53550)]
2020-08-13 15:39:55,453 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Lenora McLaughlin, salary=9259)]
2020-08-13 15:39:55,455 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Travis Sanchez, salary=19000)]
2020-08-13 15:39:55,457 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Albert Holt, salary=53550)]
2020-08-13 15:39:55,459 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Lenora McLaughlin, salary=9259)]
2020-08-13 15:39:55,461 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Travis Sanchez, salary=19000)]
2020-08-13 15:39:55,464 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Beatrice Black, salary=47459)]
2020-08-13 15:39:55,466 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Albert Holt, salary=53550)]
2020-08-13 15:39:55,470 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Lenora McLaughlin, salary=9259)]
2020-08-13 15:39:55,473 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Travis Sanchez, salary=19000)]
2020-08-13 15:39:55,481 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Beatrice Black, salary=47459)]
2020-08-13 15:39:55,488 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Albert Holt, salary=53550)]
2020-08-13 15:39:55,491 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Lenora McLaughlin, salary=9259)]
2020-08-13 15:39:55,494 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Travis Sanchez, salary=19000)]
2020-08-13 15:39:55,501 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Beatrice Black, salary=47459)]
2020-08-13 15:39:55,503 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Albert Holt, salary=53550)]
2020-08-13 15:39:55,506 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Lenora McLaughlin, salary=9259)]
2020-08-13 15:39:55,534 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Travis Sanchez, salary=19000)]
2020-08-13 15:39:55,540 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Beatrice Black, salary=47459)]
2020-08-13 15:39:55,547 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Albert Holt, salary=53550)]
2020-08-13 15:39:55,549 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Lenora McLaughlin, salary=9259)]
2020-08-13 15:39:55,552 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Travis Sanchez, salary=19000)]
2020-08-13 15:39:55,554 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=41, name=Beatrice Black, salary=47459)]
2020-08-13 15:39:55,556 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=42, name=Albert Holt, salary=53550)]
2020-08-13 15:39:55,560 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=43, name=Lenora McLaughlin, salary=9259)]
2020-08-13 15:39:55,564 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=44, name=Travis Sanchez, salary=19000)]
2020-08-13 15:39:55,567 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Jean Castro, salary=1187)]
2020-08-13 15:39:55,596 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Jean Castro, salary=1187)]
2020-08-13 15:39:55,604 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Oscar Griffin, salary=35474)]
2020-08-13 15:39:55,606 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Jordan Mann, salary=7702)]
2020-08-13 15:39:55,609 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Virgie Hamilton, salary=12305)]
2020-08-13 15:39:55,612 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Oscar Griffin, salary=35474)]
2020-08-13 15:39:55,615 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Jordan Mann, salary=7702)]
2020-08-13 15:39:55,620 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Virgie Hamilton, salary=12305)]
2020-08-13 15:39:55,627 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Jean Castro, salary=1187)]
2020-08-13 15:39:55,632 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Oscar Griffin, salary=35474)]
2020-08-13 15:39:55,635 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Jordan Mann, salary=7702)]
2020-08-13 15:39:55,637 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Virgie Hamilton, salary=12305)]
2020-08-13 15:39:55,639 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Jean Castro, salary=1187)]
2020-08-13 15:39:55,641 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Oscar Griffin, salary=35474)]
2020-08-13 15:39:55,651 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Jordan Mann, salary=7702)]
2020-08-13 15:39:55,654 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Virgie Hamilton, salary=12305)]
2020-08-13 15:39:55,656 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Jean Castro, salary=1187)]
2020-08-13 15:39:55,677 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Oscar Griffin, salary=35474)]
2020-08-13 15:39:55,679 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Jordan Mann, salary=7702)]
2020-08-13 15:39:55,684 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Virgie Hamilton, salary=12305)]
2020-08-13 15:39:55,686 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Jean Castro, salary=1187)]
2020-08-13 15:39:55,687 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Oscar Griffin, salary=35474)]
2020-08-13 15:39:55,689 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Jordan Mann, salary=7702)]
2020-08-13 15:39:55,691 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Virgie Hamilton, salary=12305)]
2020-08-13 15:39:55,709 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=45, name=Jean Castro, salary=1187)]
2020-08-13 15:39:55,711 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=46, name=Oscar Griffin, salary=35474)]
2020-08-13 15:39:55,724 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=47, name=Jordan Mann, salary=7702)]
2020-08-13 15:39:55,728 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=48, name=Virgie Hamilton, salary=12305)]
2020-08-13 15:39:55,737 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Amelia King, salary=52264)]
2020-08-13 15:39:55,741 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Amelia King, salary=52264)]
2020-08-13 15:39:55,744 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Julia Burns, salary=27572)]
2020-08-13 15:39:55,751 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Herman Joseph, salary=48687)]
2020-08-13 15:39:55,755 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Gregory Owen, salary=50226)]
2020-08-13 15:39:55,759 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Julia Burns, salary=27572)]
2020-08-13 15:39:55,761 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Herman Joseph, salary=48687)]
2020-08-13 15:39:55,772 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Gregory Owen, salary=50226)]
2020-08-13 15:39:55,775 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Amelia King, salary=52264)]
2020-08-13 15:39:55,778 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Julia Burns, salary=27572)]
2020-08-13 15:39:55,785 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Herman Joseph, salary=48687)]
2020-08-13 15:39:55,788 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Gregory Owen, salary=50226)]
2020-08-13 15:39:55,794 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Amelia King, salary=52264)]
2020-08-13 15:39:55,806 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Julia Burns, salary=27572)]
2020-08-13 15:39:55,817 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Herman Joseph, salary=48687)]
2020-08-13 15:39:55,820 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Gregory Owen, salary=50226)]
2020-08-13 15:39:55,822 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Amelia King, salary=52264)]
2020-08-13 15:39:55,826 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Julia Burns, salary=27572)]
2020-08-13 15:39:55,832 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Herman Joseph, salary=48687)]
2020-08-13 15:39:55,835 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Gregory Owen, salary=50226)]
2020-08-13 15:39:55,838 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Amelia King, salary=52264)]
2020-08-13 15:39:55,839 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Julia Burns, salary=27572)]
2020-08-13 15:39:55,842 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Herman Joseph, salary=48687)]
2020-08-13 15:39:55,843 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Gregory Owen, salary=50226)]
2020-08-13 15:39:55,845 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=49, name=Amelia King, salary=52264)]
2020-08-13 15:39:55,847 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=50, name=Julia Burns, salary=27572)]
2020-08-13 15:39:55,850 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=51, name=Herman Joseph, salary=48687)]
2020-08-13 15:39:55,852 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=52, name=Gregory Owen, salary=50226)]
2020-08-13 15:39:55,854 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Sophia Chavez, salary=1404)]
2020-08-13 15:39:55,856 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Sophia Chavez, salary=1404)]
2020-08-13 15:39:55,859 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Dollie Garza, salary=59114)]
2020-08-13 15:39:55,886 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Ruby Yates, salary=8949)]
2020-08-13 15:39:55,888 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Lela Scott, salary=16440)]
2020-08-13 15:39:55,890 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Dollie Garza, salary=59114)]
2020-08-13 15:39:55,893 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Ruby Yates, salary=8949)]
2020-08-13 15:39:55,895 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Lela Scott, salary=16440)]
2020-08-13 15:39:55,904 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Sophia Chavez, salary=1404)]
2020-08-13 15:39:55,906 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Dollie Garza, salary=59114)]
2020-08-13 15:39:55,908 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Ruby Yates, salary=8949)]
2020-08-13 15:39:55,910 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Lela Scott, salary=16440)]
2020-08-13 15:39:55,912 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Sophia Chavez, salary=1404)]
2020-08-13 15:39:55,917 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Dollie Garza, salary=59114)]
2020-08-13 15:39:55,918 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Ruby Yates, salary=8949)]
2020-08-13 15:39:55,920 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Lela Scott, salary=16440)]
2020-08-13 15:39:55,922 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Sophia Chavez, salary=1404)]
2020-08-13 15:39:55,924 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Dollie Garza, salary=59114)]
2020-08-13 15:39:55,926 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Ruby Yates, salary=8949)]
2020-08-13 15:39:55,927 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Lela Scott, salary=16440)]
2020-08-13 15:39:55,939 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Sophia Chavez, salary=1404)]
2020-08-13 15:39:55,941 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Dollie Garza, salary=59114)]
2020-08-13 15:39:55,942 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Ruby Yates, salary=8949)]
2020-08-13 15:39:55,951 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Lela Scott, salary=16440)]
2020-08-13 15:39:55,954 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=53, name=Sophia Chavez, salary=1404)]
2020-08-13 15:39:55,956 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=54, name=Dollie Garza, salary=59114)]
2020-08-13 15:39:55,957 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=55, name=Ruby Yates, salary=8949)]
2020-08-13 15:39:55,959 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=56, name=Lela Scott, salary=16440)]
2020-08-13 15:39:55,962 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Oscar Lane, salary=25693)]
2020-08-13 15:39:55,970 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Oscar Lane, salary=25693)]
2020-08-13 15:39:55,972 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Emilie Pope, salary=56991)]
2020-08-13 15:39:55,974 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Paul Alexander, salary=4801)]
2020-08-13 15:39:55,976 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Eric Huff, salary=56648)]
2020-08-13 15:39:55,982 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Emilie Pope, salary=56991)]
2020-08-13 15:39:55,986 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Paul Alexander, salary=4801)]
2020-08-13 15:39:55,991 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Eric Huff, salary=56648)]
2020-08-13 15:39:55,999 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Oscar Lane, salary=25693)]
2020-08-13 15:39:56,006 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Emilie Pope, salary=56991)]
2020-08-13 15:39:56,009 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Paul Alexander, salary=4801)]
2020-08-13 15:39:56,015 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Eric Huff, salary=56648)]
2020-08-13 15:39:56,019 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Oscar Lane, salary=25693)]
2020-08-13 15:39:56,022 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Emilie Pope, salary=56991)]
2020-08-13 15:39:56,024 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Paul Alexander, salary=4801)]
2020-08-13 15:39:56,026 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Eric Huff, salary=56648)]
2020-08-13 15:39:56,036 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Oscar Lane, salary=25693)]
2020-08-13 15:39:56,039 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Emilie Pope, salary=56991)]
2020-08-13 15:39:56,042 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Paul Alexander, salary=4801)]
2020-08-13 15:39:56,044 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Eric Huff, salary=56648)]
2020-08-13 15:39:56,052 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Oscar Lane, salary=25693)]
2020-08-13 15:39:56,058 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Emilie Pope, salary=56991)]
2020-08-13 15:39:56,060 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Paul Alexander, salary=4801)]
2020-08-13 15:39:56,069 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Eric Huff, salary=56648)]
2020-08-13 15:39:56,072 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=57, name=Oscar Lane, salary=25693)]
2020-08-13 15:39:56,075 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=58, name=Emilie Pope, salary=56991)]
2020-08-13 15:39:56,077 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=59, name=Paul Alexander, salary=4801)]
2020-08-13 15:39:56,079 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=60, name=Eric Huff, salary=56648)]
2020-08-13 15:39:56,085 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Barry Kennedy, salary=37118)]
2020-08-13 15:39:56,088 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Barry Kennedy, salary=37118)]
2020-08-13 15:39:56,090 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Willie Huff, salary=54776)]
2020-08-13 15:39:56,093 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Victoria Gardner, salary=7860)]
2020-08-13 15:39:56,096 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Clayton Moody, salary=53790)]
2020-08-13 15:39:56,101 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Willie Huff, salary=54776)]
2020-08-13 15:39:56,102 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Victoria Gardner, salary=7860)]
2020-08-13 15:39:56,104 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Clayton Moody, salary=53790)]
2020-08-13 15:39:56,106 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Barry Kennedy, salary=37118)]
2020-08-13 15:39:56,108 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Willie Huff, salary=54776)]
2020-08-13 15:39:56,109 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Victoria Gardner, salary=7860)]
2020-08-13 15:39:56,114 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Clayton Moody, salary=53790)]
2020-08-13 15:39:56,118 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Barry Kennedy, salary=37118)]
2020-08-13 15:39:56,120 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Willie Huff, salary=54776)]
2020-08-13 15:39:56,125 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Victoria Gardner, salary=7860)]
2020-08-13 15:39:56,130 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Clayton Moody, salary=53790)]
2020-08-13 15:39:56,132 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Barry Kennedy, salary=37118)]
2020-08-13 15:39:56,134 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Willie Huff, salary=54776)]
2020-08-13 15:39:56,137 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Victoria Gardner, salary=7860)]
2020-08-13 15:39:56,139 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Clayton Moody, salary=53790)]
2020-08-13 15:39:56,141 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Barry Kennedy, salary=37118)]
2020-08-13 15:39:56,146 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Willie Huff, salary=54776)]
2020-08-13 15:39:56,151 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Victoria Gardner, salary=7860)]
2020-08-13 15:39:56,153 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Clayton Moody, salary=53790)]
2020-08-13 15:39:56,158 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=61, name=Barry Kennedy, salary=37118)]
2020-08-13 15:39:56,166 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=62, name=Willie Huff, salary=54776)]
2020-08-13 15:39:56,167 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=63, name=Victoria Gardner, salary=7860)]
2020-08-13 15:39:56,169 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=64, name=Clayton Moody, salary=53790)]
2020-08-13 15:39:56,171 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Alexander King, salary=43045)]
2020-08-13 15:39:56,172 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Alexander King, salary=43045)]
2020-08-13 15:39:56,177 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Jim Chambers, salary=29064)]
2020-08-13 15:39:56,181 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Jane Bryan, salary=23706)]
2020-08-13 15:39:56,185 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Robert Coleman, salary=32684)]
2020-08-13 15:39:56,188 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Jim Chambers, salary=29064)]
2020-08-13 15:39:56,191 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Jane Bryan, salary=23706)]
2020-08-13 15:39:56,194 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Robert Coleman, salary=32684)]
2020-08-13 15:39:56,200 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Alexander King, salary=43045)]
2020-08-13 15:39:56,204 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Jim Chambers, salary=29064)]
2020-08-13 15:39:56,208 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Jane Bryan, salary=23706)]
2020-08-13 15:39:56,210 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Robert Coleman, salary=32684)]
2020-08-13 15:39:56,223 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Alexander King, salary=43045)]
2020-08-13 15:39:56,226 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Jim Chambers, salary=29064)]
2020-08-13 15:39:56,234 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Jane Bryan, salary=23706)]
2020-08-13 15:39:56,238 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Robert Coleman, salary=32684)]
2020-08-13 15:39:56,240 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Alexander King, salary=43045)]
2020-08-13 15:39:56,242 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Jim Chambers, salary=29064)]
2020-08-13 15:39:56,244 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Jane Bryan, salary=23706)]
2020-08-13 15:39:56,252 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Robert Coleman, salary=32684)]
2020-08-13 15:39:56,254 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Alexander King, salary=43045)]
2020-08-13 15:39:56,257 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Jim Chambers, salary=29064)]
2020-08-13 15:39:56,259 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Jane Bryan, salary=23706)]
2020-08-13 15:39:56,261 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Robert Coleman, salary=32684)]
2020-08-13 15:39:56,269 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=65, name=Alexander King, salary=43045)]
2020-08-13 15:39:56,272 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=66, name=Jim Chambers, salary=29064)]
2020-08-13 15:39:56,274 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=67, name=Jane Bryan, salary=23706)]
2020-08-13 15:39:56,276 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=68, name=Robert Coleman, salary=32684)]
2020-08-13 15:39:56,284 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Miguel Owen, salary=1497)]
2020-08-13 15:39:56,286 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Miguel Owen, salary=1497)]
2020-08-13 15:39:56,289 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Alta Cox, salary=59153)]
2020-08-13 15:39:56,291 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Estelle Hicks, salary=36514)]
2020-08-13 15:39:56,294 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Cynthia Hines, salary=29897)]
2020-08-13 15:39:56,299 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Alta Cox, salary=59153)]
2020-08-13 15:39:56,300 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Estelle Hicks, salary=36514)]
2020-08-13 15:39:56,303 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Cynthia Hines, salary=29897)]
2020-08-13 15:39:56,305 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Miguel Owen, salary=1497)]
2020-08-13 15:39:56,307 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Alta Cox, salary=59153)]
2020-08-13 15:39:56,309 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Estelle Hicks, salary=36514)]
2020-08-13 15:39:56,318 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Cynthia Hines, salary=29897)]
2020-08-13 15:39:56,321 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Miguel Owen, salary=1497)]
2020-08-13 15:39:56,323 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Alta Cox, salary=59153)]
2020-08-13 15:39:56,326 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Estelle Hicks, salary=36514)]
2020-08-13 15:39:56,332 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Cynthia Hines, salary=29897)]
2020-08-13 15:39:56,334 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Miguel Owen, salary=1497)]
2020-08-13 15:39:56,335 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Alta Cox, salary=59153)]
2020-08-13 15:39:56,337 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Estelle Hicks, salary=36514)]
2020-08-13 15:39:56,338 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Cynthia Hines, salary=29897)]
2020-08-13 15:39:56,340 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Miguel Owen, salary=1497)]
2020-08-13 15:39:56,342 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Alta Cox, salary=59153)]
2020-08-13 15:39:56,344 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Estelle Hicks, salary=36514)]
2020-08-13 15:39:56,348 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Cynthia Hines, salary=29897)]
2020-08-13 15:39:56,350 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=69, name=Miguel Owen, salary=1497)]
2020-08-13 15:39:56,352 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=70, name=Alta Cox, salary=59153)]
2020-08-13 15:39:56,354 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=71, name=Estelle Hicks, salary=36514)]
2020-08-13 15:39:56,356 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Cynthia Hines, salary=29897)]
2020-08-13 15:39:56,359 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Derek Freeman, salary=16316)]
2020-08-13 15:39:56,363 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Derek Freeman, salary=16316)]
2020-08-13 15:39:56,371 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Ina Lambert, salary=38485)]
2020-08-13 15:39:56,373 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Derek Diaz, salary=52136)]
2020-08-13 15:39:56,385 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Verna Ward, salary=37249)]
2020-08-13 15:39:56,388 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Ina Lambert, salary=38485)]
2020-08-13 15:39:56,391 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Derek Diaz, salary=52136)]
2020-08-13 15:39:56,394 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Verna Ward, salary=37249)]
2020-08-13 15:39:56,404 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Derek Freeman, salary=16316)]
2020-08-13 15:39:56,407 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Ina Lambert, salary=38485)]
2020-08-13 15:39:56,409 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Derek Diaz, salary=52136)]
2020-08-13 15:39:56,411 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Verna Ward, salary=37249)]
2020-08-13 15:39:56,419 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Derek Freeman, salary=16316)]
2020-08-13 15:39:56,421 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Ina Lambert, salary=38485)]
2020-08-13 15:39:56,423 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Derek Diaz, salary=52136)]
2020-08-13 15:39:56,425 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Verna Ward, salary=37249)]
2020-08-13 15:39:56,427 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Derek Freeman, salary=16316)]
2020-08-13 15:39:56,435 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Ina Lambert, salary=38485)]
2020-08-13 15:39:56,441 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Derek Diaz, salary=52136)]
2020-08-13 15:39:56,444 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Verna Ward, salary=37249)]
2020-08-13 15:39:56,453 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Derek Freeman, salary=16316)]
2020-08-13 15:39:56,456 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Ina Lambert, salary=38485)]
2020-08-13 15:39:56,459 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Derek Diaz, salary=52136)]
2020-08-13 15:39:56,461 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Verna Ward, salary=37249)]
2020-08-13 15:39:56,469 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=73, name=Derek Freeman, salary=16316)]
2020-08-13 15:39:56,472 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=74, name=Ina Lambert, salary=38485)]
2020-08-13 15:39:56,475 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=75, name=Derek Diaz, salary=52136)]
2020-08-13 15:39:56,477 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=76, name=Verna Ward, salary=37249)]
2020-08-13 15:39:56,479 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Alan Lawrence, salary=12900)]
2020-08-13 15:39:56,485 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Alan Lawrence, salary=12900)]
2020-08-13 15:39:56,486 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Caleb Townsend, salary=29935)]
2020-08-13 15:39:56,488 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Maud Powell, salary=28523)]
2020-08-13 15:39:56,490 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Alejandro Bowman, salary=23289)]
2020-08-13 15:39:56,492 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Caleb Townsend, salary=29935)]
2020-08-13 15:39:56,493 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Maud Powell, salary=28523)]
2020-08-13 15:39:56,503 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Alejandro Bowman, salary=23289)]
2020-08-13 15:39:56,505 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Alan Lawrence, salary=12900)]
2020-08-13 15:39:56,507 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Caleb Townsend, salary=29935)]
2020-08-13 15:39:56,511 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Maud Powell, salary=28523)]
2020-08-13 15:39:56,516 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Alejandro Bowman, salary=23289)]
2020-08-13 15:39:56,518 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Alan Lawrence, salary=12900)]
2020-08-13 15:39:56,520 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Caleb Townsend, salary=29935)]
2020-08-13 15:39:56,522 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Maud Powell, salary=28523)]
2020-08-13 15:39:56,525 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Alejandro Bowman, salary=23289)]
2020-08-13 15:39:56,527 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Alan Lawrence, salary=12900)]
2020-08-13 15:39:56,529 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Caleb Townsend, salary=29935)]
2020-08-13 15:39:56,533 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Maud Powell, salary=28523)]
2020-08-13 15:39:56,536 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Alejandro Bowman, salary=23289)]
2020-08-13 15:39:56,537 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Alan Lawrence, salary=12900)]
2020-08-13 15:39:56,539 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Caleb Townsend, salary=29935)]
2020-08-13 15:39:56,543 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Maud Powell, salary=28523)]
2020-08-13 15:39:56,545 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Alejandro Bowman, salary=23289)]
2020-08-13 15:39:56,569 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Alan Lawrence, salary=12900)]
2020-08-13 15:39:56,571 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=78, name=Caleb Townsend, salary=29935)]
2020-08-13 15:39:56,573 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=79, name=Maud Powell, salary=28523)]
2020-08-13 15:39:56,575 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Katharine Meyer, salary=17090)]
2020-08-13 15:39:56,577 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Katharine Meyer, salary=17090)]
2020-08-13 15:39:56,580 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Marion Garcia, salary=41361)]
2020-08-13 15:39:56,581 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Gary Perez, salary=35256)]
2020-08-13 15:39:56,584 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Mamie Garner, salary=30041)]
2020-08-13 15:39:56,586 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Marion Garcia, salary=41361)]
2020-08-13 15:39:56,588 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Gary Perez, salary=35256)]
2020-08-13 15:39:56,590 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Alejandro Bowman, salary=23289)]
2020-08-13 15:39:56,592 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Mamie Garner, salary=30041)]
2020-08-13 15:39:56,593 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Katharine Meyer, salary=17090)]
2020-08-13 15:39:56,595 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Marion Garcia, salary=41361)]
2020-08-13 15:39:56,598 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Gary Perez, salary=35256)]
2020-08-13 15:39:56,601 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Mamie Garner, salary=30041)]
2020-08-13 15:39:56,602 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Katharine Meyer, salary=17090)]
2020-08-13 15:39:56,605 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Marion Garcia, salary=41361)]
2020-08-13 15:39:56,607 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Gary Perez, salary=35256)]
2020-08-13 15:39:56,609 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Mamie Garner, salary=30041)]
2020-08-13 15:39:56,621 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Katharine Meyer, salary=17090)]
2020-08-13 15:39:56,623 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Marion Garcia, salary=41361)]
2020-08-13 15:39:56,627 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Gary Perez, salary=35256)]
2020-08-13 15:39:56,631 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Mamie Garner, salary=30041)]
2020-08-13 15:39:56,634 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Katharine Meyer, salary=17090)]
2020-08-13 15:39:56,636 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Marion Garcia, salary=41361)]
2020-08-13 15:39:56,641 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Gary Perez, salary=35256)]
2020-08-13 15:39:56,643 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Mamie Garner, salary=30041)]
2020-08-13 15:39:56,647 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=81, name=Katharine Meyer, salary=17090)]
2020-08-13 15:39:56,650 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=82, name=Marion Garcia, salary=41361)]
2020-08-13 15:39:56,654 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=83, name=Gary Perez, salary=35256)]
2020-08-13 15:39:56,657 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Randy Ferguson, salary=42622)]
2020-08-13 15:39:56,662 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Randy Ferguson, salary=42622)]
2020-08-13 15:39:56,667 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Gussie Walton, salary=44450)]
2020-08-13 15:39:56,672 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Sara Castillo, salary=52670)]
2020-08-13 15:39:56,676 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Virgie Norman, salary=7906)]
2020-08-13 15:39:56,678 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Gussie Walton, salary=44450)]
2020-08-13 15:39:56,681 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Sara Castillo, salary=52670)]
2020-08-13 15:39:56,683 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=84, name=Mamie Garner, salary=30041)]
2020-08-13 15:39:56,694 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Virgie Norman, salary=7906)]
2020-08-13 15:39:56,701 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Randy Ferguson, salary=42622)]
2020-08-13 15:39:56,704 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Gussie Walton, salary=44450)]
2020-08-13 15:39:56,707 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Sara Castillo, salary=52670)]
2020-08-13 15:39:56,711 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Virgie Norman, salary=7906)]
2020-08-13 15:39:56,718 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Randy Ferguson, salary=42622)]
2020-08-13 15:39:56,722 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Gussie Walton, salary=44450)]
2020-08-13 15:39:56,724 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Sara Castillo, salary=52670)]
2020-08-13 15:39:56,726 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Virgie Norman, salary=7906)]
2020-08-13 15:39:56,728 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Randy Ferguson, salary=42622)]
2020-08-13 15:39:56,732 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Gussie Walton, salary=44450)]
2020-08-13 15:39:56,735 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Sara Castillo, salary=52670)]
2020-08-13 15:39:56,738 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Virgie Norman, salary=7906)]
2020-08-13 15:39:56,739 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Randy Ferguson, salary=42622)]
2020-08-13 15:39:56,741 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Gussie Walton, salary=44450)]
2020-08-13 15:39:56,747 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Sara Castillo, salary=52670)]
2020-08-13 15:39:56,749 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Virgie Norman, salary=7906)]
2020-08-13 15:39:56,751 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=85, name=Randy Ferguson, salary=42622)]
2020-08-13 15:39:56,754 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=86, name=Gussie Walton, salary=44450)]
2020-08-13 15:39:56,756 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=87, name=Sara Castillo, salary=52670)]
2020-08-13 15:39:56,758 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Marvin Vaughn, salary=12889)]
2020-08-13 15:39:56,759 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Marvin Vaughn, salary=12889)]
2020-08-13 15:39:56,768 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=James Brewer, salary=38121)]
2020-08-13 15:39:56,770 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Mable Hale, salary=13575)]
2020-08-13 15:39:56,772 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Jeff Stokes, salary=51945)]
2020-08-13 15:39:56,774 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=James Brewer, salary=38121)]
2020-08-13 15:39:56,777 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Mable Hale, salary=13575)]
2020-08-13 15:39:56,784 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=88, name=Virgie Norman, salary=7906)]
2020-08-13 15:39:56,787 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Jeff Stokes, salary=51945)]
2020-08-13 15:39:56,789 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Marvin Vaughn, salary=12889)]
2020-08-13 15:39:56,790 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=James Brewer, salary=38121)]
2020-08-13 15:39:56,792 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Mable Hale, salary=13575)]
2020-08-13 15:39:56,795 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Jeff Stokes, salary=51945)]
2020-08-13 15:39:56,799 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Marvin Vaughn, salary=12889)]
2020-08-13 15:39:56,803 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=James Brewer, salary=38121)]
2020-08-13 15:39:56,817 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Mable Hale, salary=13575)]
2020-08-13 15:39:56,827 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Jeff Stokes, salary=51945)]
2020-08-13 15:39:56,833 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Marvin Vaughn, salary=12889)]
2020-08-13 15:39:56,838 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=James Brewer, salary=38121)]
2020-08-13 15:39:56,841 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Mable Hale, salary=13575)]
2020-08-13 15:39:56,847 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Jeff Stokes, salary=51945)]
2020-08-13 15:39:56,855 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Marvin Vaughn, salary=12889)]
2020-08-13 15:39:56,859 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=James Brewer, salary=38121)]
2020-08-13 15:39:56,875 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Mable Hale, salary=13575)]
2020-08-13 15:39:56,879 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Jeff Stokes, salary=51945)]
2020-08-13 15:39:56,889 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=89, name=Marvin Vaughn, salary=12889)]
2020-08-13 15:39:56,891 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=90, name=James Brewer, salary=38121)]
2020-08-13 15:39:56,894 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Mable Hale, salary=13575)]
2020-08-13 15:39:56,901 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bess Howell, salary=33153)]
2020-08-13 15:39:56,904 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bess Howell, salary=33153)]
2020-08-13 15:39:56,910 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Adeline Brock, salary=46421)]
2020-08-13 15:39:56,918 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Alberta Franklin, salary=8893)]
2020-08-13 15:39:56,922 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Chase Palmer, salary=57118)]
2020-08-13 15:39:56,925 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Adeline Brock, salary=46421)]
2020-08-13 15:39:56,927 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Alberta Franklin, salary=8893)]
2020-08-13 15:39:56,938 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=92, name=Jeff Stokes, salary=51945)]
2020-08-13 15:39:56,939 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Chase Palmer, salary=57118)]
2020-08-13 15:39:56,942 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bess Howell, salary=33153)]
2020-08-13 15:39:56,950 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Adeline Brock, salary=46421)]
2020-08-13 15:39:56,952 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Alberta Franklin, salary=8893)]
2020-08-13 15:39:56,955 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Chase Palmer, salary=57118)]
2020-08-13 15:39:56,956 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bess Howell, salary=33153)]
2020-08-13 15:39:56,958 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Adeline Brock, salary=46421)]
2020-08-13 15:39:56,960 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Alberta Franklin, salary=8893)]
2020-08-13 15:39:56,968 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Chase Palmer, salary=57118)]
2020-08-13 15:39:56,970 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bess Howell, salary=33153)]
2020-08-13 15:39:56,973 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Adeline Brock, salary=46421)]
2020-08-13 15:39:56,975 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Alberta Franklin, salary=8893)]
2020-08-13 15:39:56,978 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Chase Palmer, salary=57118)]
2020-08-13 15:39:56,983 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bess Howell, salary=33153)]
2020-08-13 15:39:56,984 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Adeline Brock, salary=46421)]
2020-08-13 15:39:56,987 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Alberta Franklin, salary=8893)]
2020-08-13 15:39:56,988 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Chase Palmer, salary=57118)]
2020-08-13 15:39:56,990 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bess Howell, salary=33153)]
2020-08-13 15:39:56,992 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=94, name=Adeline Brock, salary=46421)]
2020-08-13 15:39:57,000 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=95, name=Alberta Franklin, salary=8893)]
2020-08-13 15:39:57,003 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Rhoda Torres, salary=13166)]
2020-08-13 15:39:57,005 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Rhoda Torres, salary=13166)]
2020-08-13 15:39:57,008 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Danny Sullivan, salary=16641)]
2020-08-13 15:39:57,010 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Rebecca Hart, salary=15834)]
2020-08-13 15:39:57,015 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Jim Osborne, salary=32928)]
2020-08-13 15:39:57,017 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Danny Sullivan, salary=16641)]
2020-08-13 15:39:57,020 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Rebecca Hart, salary=15834)]
2020-08-13 15:39:57,021 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=96, name=Chase Palmer, salary=57118)]
2020-08-13 15:39:57,023 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Jim Osborne, salary=32928)]
2020-08-13 15:39:57,027 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Rhoda Torres, salary=13166)]
2020-08-13 15:39:57,028 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Danny Sullivan, salary=16641)]
2020-08-13 15:39:57,035 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Rebecca Hart, salary=15834)]
2020-08-13 15:39:57,037 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Jim Osborne, salary=32928)]
2020-08-13 15:39:57,040 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Rhoda Torres, salary=13166)]
2020-08-13 15:39:57,043 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Danny Sullivan, salary=16641)]
2020-08-13 15:39:57,055 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Rebecca Hart, salary=15834)]
2020-08-13 15:39:57,059 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Jim Osborne, salary=32928)]
2020-08-13 15:39:57,068 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Rhoda Torres, salary=13166)]
2020-08-13 15:39:57,074 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Danny Sullivan, salary=16641)]
2020-08-13 15:39:57,077 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Rebecca Hart, salary=15834)]
2020-08-13 15:39:57,089 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Jim Osborne, salary=32928)]
2020-08-13 15:39:57,094 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Rhoda Torres, salary=13166)]
2020-08-13 15:39:57,102 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Danny Sullivan, salary=16641)]
2020-08-13 15:39:57,104 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Rebecca Hart, salary=15834)]
2020-08-13 15:39:57,106 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Jim Osborne, salary=32928)]
2020-08-13 15:39:57,108 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=97, name=Rhoda Torres, salary=13166)]
2020-08-13 15:39:57,110 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=98, name=Danny Sullivan, salary=16641)]
2020-08-13 15:39:57,118 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=99, name=Rebecca Hart, salary=15834)]
2020-08-13 15:39:57,132 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=100, name=Jim Osborne, salary=32928)]
2020-08-13 15:39:57,169 INFO org.springframework.batch.core.step.AbstractStep [task-6] Step: [myStep:partition3] executed in 2s928ms
2020-08-13 15:39:57,173 INFO org.springframework.batch.core.step.AbstractStep [task-7] Step: [myStep:partition5] executed in 2s934ms
2020-08-13 15:39:57,176 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition1] executed in 2s936ms
2020-08-13 15:39:57,182 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition2] executed in 2s944ms
2020-08-13 15:39:57,185 INFO org.springframework.batch.core.step.AbstractStep [task-5] Step: [myStep:partition0] executed in 2s945ms
2020-08-13 15:39:57,187 INFO org.springframework.batch.core.step.AbstractStep [task-3] Step: [myStep:partition4] executed in 2s947ms
2020-08-13 15:39:57,187 INFO org.springframework.batch.core.step.AbstractStep [task-4] Step: [myStep:partition6] executed in 2s947ms
2020-08-13 15:39:57,190 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 2s968ms
2020-08-13 15:39:57,193 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 2s972ms
2020-08-13 15:39:57,197 INFO org.springframework.boot.devtools.autoconfigure.ConditionEvaluationDeltaLoggingListener [restartedMain] Condition evaluation unchanged
2020-08-13 15:40:14,822 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [Thread-194] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 15:40:15,037 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 11004 (D:\Spring-Batch\batch\target\classes started by Mani kandan in D:\Spring-Batch\batch)
2020-08-13 15:40:15,037 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 15:40:15,481 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 15:40:15,654 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 15:40:15,660 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 0.694 seconds (JVM running for 121.505)
2020-08-13 15:40:15,662 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 15:40:15,662 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 15:40:15,662 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 15:40:15,674 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 15:40:15,683 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 15:40:15,687 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 15:40:15,736 INFO com.example.batch.BatchJobConfig$2 [task-5] [Employee(id=1, name=Bill Douglas, salary=13649)]
2020-08-13 15:40:15,738 INFO com.example.batch.BatchJobConfig$2 [task-2] [Employee(id=2, name=Jennie Gutierrez, salary=10767)]
2020-08-13 15:40:15,739 INFO com.example.batch.BatchJobConfig$2 [task-4] [Employee(id=3, name=Tillie McCormick, salary=278)]
2020-08-13 15:40:15,740 INFO com.example.batch.BatchJobConfig$2 [task-3] [Employee(id=4, name=Lilly Reed, salary=16681)]
2020-08-13 15:40:15,751 INFO com.example.batch.BatchJobConfig$2 [task-5] [Employee(id=5, name=Ollie Shaw, salary=19563)]
2020-08-13 15:40:15,753 INFO com.example.batch.BatchJobConfig$2 [task-5] [Employee(id=6, name=Bobby Sanchez, salary=17889)]
2020-08-13 15:40:15,754 INFO com.example.batch.BatchJobConfig$2 [task-5] [Employee(id=7, name=Mattie Waters, salary=24742)]
2020-08-13 15:40:15,756 INFO com.example.batch.BatchJobConfig$2 [task-3] [Employee(id=8, name=Tyler Copeland, salary=51879)]
2020-08-13 15:40:15,758 INFO com.example.batch.BatchJobConfig$2 [task-2] [Employee(id=9, name=Loretta Caldwell, salary=47707)]
2020-08-13 15:40:15,760 INFO com.example.batch.BatchJobConfig$2 [task-4] [Employee(id=10, name=Mario French, salary=53328)]
2020-08-13 15:40:15,762 INFO com.example.batch.BatchJobConfig$2 [task-5] [Employee(id=11, name=Dominic Graham, salary=18542)]
2020-08-13 15:40:15,763 INFO com.example.batch.BatchJobConfig$2 [task-3] [Employee(id=12, name=Callie Barber, salary=235)]
2020-08-13 15:40:15,765 INFO com.example.batch.BatchJobConfig$2 [task-2] [Employee(id=13, name=Elmer Poole, salary=46394)]
2020-08-13 15:40:15,767 INFO com.example.batch.BatchJobConfig$2 [task-4] [Employee(id=14, name=Luella Reyes, salary=42103)]
2020-08-13 15:40:15,768 INFO com.example.batch.BatchJobConfig$2 [task-5] [Employee(id=15, name=Donald Drake, salary=36583)]
2020-08-13 15:40:15,772 INFO com.example.batch.BatchJobConfig$2 [task-3] [Employee(id=16, name=Mario Franklin, salary=55598)]
2020-08-13 15:40:15,775 INFO com.example.batch.BatchJobConfig$2 [task-2] [Employee(id=17, name=Marion Tate, salary=18321)]
2020-08-13 15:40:15,778 INFO com.example.batch.BatchJobConfig$2 [task-4] [Employee(id=18, name=Jorge Dawson, salary=14285)]
2020-08-13 15:40:15,781 INFO com.example.batch.BatchJobConfig$2 [task-5] [Employee(id=19, name=Josephine Banks, salary=47158)]
2020-08-13 15:40:15,783 INFO com.example.batch.BatchJobConfig$2 [task-3] [Employee(id=20, name=Scott Rodriquez, salary=19029)]
2020-08-13 15:40:15,784 INFO com.example.batch.BatchJobConfig$2 [task-2] [Employee(id=21, name=Francis McDaniel, salary=30759)]
2020-08-13 15:40:15,786 INFO com.example.batch.BatchJobConfig$2 [task-4] [Employee(id=22, name=Jay Banks, salary=42840)]
2020-08-13 15:40:15,788 INFO com.example.batch.BatchJobConfig$2 [task-5] [Employee(id=23, name=Lily Hughes, salary=35858)]
2020-08-13 15:40:15,790 INFO com.example.batch.BatchJobConfig$2 [task-3] [Employee(id=24, name=Ella Steele, salary=40652)]
2020-08-13 15:40:15,792 INFO com.example.batch.BatchJobConfig$2 [task-2] [Employee(id=25, name=Daisy Robinson, salary=10859)]
2020-08-13 15:40:15,794 INFO com.example.batch.BatchJobConfig$2 [task-2] [Employee(id=26, name=Verna Logan, salary=41319)]
2020-08-13 15:40:15,796 INFO com.example.batch.BatchJobConfig$2 [task-5] [Employee(id=27, name=Hulda Wright, salary=43736)]
2020-08-13 15:40:15,797 INFO com.example.batch.BatchJobConfig$2 [task-3] [Employee(id=28, name=Anthony Leonard, salary=55692)]
2020-08-13 15:40:15,799 INFO com.example.batch.BatchJobConfig$2 [task-4] [Employee(id=29, name=Harriett Bell, salary=32241)]
2020-08-13 15:40:15,801 INFO com.example.batch.BatchJobConfig$2 [task-2] [Employee(id=30, name=Charlotte Campbell, salary=434)]
2020-08-13 15:40:15,802 INFO com.example.batch.BatchJobConfig$2 [task-5] [Employee(id=31, name=Luis McKinney, salary=29610)]
2020-08-13 15:40:15,804 INFO com.example.batch.BatchJobConfig$2 [task-3] [Employee(id=32, name=Cynthia Leonard, salary=27394)]
2020-08-13 15:40:15,806 INFO com.example.batch.BatchJobConfig$2 [task-4] [Employee(id=33, name=Hallie Cross, salary=57607)]
2020-08-13 15:40:15,810 INFO com.example.batch.BatchJobConfig$2 [task-2] [Employee(id=34, name=Susie Hammond, salary=54862)]
2020-08-13 15:40:15,812 INFO com.example.batch.BatchJobConfig$2 [task-5] [Employee(id=35, name=Tommy Valdez, salary=7635)]
2020-08-13 15:40:15,814 INFO com.example.batch.BatchJobConfig$2 [task-3] [Employee(id=36, name=Mina Collier, salary=56192)]
2020-08-13 15:40:15,816 INFO com.example.batch.BatchJobConfig$2 [task-4] [Employee(id=37, name=Lucy Sanders, salary=22532)]
2020-08-13 15:40:15,818 INFO com.example.batch.BatchJobConfig$2 [task-2] [Employee(id=38, name=Addie McDaniel, salary=24663)]
2020-08-13 15:40:15,819 INFO com.example.batch.BatchJobConfig$2 [task-5] [Employee(id=39, name=Lottie Ruiz, salary=35079)]
2020-08-13 15:40:15,821 INFO com.example.batch.BatchJobConfig$2 [task-3] [Employee(id=40, name=Charlotte Roberson, salary=14391)]
2020-08-13 15:40:15,823 INFO com.example.batch.BatchJobConfig$2 [task-4] [Employee(id=42, name=Albert Holt, salary=53550)]
2020-08-13 15:40:15,825 INFO com.example.batch.BatchJobConfig$2 [task-2] [Employee(id=43, name=Lenora McLaughlin, salary=9259)]
2020-08-13 15:40:15,827 INFO com.example.batch.BatchJobConfig$2 [task-5] [Employee(id=44, name=Travis Sanchez, salary=19000)]
2020-08-13 15:40:15,828 INFO com.example.batch.BatchJobConfig$2 [task-3] [Employee(id=45, name=Jean Castro, salary=1187)]
2020-08-13 15:40:15,829 INFO com.example.batch.BatchJobConfig$2 [task-6] [Employee(id=41, name=Beatrice Black, salary=47459)]
2020-08-13 15:40:15,830 INFO com.example.batch.BatchJobConfig$2 [task-4] [Employee(id=46, name=Oscar Griffin, salary=35474)]
2020-08-13 15:40:15,832 INFO com.example.batch.BatchJobConfig$2 [task-2] [Employee(id=47, name=Jordan Mann, salary=7702)]
2020-08-13 15:40:15,834 INFO com.example.batch.BatchJobConfig$2 [task-5] [Employee(id=48, name=Virgie Hamilton, salary=12305)]
2020-08-13 15:40:15,835 INFO com.example.batch.BatchJobConfig$2 [task-3] [Employee(id=49, name=Amelia King, salary=52264)]
2020-08-13 15:40:15,838 INFO com.example.batch.BatchJobConfig$2 [task-4] [Employee(id=50, name=Julia Burns, salary=27572)]
2020-08-13 15:40:15,840 INFO com.example.batch.BatchJobConfig$2 [task-2] [Employee(id=51, name=Herman Joseph, salary=48687)]
2020-08-13 15:40:15,842 INFO com.example.batch.BatchJobConfig$2 [task-5] [Employee(id=52, name=Gregory Owen, salary=50226)]
2020-08-13 15:40:15,842 INFO com.example.batch.BatchJobConfig$2 [task-3] [Employee(id=53, name=Sophia Chavez, salary=1404)]
2020-08-13 15:40:15,845 INFO com.example.batch.BatchJobConfig$2 [task-3] [Employee(id=54, name=Dollie Garza, salary=59114)]
2020-08-13 15:40:15,845 INFO com.example.batch.BatchJobConfig$2 [task-2] [Employee(id=55, name=Ruby Yates, salary=8949)]
2020-08-13 15:40:15,847 INFO com.example.batch.BatchJobConfig$2 [task-5] [Employee(id=56, name=Lela Scott, salary=16440)]
2020-08-13 15:40:15,848 INFO com.example.batch.BatchJobConfig$2 [task-4] [Employee(id=57, name=Oscar Lane, salary=25693)]
2020-08-13 15:40:15,850 INFO com.example.batch.BatchJobConfig$2 [task-6] [Employee(id=58, name=Emilie Pope, salary=56991)]
2020-08-13 15:40:15,850 INFO com.example.batch.BatchJobConfig$2 [task-3] [Employee(id=59, name=Paul Alexander, salary=4801)]
2020-08-13 15:40:15,853 INFO com.example.batch.BatchJobConfig$2 [task-2] [Employee(id=60, name=Eric Huff, salary=56648)]
2020-08-13 15:40:15,855 INFO com.example.batch.BatchJobConfig$2 [task-2] [Employee(id=61, name=Barry Kennedy, salary=37118)]
2020-08-13 15:40:15,856 INFO com.example.batch.BatchJobConfig$2 [task-2] [Employee(id=62, name=Willie Huff, salary=54776)]
2020-08-13 15:40:15,857 INFO com.example.batch.BatchJobConfig$2 [task-4] [Employee(id=63, name=Victoria Gardner, salary=7860)]
2020-08-13 15:40:15,860 INFO com.example.batch.BatchJobConfig$2 [task-3] [Employee(id=64, name=Clayton Moody, salary=53790)]
2020-08-13 15:40:15,862 INFO com.example.batch.BatchJobConfig$2 [task-3] [Employee(id=65, name=Alexander King, salary=43045)]
2020-08-13 15:40:15,867 INFO com.example.batch.BatchJobConfig$2 [task-2] [Employee(id=66, name=Jim Chambers, salary=29064)]
2020-08-13 15:40:15,869 INFO com.example.batch.BatchJobConfig$2 [task-6] [Employee(id=67, name=Jane Bryan, salary=23706)]
2020-08-13 15:40:15,869 INFO com.example.batch.BatchJobConfig$2 [task-4] [Employee(id=68, name=Robert Coleman, salary=32684)]
2020-08-13 15:40:15,872 INFO com.example.batch.BatchJobConfig$2 [task-5] [Employee(id=69, name=Miguel Owen, salary=1497)]
2020-08-13 15:40:15,873 INFO com.example.batch.BatchJobConfig$2 [task-2] [Employee(id=70, name=Alta Cox, salary=59153)]
2020-08-13 15:40:15,877 INFO com.example.batch.BatchJobConfig$2 [task-7] [Employee(id=71, name=Estelle Hicks, salary=36514)]
2020-08-13 15:40:15,882 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=72, name=Cynthia Hines, salary=29897)]
2020-08-13 15:40:15,884 INFO com.example.batch.BatchJobConfig$2 [task-7] [Employee(id=73, name=Derek Freeman, salary=16316)]
2020-08-13 15:40:15,885 INFO com.example.batch.BatchJobConfig$2 [task-6] [Employee(id=74, name=Ina Lambert, salary=38485)]
2020-08-13 15:40:15,887 INFO com.example.batch.BatchJobConfig$2 [task-3] [Employee(id=75, name=Derek Diaz, salary=52136)]
2020-08-13 15:40:15,888 INFO com.example.batch.BatchJobConfig$2 [task-7] [Employee(id=76, name=Verna Ward, salary=37249)]
2020-08-13 15:40:15,889 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=77, name=Alan Lawrence, salary=12900)]
2020-08-13 15:40:15,891 INFO com.example.batch.BatchJobConfig$2 [task-3] [Employee(id=78, name=Caleb Townsend, salary=29935)]
2020-08-13 15:40:15,896 INFO com.example.batch.BatchJobConfig$2 [task-6] [Employee(id=79, name=Maud Powell, salary=28523)]
2020-08-13 15:40:15,896 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=80, name=Alejandro Bowman, salary=23289)]
2020-08-13 15:40:15,898 INFO com.example.batch.BatchJobConfig$2 [task-6] [Employee(id=81, name=Katharine Meyer, salary=17090)]
2020-08-13 15:40:15,899 INFO com.example.batch.BatchJobConfig$2 [task-3] [Employee(id=82, name=Marion Garcia, salary=41361)]
2020-08-13 15:40:15,900 INFO com.example.batch.BatchJobConfig$2 [task-4] [Employee(id=83, name=Gary Perez, salary=35256)]
2020-08-13 15:40:15,902 INFO com.example.batch.BatchJobConfig$2 [task-2] [Employee(id=84, name=Mamie Garner, salary=30041)]
2020-08-13 15:40:15,903 INFO com.example.batch.BatchJobConfig$2 [task-3] [Employee(id=85, name=Randy Ferguson, salary=42622)]
2020-08-13 15:40:15,904 INFO com.example.batch.BatchJobConfig$2 [task-7] [Employee(id=86, name=Gussie Walton, salary=44450)]
2020-08-13 15:40:15,905 INFO com.example.batch.BatchJobConfig$2 [task-2] [Employee(id=87, name=Sara Castillo, salary=52670)]
2020-08-13 15:40:15,907 INFO com.example.batch.BatchJobConfig$2 [task-4] [Employee(id=88, name=Virgie Norman, salary=7906)]
2020-08-13 15:40:15,908 INFO com.example.batch.BatchJobConfig$2 [task-7] [Employee(id=89, name=Marvin Vaughn, salary=12889)]
2020-08-13 15:40:15,909 INFO com.example.batch.BatchJobConfig$2 [task-4] [Employee(id=90, name=James Brewer, salary=38121)]
2020-08-13 15:40:15,911 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=91, name=Mable Hale, salary=13575)]
2020-08-13 15:40:15,912 INFO com.example.batch.BatchJobConfig$2 [task-7] [Employee(id=92, name=Jeff Stokes, salary=51945)]
2020-08-13 15:40:15,913 INFO com.example.batch.BatchJobConfig$2 [task-8] [Employee(id=93, name=Bess Howell, salary=33153)]
2020-08-13 15:40:15,914 INFO com.example.batch.BatchJobConfig$2 [task-3] [Employee(id=94, name=Adeline Brock, salary=46421)]
2020-08-13 15:40:15,916 INFO com.example.batch.BatchJobConfig$2 [task-7] [Employee(id=95, name=Alberta Franklin, salary=8893)]
2020-08-13 15:40:15,917 INFO com.example.batch.BatchJobConfig$2 [task-3] [Employee(id=97, name=Rhoda Torres, salary=13166)]
2020-08-13 15:40:15,917 INFO com.example.batch.BatchJobConfig$2 [task-7] [Employee(id=98, name=Danny Sullivan, salary=16641)]
2020-08-13 15:40:15,917 INFO com.example.batch.BatchJobConfig$2 [task-5] [Employee(id=96, name=Chase Palmer, salary=57118)]
2020-08-13 15:40:15,918 INFO com.example.batch.BatchJobConfig$2 [task-3] [Employee(id=99, name=Rebecca Hart, salary=15834)]
2020-08-13 15:40:15,919 INFO com.example.batch.BatchJobConfig$2 [task-7] [Employee(id=100, name=Jim Osborne, salary=32928)]
2020-08-13 15:40:15,926 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition0] executed in 227ms
2020-08-13 15:40:15,928 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 240ms
2020-08-13 15:40:15,930 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 244ms
2020-08-13 15:40:15,932 INFO org.springframework.boot.devtools.autoconfigure.ConditionEvaluationDeltaLoggingListener [restartedMain] Condition evaluation unchanged
2020-08-13 15:40:38,228 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [Thread-289] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 15:40:38,418 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 11004 (D:\Spring-Batch\batch\target\classes started by Mani kandan in D:\Spring-Batch\batch)
2020-08-13 15:40:38,419 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 15:40:38,813 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 15:40:38,913 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 15:40:38,927 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 0.559 seconds (JVM running for 144.772)
2020-08-13 15:40:38,929 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 15:40:38,930 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 15:40:38,931 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 15:40:38,943 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 15:40:38,947 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 15:40:38,951 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 15:40:38,996 INFO com.example.batch.BatchJobConfig$2 [task-5] [Employee(id=3, name=Tillie McCormick, salary=278), Employee(id=20, name=Scott Rodriquez, salary=19029), Employee(id=21, name=Francis McDaniel, salary=30759), Employee(id=22, name=Jay Banks, salary=42840), Employee(id=23, name=Lily Hughes, salary=35858), Employee(id=24, name=Ella Steele, salary=40652), Employee(id=25, name=Daisy Robinson, salary=10859), Employee(id=26, name=Verna Logan, salary=41319), Employee(id=27, name=Hulda Wright, salary=43736), Employee(id=28, name=Anthony Leonard, salary=55692), Employee(id=29, name=Harriett Bell, salary=32241), Employee(id=30, name=Charlotte Campbell, salary=434), Employee(id=31, name=Luis McKinney, salary=29610), Employee(id=32, name=Cynthia Leonard, salary=27394), Employee(id=33, name=Hallie Cross, salary=57607)]
2020-08-13 15:40:38,998 INFO com.example.batch.BatchJobConfig$2 [task-2] [Employee(id=2, name=Jennie Gutierrez, salary=10767), Employee(id=5, name=Ollie Shaw, salary=19563), Employee(id=6, name=Bobby Sanchez, salary=17889), Employee(id=12, name=Callie Barber, salary=235), Employee(id=17, name=Marion Tate, salary=18321), Employee(id=19, name=Josephine Banks, salary=47158), Employee(id=38, name=Addie McDaniel, salary=24663), Employee(id=39, name=Lottie Ruiz, salary=35079), Employee(id=40, name=Charlotte Roberson, salary=14391), Employee(id=41, name=Beatrice Black, salary=47459), Employee(id=42, name=Albert Holt, salary=53550), Employee(id=43, name=Lenora McLaughlin, salary=9259), Employee(id=44, name=Travis Sanchez, salary=19000), Employee(id=45, name=Jean Castro, salary=1187), Employee(id=46, name=Oscar Griffin, salary=35474)]
2020-08-13 15:40:38,997 INFO com.example.batch.BatchJobConfig$2 [task-4] [Employee(id=1, name=Bill Douglas, salary=13649), Employee(id=7, name=Mattie Waters, salary=24742), Employee(id=8, name=Tyler Copeland, salary=51879), Employee(id=9, name=Loretta Caldwell, salary=47707), Employee(id=10, name=Mario French, salary=53328), Employee(id=11, name=Dominic Graham, salary=18542), Employee(id=13, name=Elmer Poole, salary=46394), Employee(id=14, name=Luella Reyes, salary=42103), Employee(id=15, name=Donald Drake, salary=36583), Employee(id=16, name=Mario Franklin, salary=55598), Employee(id=18, name=Jorge Dawson, salary=14285), Employee(id=34, name=Susie Hammond, salary=54862), Employee(id=35, name=Tommy Valdez, salary=7635), Employee(id=36, name=Mina Collier, salary=56192), Employee(id=37, name=Lucy Sanders, salary=22532)]
2020-08-13 15:40:39,008 INFO com.example.batch.BatchJobConfig$2 [task-3] [Employee(id=4, name=Lilly Reed, salary=16681), Employee(id=47, name=Jordan Mann, salary=7702), Employee(id=48, name=Virgie Hamilton, salary=12305), Employee(id=49, name=Amelia King, salary=52264), Employee(id=50, name=Julia Burns, salary=27572), Employee(id=51, name=Herman Joseph, salary=48687), Employee(id=52, name=Gregory Owen, salary=50226), Employee(id=53, name=Sophia Chavez, salary=1404), Employee(id=54, name=Dollie Garza, salary=59114), Employee(id=55, name=Ruby Yates, salary=8949), Employee(id=56, name=Lela Scott, salary=16440), Employee(id=57, name=Oscar Lane, salary=25693), Employee(id=58, name=Emilie Pope, salary=56991), Employee(id=59, name=Paul Alexander, salary=4801), Employee(id=60, name=Eric Huff, salary=56648)]
2020-08-13 15:40:39,013 INFO com.example.batch.BatchJobConfig$2 [task-2] [Employee(id=61, name=Barry Kennedy, salary=37118), Employee(id=62, name=Willie Huff, salary=54776), Employee(id=63, name=Victoria Gardner, salary=7860), Employee(id=64, name=Clayton Moody, salary=53790), Employee(id=65, name=Alexander King, salary=43045), Employee(id=66, name=Jim Chambers, salary=29064), Employee(id=67, name=Jane Bryan, salary=23706), Employee(id=68, name=Robert Coleman, salary=32684), Employee(id=69, name=Miguel Owen, salary=1497), Employee(id=70, name=Alta Cox, salary=59153), Employee(id=71, name=Estelle Hicks, salary=36514), Employee(id=72, name=Cynthia Hines, salary=29897), Employee(id=73, name=Derek Freeman, salary=16316), Employee(id=74, name=Ina Lambert, salary=38485), Employee(id=75, name=Derek Diaz, salary=52136)]
2020-08-13 15:40:39,016 INFO com.example.batch.BatchJobConfig$2 [task-4] [Employee(id=76, name=Verna Ward, salary=37249), Employee(id=77, name=Alan Lawrence, salary=12900), Employee(id=78, name=Caleb Townsend, salary=29935), Employee(id=79, name=Maud Powell, salary=28523), Employee(id=80, name=Alejandro Bowman, salary=23289), Employee(id=81, name=Katharine Meyer, salary=17090), Employee(id=82, name=Marion Garcia, salary=41361), Employee(id=83, name=Gary Perez, salary=35256), Employee(id=84, name=Mamie Garner, salary=30041), Employee(id=85, name=Randy Ferguson, salary=42622), Employee(id=86, name=Gussie Walton, salary=44450), Employee(id=87, name=Sara Castillo, salary=52670), Employee(id=88, name=Virgie Norman, salary=7906), Employee(id=89, name=Marvin Vaughn, salary=12889), Employee(id=90, name=James Brewer, salary=38121)]
2020-08-13 15:40:39,020 INFO com.example.batch.BatchJobConfig$2 [task-5] [Employee(id=91, name=Mable Hale, salary=13575), Employee(id=92, name=Jeff Stokes, salary=51945), Employee(id=93, name=Bess Howell, salary=33153), Employee(id=94, name=Adeline Brock, salary=46421), Employee(id=95, name=Alberta Franklin, salary=8893), Employee(id=96, name=Chase Palmer, salary=57118), Employee(id=97, name=Rhoda Torres, salary=13166), Employee(id=98, name=Danny Sullivan, salary=16641), Employee(id=99, name=Rebecca Hart, salary=15834), Employee(id=100, name=Jim Osborne, salary=32928)]
2020-08-13 15:40:39,029 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition0] executed in 71ms
2020-08-13 15:40:39,031 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 80ms
2020-08-13 15:40:39,033 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 84ms
2020-08-13 15:40:39,035 INFO org.springframework.boot.devtools.autoconfigure.ConditionEvaluationDeltaLoggingListener [restartedMain] Condition evaluation unchanged
2020-08-13 15:41:07,531 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [Thread-384] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 15:41:07,737 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 11004 (D:\Spring-Batch\batch\target\classes started by Mani kandan in D:\Spring-Batch\batch)
2020-08-13 15:41:07,738 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 15:41:08,062 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 15:41:08,189 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 15:41:08,199 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 0.522 seconds (JVM running for 174.043)
2020-08-13 15:41:08,202 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 15:41:08,202 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 15:41:08,203 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 15:41:08,211 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 15:41:08,221 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 15:41:08,228 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 15:41:08,273 INFO com.example.batch.BatchJobConfig$2 [task-4] 15
2020-08-13 15:41:08,281 INFO com.example.batch.BatchJobConfig$2 [task-3] 15
2020-08-13 15:41:08,285 INFO com.example.batch.BatchJobConfig$2 [task-2] 15
2020-08-13 15:41:08,288 INFO com.example.batch.BatchJobConfig$2 [task-5] 15
2020-08-13 15:41:08,295 INFO com.example.batch.BatchJobConfig$2 [task-3] 15
2020-08-13 15:41:08,295 INFO com.example.batch.BatchJobConfig$2 [task-6] 15
2020-08-13 15:41:08,303 INFO com.example.batch.BatchJobConfig$2 [task-2] 4
2020-08-13 15:41:08,304 INFO com.example.batch.BatchJobConfig$2 [task-4] 6
2020-08-13 15:41:08,309 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition0] executed in 69ms
2020-08-13 15:41:08,310 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 82ms
2020-08-13 15:41:08,313 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 90ms
2020-08-13 15:41:08,315 INFO org.springframework.boot.devtools.autoconfigure.ConditionEvaluationDeltaLoggingListener [restartedMain] Condition evaluation unchanged
2020-08-13 15:42:08,316 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [SpringContextShutdownHook] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 16:03:36,953 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 23160 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 16:03:36,958 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 16:03:37,052 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 16:03:38,544 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 16:03:38,569 WARN org.springframework.context.support.AbstractApplicationContext [restartedMain] Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myJob' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
2020-08-13 16:03:38,570 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 16:03:38,593 INFO org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener [restartedMain] 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-08-13 16:03:38,606 ERROR org.springframework.boot.SpringApplication [restartedMain] Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myJob' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:655)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:483)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:893)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:879)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:551)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.example.batch.DemoApplication.main(DemoApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:650)
	... 24 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:655)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:483)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.resolveBeanReference(ConfigurationClassEnhancer.java:362)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:334)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$bd238d8f.myStepPartitioner(<generated>)
	at com.example.batch.BatchJobConfig.myJob(BatchJobConfig.java:42)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$bd238d8f.CGLIB$myJob$5(<generated>)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$bd238d8f$$FastClassBySpringCGLIB$$529a996c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$bd238d8f.myJob(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 25 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:650)
	... 48 common frames omitted
Caused by: java.lang.NullPointerException: null
	at com.example.batch.MultiResourcePartitioner.<init>(MultiResourcePartitioner.java:29)
	at com.example.batch.BatchJobConfig.partitioner(BatchJobConfig.java:53)
	at com.example.batch.BatchJobConfig.myStepPartitioner(BatchJobConfig.java:47)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$bd238d8f.CGLIB$myStepPartitioner$3(<generated>)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$bd238d8f$$FastClassBySpringCGLIB$$529a996c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$bd238d8f.myStepPartitioner(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 49 common frames omitted
2020-08-13 16:03:48,756 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 23628 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 16:03:48,761 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 16:03:48,854 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 16:03:50,352 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 16:03:50,373 WARN org.springframework.context.support.AbstractApplicationContext [restartedMain] Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myJob' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
2020-08-13 16:03:50,374 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 16:03:50,388 INFO org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener [restartedMain] 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-08-13 16:03:50,395 ERROR org.springframework.boot.SpringApplication [restartedMain] Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myJob' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:655)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:483)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:893)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:879)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:551)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.example.batch.DemoApplication.main(DemoApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:650)
	... 24 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:655)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:483)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.resolveBeanReference(ConfigurationClassEnhancer.java:362)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:334)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$e37545f8.myStepPartitioner(<generated>)
	at com.example.batch.BatchJobConfig.myJob(BatchJobConfig.java:42)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$e37545f8.CGLIB$myJob$3(<generated>)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$e37545f8$$FastClassBySpringCGLIB$$72ceb62e.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$e37545f8.myJob(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 25 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:650)
	... 48 common frames omitted
Caused by: java.lang.NullPointerException: null
	at com.example.batch.MultiResourcePartitioner.<init>(MultiResourcePartitioner.java:29)
	at com.example.batch.BatchJobConfig.partitioner(BatchJobConfig.java:53)
	at com.example.batch.BatchJobConfig.myStepPartitioner(BatchJobConfig.java:47)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$e37545f8.CGLIB$myStepPartitioner$6(<generated>)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$e37545f8$$FastClassBySpringCGLIB$$72ceb62e.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$e37545f8.myStepPartitioner(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 49 common frames omitted
2020-08-13 16:06:17,312 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 23808 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 16:06:17,319 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 16:06:17,424 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 16:06:18,889 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 16:06:18,907 WARN org.springframework.context.support.AbstractApplicationContext [restartedMain] Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myJob' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
2020-08-13 16:06:18,908 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 16:06:18,923 INFO org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener [restartedMain] 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-08-13 16:06:18,930 ERROR org.springframework.boot.SpringApplication [restartedMain] Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myJob' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:655)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:483)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:893)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:879)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:551)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.example.batch.DemoApplication.main(DemoApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:650)
	... 24 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:655)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:483)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.resolveBeanReference(ConfigurationClassEnhancer.java:362)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:334)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$c4425ea2.myStepPartitioner(<generated>)
	at com.example.batch.BatchJobConfig.myJob(BatchJobConfig.java:42)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$c4425ea2.CGLIB$myJob$4(<generated>)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$c4425ea2$$FastClassBySpringCGLIB$$d2aaef3f.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$c4425ea2.myJob(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 25 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:650)
	... 48 common frames omitted
Caused by: java.lang.NullPointerException: null
	at com.example.batch.MultiResourcePartitioner.<init>(MultiResourcePartitioner.java:29)
	at com.example.batch.BatchJobConfig.partitioner(BatchJobConfig.java:53)
	at com.example.batch.BatchJobConfig.myStepPartitioner(BatchJobConfig.java:47)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$c4425ea2.CGLIB$myStepPartitioner$3(<generated>)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$c4425ea2$$FastClassBySpringCGLIB$$d2aaef3f.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$c4425ea2.myStepPartitioner(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 49 common frames omitted
2020-08-13 16:07:08,640 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 8640 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 16:07:08,648 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 16:07:08,756 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 16:07:10,434 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 16:07:10,453 WARN org.springframework.context.support.AbstractApplicationContext [restartedMain] Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myJob' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
2020-08-13 16:07:10,454 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 16:07:10,469 INFO org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener [restartedMain] 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-08-13 16:07:10,480 ERROR org.springframework.boot.SpringApplication [restartedMain] Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myJob' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:655)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:483)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:893)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:879)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:551)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.example.batch.DemoApplication.main(DemoApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:650)
	... 24 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:655)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:483)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.resolveBeanReference(ConfigurationClassEnhancer.java:362)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:334)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$73c8446a.myStepPartitioner(<generated>)
	at com.example.batch.BatchJobConfig.myJob(BatchJobConfig.java:42)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$73c8446a.CGLIB$myJob$6(<generated>)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$73c8446a$$FastClassBySpringCGLIB$$13981e8b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$73c8446a.myJob(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 25 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:650)
	... 48 common frames omitted
Caused by: java.lang.NullPointerException: null
	at com.example.batch.MultiResourcePartitioner.<init>(MultiResourcePartitioner.java:29)
	at com.example.batch.BatchJobConfig.partitioner(BatchJobConfig.java:53)
	at com.example.batch.BatchJobConfig.myStepPartitioner(BatchJobConfig.java:47)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$73c8446a.CGLIB$myStepPartitioner$3(<generated>)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$73c8446a$$FastClassBySpringCGLIB$$13981e8b.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$73c8446a.myStepPartitioner(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 49 common frames omitted
2020-08-13 16:10:06,404 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 10884 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 16:10:06,412 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 16:10:06,509 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 16:10:07,970 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 16:10:07,988 WARN org.springframework.context.support.AbstractApplicationContext [restartedMain] Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myJob' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
2020-08-13 16:10:07,988 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 16:10:08,005 INFO org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener [restartedMain] 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-08-13 16:10:08,015 ERROR org.springframework.boot.SpringApplication [restartedMain] Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myJob' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:655)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:483)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:893)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:879)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:551)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.example.batch.DemoApplication.main(DemoApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:650)
	... 24 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:655)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:483)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.resolveBeanReference(ConfigurationClassEnhancer.java:362)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:334)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$cce4bea3.myStepPartitioner(<generated>)
	at com.example.batch.BatchJobConfig.myJob(BatchJobConfig.java:42)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$cce4bea3.CGLIB$myJob$4(<generated>)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$cce4bea3$$FastClassBySpringCGLIB$$dcbdea53.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$cce4bea3.myJob(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 25 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:650)
	... 48 common frames omitted
Caused by: java.lang.NullPointerException: null
	at com.example.batch.MultiResourcePartitioner.<init>(MultiResourcePartitioner.java:34)
	at com.example.batch.BatchJobConfig.partitioner(BatchJobConfig.java:53)
	at com.example.batch.BatchJobConfig.myStepPartitioner(BatchJobConfig.java:47)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$cce4bea3.CGLIB$myStepPartitioner$3(<generated>)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$cce4bea3$$FastClassBySpringCGLIB$$dcbdea53.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$cce4bea3.myStepPartitioner(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 49 common frames omitted
2020-08-13 16:10:50,837 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 10456 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 16:10:50,847 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 16:10:51,010 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 16:10:53,329 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 16:10:53,362 INFO com.example.batch.MultiResourcePartitioner [restartedMain] Manik classpath*:*.csv
2020-08-13 16:10:53,371 WARN org.springframework.context.support.AbstractApplicationContext [restartedMain] Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myJob' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
2020-08-13 16:10:53,372 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 16:10:53,404 INFO org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener [restartedMain] 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-08-13 16:10:53,413 ERROR org.springframework.boot.SpringApplication [restartedMain] Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myJob' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:655)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:483)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:893)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:879)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:551)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.example.batch.DemoApplication.main(DemoApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:650)
	... 24 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:655)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:483)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.resolveBeanReference(ConfigurationClassEnhancer.java:362)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:334)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$fff68d77.myStepPartitioner(<generated>)
	at com.example.batch.BatchJobConfig.myJob(BatchJobConfig.java:42)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$fff68d77.CGLIB$myJob$4(<generated>)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$fff68d77$$FastClassBySpringCGLIB$$b4d209eb.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$fff68d77.myJob(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 25 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:650)
	... 48 common frames omitted
Caused by: java.lang.NullPointerException: null
	at com.example.batch.MultiResourcePartitioner.<init>(MultiResourcePartitioner.java:34)
	at com.example.batch.BatchJobConfig.partitioner(BatchJobConfig.java:53)
	at com.example.batch.BatchJobConfig.myStepPartitioner(BatchJobConfig.java:47)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$fff68d77.CGLIB$myStepPartitioner$6(<generated>)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$fff68d77$$FastClassBySpringCGLIB$$b4d209eb.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$fff68d77.myStepPartitioner(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 49 common frames omitted
2020-08-13 16:11:20,939 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 22732 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 16:11:20,949 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 16:11:21,104 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 16:11:23,089 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 16:11:23,110 INFO com.example.batch.MultiResourcePartitioner [restartedMain] Manik classpath*:*.csv
2020-08-13 16:11:23,117 WARN org.springframework.context.support.AbstractApplicationContext [restartedMain] Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myJob' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
2020-08-13 16:11:23,118 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 16:11:23,137 INFO org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener [restartedMain] 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-08-13 16:11:23,149 ERROR org.springframework.boot.SpringApplication [restartedMain] Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myJob' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:655)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:483)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:893)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:879)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:551)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.example.batch.DemoApplication.main(DemoApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:650)
	... 24 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:655)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:483)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.resolveBeanReference(ConfigurationClassEnhancer.java:362)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:334)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$3accd602.myStepPartitioner(<generated>)
	at com.example.batch.BatchJobConfig.myJob(BatchJobConfig.java:42)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$3accd602.CGLIB$myJob$2(<generated>)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$3accd602$$FastClassBySpringCGLIB$$f7e5dbd1.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$3accd602.myJob(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 25 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:650)
	... 48 common frames omitted
Caused by: java.lang.NullPointerException: null
	at com.example.batch.MultiResourcePartitioner.<init>(MultiResourcePartitioner.java:34)
	at com.example.batch.BatchJobConfig.partitioner(BatchJobConfig.java:53)
	at com.example.batch.BatchJobConfig.myStepPartitioner(BatchJobConfig.java:47)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$3accd602.CGLIB$myStepPartitioner$6(<generated>)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$3accd602$$FastClassBySpringCGLIB$$f7e5dbd1.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$3accd602.myStepPartitioner(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 49 common frames omitted
2020-08-13 16:12:44,296 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 16828 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 16:12:44,303 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 16:12:44,402 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 16:12:45,806 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 16:12:45,824 INFO com.example.batch.MultiResourcePartitioner [restartedMain] Manik classpath*:*.csv
2020-08-13 16:12:45,830 WARN org.springframework.context.support.AbstractApplicationContext [restartedMain] Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myJob' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
2020-08-13 16:12:45,830 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 16:12:45,843 INFO org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener [restartedMain] 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-08-13 16:12:45,853 ERROR org.springframework.boot.SpringApplication [restartedMain] Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myJob' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:655)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:483)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:893)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:879)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:551)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.example.batch.DemoApplication.main(DemoApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:650)
	... 24 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:655)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:483)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.resolveBeanReference(ConfigurationClassEnhancer.java:362)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:334)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$c9ae5870.myStepPartitioner(<generated>)
	at com.example.batch.BatchJobConfig.myJob(BatchJobConfig.java:42)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$c9ae5870.CGLIB$myJob$4(<generated>)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$c9ae5870$$FastClassBySpringCGLIB$$2ac22c25.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$c9ae5870.myJob(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 25 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:650)
	... 48 common frames omitted
Caused by: java.lang.NullPointerException: null
	at com.example.batch.MultiResourcePartitioner.<init>(MultiResourcePartitioner.java:34)
	at com.example.batch.BatchJobConfig.partitioner(BatchJobConfig.java:53)
	at com.example.batch.BatchJobConfig.myStepPartitioner(BatchJobConfig.java:47)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$c9ae5870.CGLIB$myStepPartitioner$3(<generated>)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$c9ae5870$$FastClassBySpringCGLIB$$2ac22c25.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$c9ae5870.myStepPartitioner(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 49 common frames omitted
2020-08-13 16:13:32,975 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 15044 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 16:13:32,980 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 16:13:33,083 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 16:13:34,615 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 16:13:34,637 INFO com.example.batch.MultiResourcePartitioner [restartedMain] Manik classpath:*.csv
2020-08-13 16:13:34,641 WARN org.springframework.context.support.AbstractApplicationContext [restartedMain] Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myJob' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
2020-08-13 16:13:34,642 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 16:13:34,659 INFO org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener [restartedMain] 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-08-13 16:13:34,670 ERROR org.springframework.boot.SpringApplication [restartedMain] Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myJob' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:655)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:483)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:893)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:879)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:551)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.example.batch.DemoApplication.main(DemoApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:650)
	... 24 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:655)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:483)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.resolveBeanReference(ConfigurationClassEnhancer.java:362)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:334)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$297d6d04.myStepPartitioner(<generated>)
	at com.example.batch.BatchJobConfig.myJob(BatchJobConfig.java:42)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$297d6d04.CGLIB$myJob$4(<generated>)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$297d6d04$$FastClassBySpringCGLIB$$f00c95.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$297d6d04.myJob(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 25 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:650)
	... 48 common frames omitted
Caused by: java.lang.NullPointerException: null
	at com.example.batch.MultiResourcePartitioner.<init>(MultiResourcePartitioner.java:34)
	at com.example.batch.BatchJobConfig.partitioner(BatchJobConfig.java:53)
	at com.example.batch.BatchJobConfig.myStepPartitioner(BatchJobConfig.java:47)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$297d6d04.CGLIB$myStepPartitioner$3(<generated>)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$297d6d04$$FastClassBySpringCGLIB$$f00c95.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$297d6d04.myStepPartitioner(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 49 common frames omitted
2020-08-13 16:17:11,498 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 24316 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 16:17:11,504 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 16:17:11,609 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 16:17:13,202 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 16:17:13,236 INFO com.example.batch.MultiResourcePartitioner [restartedMain] Manik D:/Spring-Batch/batch/*.csv
2020-08-13 16:17:13,239 WARN org.springframework.context.support.AbstractApplicationContext [restartedMain] Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myJob' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
2020-08-13 16:17:13,240 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 16:17:13,266 INFO org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener [restartedMain] 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-08-13 16:17:13,281 ERROR org.springframework.boot.SpringApplication [restartedMain] Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myJob' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:655)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:483)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:893)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:879)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:551)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.example.batch.DemoApplication.main(DemoApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:650)
	... 24 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:655)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:483)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.resolveBeanReference(ConfigurationClassEnhancer.java:362)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:334)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$23e010c5.myStepPartitioner(<generated>)
	at com.example.batch.BatchJobConfig.myJob(BatchJobConfig.java:42)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$23e010c5.CGLIB$myJob$5(<generated>)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$23e010c5$$FastClassBySpringCGLIB$$f29cc8c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$23e010c5.myJob(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 25 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:650)
	... 48 common frames omitted
Caused by: java.lang.NullPointerException: null
	at com.example.batch.MultiResourcePartitioner.<init>(MultiResourcePartitioner.java:33)
	at com.example.batch.BatchJobConfig.partitioner(BatchJobConfig.java:53)
	at com.example.batch.BatchJobConfig.myStepPartitioner(BatchJobConfig.java:47)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$23e010c5.CGLIB$myStepPartitioner$3(<generated>)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$23e010c5$$FastClassBySpringCGLIB$$f29cc8c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$23e010c5.myStepPartitioner(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 49 common frames omitted
2020-08-13 16:36:40,358 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 6476 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 16:36:40,365 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 16:36:40,461 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 16:36:41,837 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 16:36:41,868 INFO com.example.batch.MultiResourcePartitioner [restartedMain] Manik D:/Spring-Batch/batch/*.csv
2020-08-13 16:36:41,873 WARN org.springframework.context.support.AbstractApplicationContext [restartedMain] Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myJob' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.RuntimeException: I/O problems when resolving the input file pattern.
2020-08-13 16:36:41,875 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 16:36:41,897 INFO org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener [restartedMain] 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-08-13 16:36:41,905 ERROR org.springframework.boot.SpringApplication [restartedMain] Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myJob' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.RuntimeException: I/O problems when resolving the input file pattern.
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:655)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:483)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:893)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:879)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:551)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.example.batch.DemoApplication.main(DemoApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.RuntimeException: I/O problems when resolving the input file pattern.
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:650)
	... 24 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.RuntimeException: I/O problems when resolving the input file pattern.
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:655)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:483)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.resolveBeanReference(ConfigurationClassEnhancer.java:362)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:334)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$8697aa0f.myStepPartitioner(<generated>)
	at com.example.batch.BatchJobConfig.myJob(BatchJobConfig.java:42)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$8697aa0f.CGLIB$myJob$3(<generated>)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$8697aa0f$$FastClassBySpringCGLIB$$d2877881.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$8697aa0f.myJob(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 25 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.RuntimeException: I/O problems when resolving the input file pattern.
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:650)
	... 48 common frames omitted
Caused by: java.lang.RuntimeException: I/O problems when resolving the input file pattern.
	at com.example.batch.MultiResourcePartitioner.<init>(MultiResourcePartitioner.java:35)
	at com.example.batch.BatchJobConfig.partitioner(BatchJobConfig.java:53)
	at com.example.batch.BatchJobConfig.myStepPartitioner(BatchJobConfig.java:47)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$8697aa0f.CGLIB$myStepPartitioner$4(<generated>)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$8697aa0f$$FastClassBySpringCGLIB$$d2877881.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$8697aa0f.myStepPartitioner(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 49 common frames omitted
Caused by: java.lang.NullPointerException: null
	at com.example.batch.MultiResourcePartitioner.<init>(MultiResourcePartitioner.java:33)
	... 61 common frames omitted
2020-08-13 16:36:59,729 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 7812 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 16:36:59,735 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 16:36:59,838 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 16:37:01,382 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 16:37:01,407 INFO com.example.batch.MultiResourcePartitioner [restartedMain] Manik D:/Spring-Batch/batch/*.csv
2020-08-13 16:37:01,415 WARN org.springframework.context.support.AbstractApplicationContext [restartedMain] Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myJob' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.RuntimeException: I/O problems when resolving the input file pattern.
2020-08-13 16:37:01,416 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 16:37:01,436 INFO org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener [restartedMain] 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-08-13 16:37:01,449 ERROR org.springframework.boot.SpringApplication [restartedMain] Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myJob' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.RuntimeException: I/O problems when resolving the input file pattern.
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:655)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:483)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:893)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:879)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:551)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.example.batch.DemoApplication.main(DemoApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.RuntimeException: I/O problems when resolving the input file pattern.
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:650)
	... 24 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.RuntimeException: I/O problems when resolving the input file pattern.
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:655)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:483)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.resolveBeanReference(ConfigurationClassEnhancer.java:362)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:334)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$23064fa0.myStepPartitioner(<generated>)
	at com.example.batch.BatchJobConfig.myJob(BatchJobConfig.java:42)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$23064fa0.CGLIB$myJob$4(<generated>)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$23064fa0$$FastClassBySpringCGLIB$$b50fa837.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$23064fa0.myJob(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 25 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.RuntimeException: I/O problems when resolving the input file pattern.
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:650)
	... 48 common frames omitted
Caused by: java.lang.RuntimeException: I/O problems when resolving the input file pattern.
	at com.example.batch.MultiResourcePartitioner.<init>(MultiResourcePartitioner.java:34)
	at com.example.batch.BatchJobConfig.partitioner(BatchJobConfig.java:53)
	at com.example.batch.BatchJobConfig.myStepPartitioner(BatchJobConfig.java:47)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$23064fa0.CGLIB$myStepPartitioner$1(<generated>)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$23064fa0$$FastClassBySpringCGLIB$$b50fa837.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$23064fa0.myStepPartitioner(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 49 common frames omitted
Caused by: java.lang.NullPointerException: null
	at com.example.batch.MultiResourcePartitioner.<init>(MultiResourcePartitioner.java:32)
	... 61 common frames omitted
2020-08-13 16:38:03,901 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 25340 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 16:38:03,906 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 16:38:04,007 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 16:38:05,474 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 16:38:05,493 WARN org.springframework.context.support.AbstractApplicationContext [restartedMain] Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myJob' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
2020-08-13 16:38:05,494 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 16:38:05,513 INFO org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener [restartedMain] 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-08-13 16:38:05,522 ERROR org.springframework.boot.SpringApplication [restartedMain] Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myJob' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:655)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:483)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:893)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:879)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:551)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.example.batch.DemoApplication.main(DemoApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:650)
	... 24 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:655)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:483)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.resolveBeanReference(ConfigurationClassEnhancer.java:362)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:334)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$344a9179.myStepPartitioner(<generated>)
	at com.example.batch.BatchJobConfig.myJob(BatchJobConfig.java:42)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$344a9179.CGLIB$myJob$4(<generated>)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$344a9179$$FastClassBySpringCGLIB$$5b09df57.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$344a9179.myJob(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 25 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:650)
	... 48 common frames omitted
Caused by: java.lang.NullPointerException: null
	at com.example.batch.MultiResourcePartitioner.<init>(MultiResourcePartitioner.java:32)
	at com.example.batch.BatchJobConfig.partitioner(BatchJobConfig.java:53)
	at com.example.batch.BatchJobConfig.myStepPartitioner(BatchJobConfig.java:47)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$344a9179.CGLIB$myStepPartitioner$1(<generated>)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$344a9179$$FastClassBySpringCGLIB$$5b09df57.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$344a9179.myStepPartitioner(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 49 common frames omitted
2020-08-13 16:52:24,115 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 1844 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 16:52:24,121 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 16:52:24,224 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 16:52:25,737 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 16:52:25,758 INFO com.example.batch.MultiResourcePartitioner [restartedMain] D:/Spring-Batch/batch/*.csv
2020-08-13 16:52:25,763 WARN org.springframework.context.support.AbstractApplicationContext [restartedMain] Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myJob' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
2020-08-13 16:52:25,764 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 16:52:25,784 INFO org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener [restartedMain] 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-08-13 16:52:25,791 ERROR org.springframework.boot.SpringApplication [restartedMain] Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myJob' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:655)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:483)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:893)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:879)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:551)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.example.batch.DemoApplication.main(DemoApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:650)
	... 24 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:655)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:483)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.resolveBeanReference(ConfigurationClassEnhancer.java:362)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:334)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$6fe831e.myStepPartitioner(<generated>)
	at com.example.batch.BatchJobConfig.myJob(BatchJobConfig.java:42)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$6fe831e.CGLIB$myJob$1(<generated>)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$6fe831e$$FastClassBySpringCGLIB$$75738c15.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$6fe831e.myJob(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 25 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:650)
	... 48 common frames omitted
Caused by: java.lang.NullPointerException: null
	at com.example.batch.MultiResourcePartitioner.<init>(MultiResourcePartitioner.java:33)
	at com.example.batch.BatchJobConfig.partitioner(BatchJobConfig.java:53)
	at com.example.batch.BatchJobConfig.myStepPartitioner(BatchJobConfig.java:47)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$6fe831e.CGLIB$myStepPartitioner$6(<generated>)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$6fe831e$$FastClassBySpringCGLIB$$75738c15.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$6fe831e.myStepPartitioner(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 49 common frames omitted
2020-08-13 16:53:55,054 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 8144 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 16:53:55,063 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 16:53:55,212 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 16:53:57,235 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 16:53:57,267 INFO com.example.batch.MultiResourcePartitioner [restartedMain] D:\Spring-Batch\batch\*.csv
2020-08-13 16:53:57,269 WARN org.springframework.context.support.AbstractApplicationContext [restartedMain] Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myJob' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
2020-08-13 16:53:57,270 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 16:53:57,289 INFO org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener [restartedMain] 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-08-13 16:53:57,302 ERROR org.springframework.boot.SpringApplication [restartedMain] Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myJob' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:655)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:483)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:893)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:879)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:551)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.example.batch.DemoApplication.main(DemoApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:650)
	... 24 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:655)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:483)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.resolveBeanReference(ConfigurationClassEnhancer.java:362)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:334)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$259b9060.myStepPartitioner(<generated>)
	at com.example.batch.BatchJobConfig.myJob(BatchJobConfig.java:42)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$259b9060.CGLIB$myJob$6(<generated>)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$259b9060$$FastClassBySpringCGLIB$$30a53c6c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$259b9060.myJob(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 25 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.NullPointerException
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:650)
	... 48 common frames omitted
Caused by: java.lang.NullPointerException: null
	at com.example.batch.MultiResourcePartitioner.<init>(MultiResourcePartitioner.java:33)
	at com.example.batch.BatchJobConfig.partitioner(BatchJobConfig.java:53)
	at com.example.batch.BatchJobConfig.myStepPartitioner(BatchJobConfig.java:47)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$259b9060.CGLIB$myStepPartitioner$3(<generated>)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$259b9060$$FastClassBySpringCGLIB$$30a53c6c.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$259b9060.myStepPartitioner(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 49 common frames omitted
2020-08-13 16:55:25,837 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 3044 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 16:55:25,845 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 16:55:25,954 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 16:55:27,542 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 16:55:27,560 INFO com.example.batch.MultiResourcePartitioner [restartedMain] D:\Spring-Batch\batch\*.csv
2020-08-13 16:55:27,566 WARN org.springframework.context.support.AbstractApplicationContext [restartedMain] Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myJob' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.RuntimeException: I/O problems when resolving the input file pattern.
2020-08-13 16:55:27,567 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 16:55:27,583 INFO org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener [restartedMain] 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-08-13 16:55:27,593 ERROR org.springframework.boot.SpringApplication [restartedMain] Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myJob' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.RuntimeException: I/O problems when resolving the input file pattern.
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:655)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:483)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:893)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:879)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:551)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.example.batch.DemoApplication.main(DemoApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.RuntimeException: I/O problems when resolving the input file pattern.
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:650)
	... 24 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.RuntimeException: I/O problems when resolving the input file pattern.
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:655)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:483)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.resolveBeanReference(ConfigurationClassEnhancer.java:362)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:334)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$6b92489e.myStepPartitioner(<generated>)
	at com.example.batch.BatchJobConfig.myJob(BatchJobConfig.java:42)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$6b92489e.CGLIB$myJob$4(<generated>)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$6b92489e$$FastClassBySpringCGLIB$$19fbcae4.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$6b92489e.myJob(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 25 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.RuntimeException: I/O problems when resolving the input file pattern.
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:650)
	... 48 common frames omitted
Caused by: java.lang.RuntimeException: I/O problems when resolving the input file pattern.
	at com.example.batch.MultiResourcePartitioner.<init>(MultiResourcePartitioner.java:34)
	at com.example.batch.BatchJobConfig.partitioner(BatchJobConfig.java:53)
	at com.example.batch.BatchJobConfig.myStepPartitioner(BatchJobConfig.java:47)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$6b92489e.CGLIB$myStepPartitioner$2(<generated>)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$6b92489e$$FastClassBySpringCGLIB$$19fbcae4.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$6b92489e.myStepPartitioner(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 49 common frames omitted
Caused by: java.io.FileNotFoundException: class path resource [D:] cannot be resolved to URL because it does not exist
	at org.springframework.core.io.ClassPathResource.getURL(ClassPathResource.java:195)
	at org.springframework.core.io.support.PathMatchingResourcePatternResolver.findPathMatchingResources(PathMatchingResourcePatternResolver.java:498)
	at org.springframework.core.io.support.PathMatchingResourcePatternResolver.getResources(PathMatchingResourcePatternResolver.java:298)
	at com.example.batch.MultiResourcePartitioner.<init>(MultiResourcePartitioner.java:32)
	... 61 common frames omitted
2020-08-13 16:55:46,428 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 19928 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 16:55:46,433 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 16:55:46,524 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 16:55:48,095 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 16:55:48,115 INFO com.example.batch.MultiResourcePartitioner [restartedMain] D:/Spring-Batch/batch/*.csv
2020-08-13 16:55:48,123 WARN org.springframework.context.support.AbstractApplicationContext [restartedMain] Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myJob' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.RuntimeException: I/O problems when resolving the input file pattern.
2020-08-13 16:55:48,125 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 16:55:48,147 INFO org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLoggingListener [restartedMain] 

Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
2020-08-13 16:55:48,158 ERROR org.springframework.boot.SpringApplication [restartedMain] Application run failed
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myJob' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.RuntimeException: I/O problems when resolving the input file pattern.
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:655)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:483)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:893)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:879)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:551)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.example.batch.DemoApplication.main(DemoApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Job]: Factory method 'myJob' threw exception; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.RuntimeException: I/O problems when resolving the input file pattern.
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:650)
	... 24 common frames omitted
Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myStepPartitioner' defined in class path resource [com/example/batch/BatchJobConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.RuntimeException: I/O problems when resolving the input file pattern.
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:655)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:483)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:323)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:226)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:321)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.resolveBeanReference(ConfigurationClassEnhancer.java:362)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:334)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$5b23a271.myStepPartitioner(<generated>)
	at com.example.batch.BatchJobConfig.myJob(BatchJobConfig.java:42)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$5b23a271.CGLIB$myJob$4(<generated>)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$5b23a271$$FastClassBySpringCGLIB$$a64b26e8.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$5b23a271.myJob(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 25 common frames omitted
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.batch.core.Step]: Factory method 'myStepPartitioner' threw exception; nested exception is java.lang.RuntimeException: I/O problems when resolving the input file pattern.
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:650)
	... 48 common frames omitted
Caused by: java.lang.RuntimeException: I/O problems when resolving the input file pattern.
	at com.example.batch.MultiResourcePartitioner.<init>(MultiResourcePartitioner.java:34)
	at com.example.batch.BatchJobConfig.partitioner(BatchJobConfig.java:53)
	at com.example.batch.BatchJobConfig.myStepPartitioner(BatchJobConfig.java:47)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$5b23a271.CGLIB$myStepPartitioner$1(<generated>)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$5b23a271$$FastClassBySpringCGLIB$$a64b26e8.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:331)
	at com.example.batch.BatchJobConfig$$EnhancerBySpringCGLIB$$5b23a271.myStepPartitioner(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	... 49 common frames omitted
Caused by: java.io.FileNotFoundException: class path resource [D:/Spring-Batch/batch/] cannot be resolved to URL because it does not exist
	at org.springframework.core.io.ClassPathResource.getURL(ClassPathResource.java:195)
	at org.springframework.core.io.support.PathMatchingResourcePatternResolver.findPathMatchingResources(PathMatchingResourcePatternResolver.java:498)
	at org.springframework.core.io.support.PathMatchingResourcePatternResolver.getResources(PathMatchingResourcePatternResolver.java:298)
	at com.example.batch.MultiResourcePartitioner.<init>(MultiResourcePartitioner.java:32)
	... 61 common frames omitted
2020-08-13 16:57:37,146 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 23496 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 16:57:37,155 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 16:57:37,257 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 16:57:38,716 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 16:57:38,737 INFO com.example.batch.MultiResourcePartitioner [restartedMain] *.csv
2020-08-13 16:57:39,238 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 16:57:39,288 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 2.846 seconds (JVM running for 4.064)
2020-08-13 16:57:39,292 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 16:57:39,295 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 16:57:39,296 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 16:57:39,357 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 16:57:39,461 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 16:57:39,576 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 16:57:39,727 INFO com.example.batch.BatchJobConfig [task-1] Maniiiiiiiiiiiiii employee.csv 
2020-08-13 16:57:39,907 INFO com.example.batch.BatchJobConfig$2 [task-5] 15
2020-08-13 16:57:39,924 INFO com.example.batch.BatchJobConfig$2 [task-4] 15
2020-08-13 16:57:39,944 INFO com.example.batch.BatchJobConfig$2 [task-3] 15
2020-08-13 16:57:39,956 INFO com.example.batch.BatchJobConfig$2 [task-2] 15
2020-08-13 16:57:39,975 INFO com.example.batch.BatchJobConfig$2 [task-4] 15
2020-08-13 16:57:39,994 INFO com.example.batch.BatchJobConfig$2 [task-3] 15
2020-08-13 16:57:40,007 INFO com.example.batch.BatchJobConfig$2 [task-2] 10
2020-08-13 16:57:40,061 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition0] executed in 436ms
2020-08-13 16:57:40,070 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 493ms
2020-08-13 16:57:40,081 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 540ms
2020-08-13 16:58:40,084 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [SpringContextShutdownHook] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 16:59:33,397 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 18480 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 16:59:33,402 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 16:59:33,528 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 16:59:35,117 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 16:59:35,135 INFO com.example.batch.MultiResourcePartitioner [restartedMain] *.csv
2020-08-13 16:59:35,651 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 16:59:35,696 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 3.023 seconds (JVM running for 4.263)
2020-08-13 16:59:35,700 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 16:59:35,702 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 16:59:35,703 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 16:59:35,745 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 16:59:35,836 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 16:59:35,920 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 16:59:36,001 INFO com.example.batch.BatchJobConfig [task-1] Maniiiiiiiiiiiiii employee.csv 
2020-08-13 16:59:36,198 INFO com.example.batch.BatchJobConfig$2 [task-3] 15
2020-08-13 16:59:36,240 INFO com.example.batch.BatchJobConfig$2 [task-4] 15
2020-08-13 16:59:36,254 INFO com.example.batch.BatchJobConfig$2 [task-5] 15
2020-08-13 16:59:36,265 INFO com.example.batch.BatchJobConfig$2 [task-2] 15
2020-08-13 16:59:36,286 INFO com.example.batch.BatchJobConfig$2 [task-3] 15
2020-08-13 16:59:36,302 INFO com.example.batch.BatchJobConfig$2 [task-4] 15
2020-08-13 16:59:36,316 INFO com.example.batch.BatchJobConfig$2 [task-7] 3
2020-08-13 16:59:36,316 INFO com.example.batch.BatchJobConfig$2 [task-8] 7
2020-08-13 16:59:36,371 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition0] executed in 430ms
2020-08-13 16:59:36,375 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 455ms
2020-08-13 16:59:36,384 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 492ms
2020-08-13 17:00:35,620 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [Thread-99] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 17:00:36,137 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 18480 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 17:00:36,140 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 17:00:36,600 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 17:00:36,619 INFO com.example.batch.MultiResourcePartitioner [restartedMain] *.csv
2020-08-13 17:00:36,891 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 17:00:36,923 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 0.983 seconds (JVM running for 65.49)
2020-08-13 17:00:36,926 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 17:00:36,928 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 17:00:36,934 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 17:00:36,944 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 17:00:36,955 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 17:00:36,967 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 17:00:36,973 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 5ms
2020-08-13 17:00:36,979 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 18ms
2020-08-13 17:00:36,987 INFO org.springframework.boot.devtools.autoconfigure.ConditionEvaluationDeltaLoggingListener [restartedMain] Condition evaluation unchanged
2020-08-13 17:00:36,994 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [SpringContextShutdownHook] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 17:00:47,628 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 24232 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 17:00:47,636 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 17:00:47,735 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 17:00:49,122 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 17:00:49,150 INFO com.example.batch.MultiResourcePartitioner [restartedMain] *.csv
2020-08-13 17:00:49,684 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 17:00:49,733 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 2.795 seconds (JVM running for 4.001)
2020-08-13 17:00:49,738 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 17:00:49,741 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 17:00:49,742 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 17:00:49,805 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 17:00:49,921 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 17:00:50,025 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 17:00:50,068 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 42ms
2020-08-13 17:00:50,090 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 107ms
2020-08-13 17:00:50,113 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [SpringContextShutdownHook] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 17:03:27,375 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 15884 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 17:03:27,385 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 17:03:27,491 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 17:03:28,960 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 17:03:29,539 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 17:03:29,582 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 3.008 seconds (JVM running for 4.205)
2020-08-13 17:03:29,586 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 17:03:29,588 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 17:03:29,589 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 17:03:29,640 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 17:03:29,727 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 17:03:29,827 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 17:03:29,859 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 26ms
2020-08-13 17:03:29,882 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 84ms
2020-08-13 17:03:29,901 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [SpringContextShutdownHook] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 17:04:07,714 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 21608 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 17:04:07,719 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 17:04:07,818 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 17:04:09,184 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 17:04:09,780 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 17:04:09,842 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 2.829 seconds (JVM running for 4.196)
2020-08-13 17:04:09,848 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 17:04:09,851 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 17:04:09,851 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 17:04:09,905 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 17:04:10,002 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 17:04:10,139 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 17:04:10,151 INFO com.example.batch.MultiResourcePartitioner [restartedMain] Saniiiiiiiiiiiiii 0 
2020-08-13 17:04:10,179 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 40ms
2020-08-13 17:04:10,203 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 104ms
2020-08-13 17:04:10,227 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [SpringContextShutdownHook] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 17:04:44,117 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 12724 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 17:04:44,124 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 17:04:44,224 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 17:04:45,611 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 17:04:46,062 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 17:04:46,109 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 2.739 seconds (JVM running for 3.933)
2020-08-13 17:04:46,114 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 17:04:46,121 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 17:04:46,122 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 17:04:46,172 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 17:04:46,271 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 17:04:46,368 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 17:04:46,381 INFO com.example.batch.MultiResourcePartitioner [restartedMain] Saniiiiiiiiiiiiii 0 
2020-08-13 17:04:46,402 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 33ms
2020-08-13 17:04:46,450 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 82ms
2020-08-13 17:04:46,468 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [SpringContextShutdownHook] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 17:05:26,975 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 13056 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 17:05:26,982 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 17:05:27,081 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 17:05:28,551 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 17:05:28,569 INFO com.example.batch.MultiResourcePartitioner [restartedMain] Saniiiiiiiiiiiiii 0 
2020-08-13 17:05:29,015 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 17:05:29,060 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 2.794 seconds (JVM running for 4.021)
2020-08-13 17:05:29,063 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 17:05:29,065 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 17:05:29,066 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 17:05:29,109 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 17:05:29,204 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 17:05:29,297 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 17:05:29,319 INFO com.example.batch.MultiResourcePartitioner [restartedMain] Saniiiiiiiiiiiiii 0 
2020-08-13 17:05:29,336 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 36ms
2020-08-13 17:05:29,364 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 92ms
2020-08-13 17:05:29,394 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [SpringContextShutdownHook] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 17:06:01,082 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 18716 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 17:06:01,090 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 17:06:01,209 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 17:06:02,587 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 17:06:02,603 INFO com.example.batch.MultiResourcePartitioner [restartedMain] Saniiiiiiiiiiiiii 1 
2020-08-13 17:06:03,043 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 17:06:03,087 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 2.692 seconds (JVM running for 3.904)
2020-08-13 17:06:03,091 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 17:06:03,093 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 17:06:03,094 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 17:06:03,145 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 17:06:03,256 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 17:06:03,342 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 17:06:03,358 INFO com.example.batch.MultiResourcePartitioner [restartedMain] Saniiiiiiiiiiiiii 1 
2020-08-13 17:06:03,359 INFO com.example.batch.MultiResourcePartitioner [restartedMain] Saniiiiiiiiiiiiii employee.csv 
2020-08-13 17:06:03,442 INFO com.example.batch.BatchJobConfig [task-1] Maniiiiiiiiiiiiii employee.csv 
2020-08-13 17:06:03,611 INFO com.example.batch.BatchJobConfig$2 [task-2] 15
2020-08-13 17:06:03,618 INFO com.example.batch.BatchJobConfig$2 [task-5] 15
2020-08-13 17:06:03,625 INFO com.example.batch.BatchJobConfig$2 [task-4] 15
2020-08-13 17:06:03,639 INFO com.example.batch.BatchJobConfig$2 [task-3] 15
2020-08-13 17:06:03,711 INFO com.example.batch.BatchJobConfig$2 [task-2] 15
2020-08-13 17:06:03,735 INFO com.example.batch.BatchJobConfig$2 [task-5] 15
2020-08-13 17:06:03,749 INFO com.example.batch.BatchJobConfig$2 [task-4] 10
2020-08-13 17:06:03,783 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition0] executed in 407ms
2020-08-13 17:06:03,788 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 445ms
2020-08-13 17:06:03,797 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 479ms
2020-08-13 17:06:15,590 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [Thread-99] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 17:06:15,895 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 18716 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 17:06:15,896 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 17:06:16,661 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 17:06:16,685 INFO com.example.batch.MultiResourcePartitioner [restartedMain] Saniiiiiiiiiiiiii 0 
2020-08-13 17:06:16,955 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 17:06:16,973 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 1.26 seconds (JVM running for 17.79)
2020-08-13 17:06:16,975 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 17:06:16,979 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 17:06:16,982 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 17:06:16,995 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 17:06:17,007 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 17:06:17,028 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 17:06:17,038 INFO com.example.batch.MultiResourcePartitioner [restartedMain] Saniiiiiiiiiiiiii 0 
2020-08-13 17:06:17,042 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 11ms
2020-08-13 17:06:17,052 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 36ms
2020-08-13 17:06:17,056 INFO org.springframework.boot.devtools.autoconfigure.ConditionEvaluationDeltaLoggingListener [restartedMain] Condition evaluation unchanged
2020-08-13 17:06:17,075 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [SpringContextShutdownHook] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 17:06:24,923 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 12148 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 17:06:24,932 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 17:06:25,035 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 17:06:26,407 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 17:06:26,432 INFO com.example.batch.MultiResourcePartitioner [restartedMain] Saniiiiiiiiiiiiii 0 
2020-08-13 17:06:26,869 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 17:06:26,909 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 2.675 seconds (JVM running for 3.853)
2020-08-13 17:06:26,916 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 17:06:26,919 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 17:06:26,919 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 17:06:26,965 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 17:06:27,057 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 17:06:27,152 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 17:06:27,168 INFO com.example.batch.MultiResourcePartitioner [restartedMain] Saniiiiiiiiiiiiii 0 
2020-08-13 17:06:27,191 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 35ms
2020-08-13 17:06:27,240 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 117ms
2020-08-13 17:06:27,264 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [SpringContextShutdownHook] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 17:07:12,179 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 8344 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 17:07:12,183 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 17:07:12,281 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 17:07:13,692 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 17:07:13,707 INFO com.example.batch.MultiResourcePartitioner [restartedMain] Saniiiiiiiiiiiiii 2 
2020-08-13 17:07:14,184 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 17:07:14,241 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 2.843 seconds (JVM running for 4.044)
2020-08-13 17:07:14,245 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 17:07:14,249 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 17:07:14,254 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 17:07:14,299 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 17:07:14,392 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 17:07:14,502 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 17:07:14,516 INFO com.example.batch.MultiResourcePartitioner [restartedMain] Saniiiiiiiiiiiiii 2 
2020-08-13 17:07:14,517 INFO com.example.batch.MultiResourcePartitioner [restartedMain] Saniiiiiiiiiiiiii employee_working - Copy.csv 
2020-08-13 17:07:14,518 INFO com.example.batch.MultiResourcePartitioner [restartedMain] Saniiiiiiiiiiiiii employee_working.csv 
2020-08-13 17:07:14,599 INFO com.example.batch.BatchJobConfig [task-2] Maniiiiiiiiiiiiii employee_working.csv 
2020-08-13 17:07:14,619 INFO com.example.batch.BatchJobConfig [task-1] Maniiiiiiiiiiiiii employee_working - Copy.csv 
2020-08-13 17:07:14,657 ERROR org.springframework.batch.core.step.AbstractStep [task-2] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.ItemStreamException: Failed to initialize the reader
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.open(AbstractItemCountingItemStreamItemReader.java:153)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$12422ba9.open(<generated>)
	at org.springframework.batch.item.support.CompositeItemStream.open(CompositeItemStream.java:103)
	at org.springframework.batch.core.step.tasklet.TaskletStep.open(TaskletStep.java:311)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:205)
	at org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler$1.call(TaskExecutorPartitionHandler.java:138)
	at org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler$1.call(TaskExecutorPartitionHandler.java:135)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalStateException: Input resource must exist (reader is in 'strict' mode): file [d:\Spring-Batch\batch\employee_working.csv]
	at org.springframework.batch.item.file.FlatFileItemReader.doOpen(FlatFileItemReader.java:257)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.open(AbstractItemCountingItemStreamItemReader.java:150)
	... 20 common frames omitted
2020-08-13 17:07:14,657 ERROR org.springframework.batch.core.step.AbstractStep [task-1] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.ItemStreamException: Failed to initialize the reader
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.open(AbstractItemCountingItemStreamItemReader.java:153)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$12422ba9.open(<generated>)
	at org.springframework.batch.item.support.CompositeItemStream.open(CompositeItemStream.java:103)
	at org.springframework.batch.core.step.tasklet.TaskletStep.open(TaskletStep.java:311)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:205)
	at org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler$1.call(TaskExecutorPartitionHandler.java:138)
	at org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler$1.call(TaskExecutorPartitionHandler.java:135)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalStateException: Input resource must exist (reader is in 'strict' mode): file [d:\Spring-Batch\batch\employee_working - Copy.csv]
	at org.springframework.batch.item.file.FlatFileItemReader.doOpen(FlatFileItemReader.java:257)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.open(AbstractItemCountingItemStreamItemReader.java:150)
	... 20 common frames omitted
2020-08-13 17:07:14,669 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition1] executed in 122ms
2020-08-13 17:07:14,687 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition0] executed in 142ms
2020-08-13 17:07:14,692 ERROR org.springframework.batch.core.step.AbstractStep [restartedMain] Encountered an error executing step parttioner in job myJob
org.springframework.batch.core.JobExecutionException: Partition handler returned an unsuccessful step
	at org.springframework.batch.core.partition.support.PartitionStep.doExecute(PartitionStep.java:112)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:208)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:148)
	at org.springframework.batch.core.job.AbstractJob.handleStep(AbstractJob.java:410)
	at org.springframework.batch.core.job.SimpleJob.doExecute(SimpleJob.java:136)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:319)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:147)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:140)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.batch.core.configuration.annotation.SimpleBatchConfiguration$PassthruAdvice.invoke(SimpleBatchConfiguration.java:127)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy50.run(Unknown Source)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.execute(JobLauncherApplicationRunner.java:199)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.executeLocalJobs(JobLauncherApplicationRunner.java:173)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.launchJobFromProperties(JobLauncherApplicationRunner.java:160)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:155)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:150)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:786)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:776)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:322)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.example.batch.DemoApplication.main(DemoApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2020-08-13 17:07:14,701 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 197ms
2020-08-13 17:07:14,715 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [FAILED] in 259ms
2020-08-13 17:08:14,703 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [SpringContextShutdownHook] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 17:11:03,538 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 3088 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 17:11:03,546 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 17:11:03,649 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 17:11:05,164 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 17:11:05,183 INFO com.example.batch.MultiResourcePartitioner [restartedMain] Saniiiiiiiiiiiiii 2 
2020-08-13 17:11:05,731 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 17:11:05,853 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 3.046 seconds (JVM running for 4.365)
2020-08-13 17:11:05,864 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 17:11:05,868 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 17:11:05,869 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 17:11:05,937 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 17:11:06,036 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 17:11:06,144 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 17:11:06,161 INFO com.example.batch.MultiResourcePartitioner [restartedMain] Saniiiiiiiiiiiiii 2 
2020-08-13 17:11:06,162 INFO com.example.batch.MultiResourcePartitioner [restartedMain] Saniiiiiiiiiiiiii D:\Spring-Batch\batch\target\classes\employee_working - Copy.csv 
2020-08-13 17:11:06,163 INFO com.example.batch.MultiResourcePartitioner [restartedMain] Saniiiiiiiiiiiiii D:\Spring-Batch\batch\target\classes\employee_working.csv 
2020-08-13 17:11:06,302 INFO com.example.batch.BatchJobConfig [task-1] Maniiiiiiiiiiiiii employee_working.csv 
2020-08-13 17:11:06,332 INFO com.example.batch.BatchJobConfig [task-2] Maniiiiiiiiiiiiii employee_working - Copy.csv 
2020-08-13 17:11:06,366 ERROR org.springframework.batch.core.step.AbstractStep [task-2] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.ItemStreamException: Failed to initialize the reader
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.open(AbstractItemCountingItemStreamItemReader.java:153)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$d8aea3a.open(<generated>)
	at org.springframework.batch.item.support.CompositeItemStream.open(CompositeItemStream.java:103)
	at org.springframework.batch.core.step.tasklet.TaskletStep.open(TaskletStep.java:311)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:205)
	at org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler$1.call(TaskExecutorPartitionHandler.java:138)
	at org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler$1.call(TaskExecutorPartitionHandler.java:135)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalStateException: Input resource must exist (reader is in 'strict' mode): file [d:\Spring-Batch\batch\employee_working - Copy.csv]
	at org.springframework.batch.item.file.FlatFileItemReader.doOpen(FlatFileItemReader.java:257)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.open(AbstractItemCountingItemStreamItemReader.java:150)
	... 20 common frames omitted
2020-08-13 17:11:06,366 ERROR org.springframework.batch.core.step.AbstractStep [task-1] Encountered an error executing step myStep in job myJob
org.springframework.batch.item.ItemStreamException: Failed to initialize the reader
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.open(AbstractItemCountingItemStreamItemReader.java:153)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader$$FastClassBySpringCGLIB$$ebb633d0.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:771)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:136)
	at org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:124)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)
	at org.springframework.batch.item.file.FlatFileItemReader$$EnhancerBySpringCGLIB$$d8aea3a.open(<generated>)
	at org.springframework.batch.item.support.CompositeItemStream.open(CompositeItemStream.java:103)
	at org.springframework.batch.core.step.tasklet.TaskletStep.open(TaskletStep.java:311)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:205)
	at org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler$1.call(TaskExecutorPartitionHandler.java:138)
	at org.springframework.batch.core.partition.support.TaskExecutorPartitionHandler$1.call(TaskExecutorPartitionHandler.java:135)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalStateException: Input resource must exist (reader is in 'strict' mode): file [d:\Spring-Batch\batch\employee_working.csv]
	at org.springframework.batch.item.file.FlatFileItemReader.doOpen(FlatFileItemReader.java:257)
	at org.springframework.batch.item.support.AbstractItemCountingItemStreamItemReader.open(AbstractItemCountingItemStreamItemReader.java:150)
	... 20 common frames omitted
2020-08-13 17:11:06,395 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition0] executed in 177ms
2020-08-13 17:11:06,408 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition1] executed in 198ms
2020-08-13 17:11:06,418 ERROR org.springframework.batch.core.step.AbstractStep [restartedMain] Encountered an error executing step parttioner in job myJob
org.springframework.batch.core.JobExecutionException: Partition handler returned an unsuccessful step
	at org.springframework.batch.core.partition.support.PartitionStep.doExecute(PartitionStep.java:112)
	at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:208)
	at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:148)
	at org.springframework.batch.core.job.AbstractJob.handleStep(AbstractJob.java:410)
	at org.springframework.batch.core.job.SimpleJob.doExecute(SimpleJob.java:136)
	at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:319)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:147)
	at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)
	at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:140)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:344)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.batch.core.configuration.annotation.SimpleBatchConfiguration$PassthruAdvice.invoke(SimpleBatchConfiguration.java:127)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy50.run(Unknown Source)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.execute(JobLauncherApplicationRunner.java:199)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.executeLocalJobs(JobLauncherApplicationRunner.java:173)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.launchJobFromProperties(JobLauncherApplicationRunner.java:160)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:155)
	at org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner.run(JobLauncherApplicationRunner.java:150)
	at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:786)
	at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:776)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:322)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1237)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226)
	at com.example.batch.DemoApplication.main(DemoApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2020-08-13 17:11:06,421 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 277ms
2020-08-13 17:11:06,439 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [FAILED] in 331ms
2020-08-13 17:11:32,983 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 8916 (D:\Spring-Batch\batch\target\classes started by Mani kandan in D:\Spring-Batch\batch)
2020-08-13 17:11:32,991 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 17:11:33,105 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 17:11:34,716 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 17:11:34,742 INFO com.example.batch.MultiResourcePartitioner [restartedMain] Saniiiiiiiiiiiiii 2 
2020-08-13 17:11:35,308 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 17:11:35,348 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 3.137 seconds (JVM running for 4.09)
2020-08-13 17:11:35,356 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 17:11:35,358 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 17:11:35,359 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 17:11:35,396 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 17:11:35,571 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 17:11:35,651 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 17:11:35,667 INFO com.example.batch.MultiResourcePartitioner [restartedMain] Saniiiiiiiiiiiiii 2 
2020-08-13 17:11:35,674 INFO com.example.batch.MultiResourcePartitioner [restartedMain] Saniiiiiiiiiiiiii D:\Spring-Batch\batch\target\classes\employee_working - Copy.csv 
2020-08-13 17:11:35,676 INFO com.example.batch.MultiResourcePartitioner [restartedMain] Saniiiiiiiiiiiiii D:\Spring-Batch\batch\target\classes\employee_working.csv 
2020-08-13 17:11:35,794 INFO com.example.batch.BatchJobConfig [task-2] Maniiiiiiiiiiiiii D:\Spring-Batch\batch\target\classes\employee_working.csv 
2020-08-13 17:11:35,814 INFO com.example.batch.BatchJobConfig [task-1] Maniiiiiiiiiiiiii D:\Spring-Batch\batch\target\classes\employee_working - Copy.csv 
2020-08-13 17:11:35,954 INFO com.example.batch.BatchJobConfig$2 [task-6] 15
2020-08-13 17:11:35,965 INFO com.example.batch.BatchJobConfig$2 [task-4] 15
2020-08-13 17:11:35,971 INFO com.example.batch.BatchJobConfig$2 [task-8] 15
2020-08-13 17:11:35,977 INFO com.example.batch.BatchJobConfig$2 [task-7] 15
2020-08-13 17:11:35,977 INFO com.example.batch.BatchJobConfig$2 [task-5] 15
2020-08-13 17:11:36,008 INFO com.example.batch.BatchJobConfig$2 [task-3] 15
2020-08-13 17:11:36,008 INFO com.example.batch.BatchJobConfig$2 [task-4] 15
2020-08-13 17:11:36,023 INFO com.example.batch.BatchJobConfig$2 [task-6] 15
2020-08-13 17:11:36,033 INFO com.example.batch.BatchJobConfig$2 [task-8] 15
2020-08-13 17:11:36,041 INFO com.example.batch.BatchJobConfig$2 [task-6] 15
2020-08-13 17:11:36,056 INFO com.example.batch.BatchJobConfig$2 [task-8] 6
2020-08-13 17:11:36,064 INFO com.example.batch.BatchJobConfig$2 [task-5] 15
2020-08-13 17:11:36,081 INFO com.example.batch.BatchJobConfig$2 [task-7] 4
2020-08-13 17:11:36,104 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition1] executed in 381ms
2020-08-13 17:11:36,105 INFO com.example.batch.BatchJobConfig$2 [task-3] 15
2020-08-13 17:11:36,111 INFO com.example.batch.BatchJobConfig$2 [task-2] 2
2020-08-13 17:11:36,114 INFO com.example.batch.BatchJobConfig$2 [task-8] 5
2020-08-13 17:11:36,119 INFO com.example.batch.BatchJobConfig$2 [task-6] 3
2020-08-13 17:11:36,128 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition0] executed in 428ms
2020-08-13 17:11:36,133 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 480ms
2020-08-13 17:11:36,142 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 513ms
2020-08-13 17:12:08,005 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [Thread-97] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 17:12:08,255 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 8916 (D:\Spring-Batch\batch\target\classes started by Mani kandan in D:\Spring-Batch\batch)
2020-08-13 17:12:08,256 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 17:12:08,841 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 17:12:08,873 INFO com.example.batch.MultiResourcePartitioner [restartedMain] Saniiiiiiiiiiiiii 2 
2020-08-13 17:12:09,037 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 17:12:09,052 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 0.884 seconds (JVM running for 37.794)
2020-08-13 17:12:09,055 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 17:12:09,057 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 17:12:09,058 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 17:12:09,069 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 17:12:09,075 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 17:12:09,087 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 17:12:09,091 INFO com.example.batch.MultiResourcePartitioner [restartedMain] Saniiiiiiiiiiiiii 2 
2020-08-13 17:12:09,093 INFO com.example.batch.MultiResourcePartitioner [restartedMain] Saniiiiiiiiiiiiii D:\Spring-Batch\batch\target\classes\employee_working - Copy.csv 
2020-08-13 17:12:09,097 INFO com.example.batch.MultiResourcePartitioner [restartedMain] Saniiiiiiiiiiiiii D:\Spring-Batch\batch\target\classes\employee_working.csv 
2020-08-13 17:12:09,126 INFO com.example.batch.BatchJobConfig [task-2] Maniiiiiiiiiiiiii D:\Spring-Batch\batch\target\classes\employee_working.csv 
2020-08-13 17:12:09,152 INFO com.example.batch.BatchJobConfig [task-1] Maniiiiiiiiiiiiii D:\Spring-Batch\batch\target\classes\employee_working - Copy.csv 
2020-08-13 17:12:09,226 INFO com.example.batch.BatchJobConfig$2 [task-8] 15
2020-08-13 17:12:09,230 INFO com.example.batch.BatchJobConfig$2 [task-4] 15
2020-08-13 17:12:09,236 INFO com.example.batch.BatchJobConfig$2 [task-3] 15
2020-08-13 17:12:09,241 INFO com.example.batch.BatchJobConfig$2 [task-6] 15
2020-08-13 17:12:09,256 INFO com.example.batch.BatchJobConfig$2 [task-7] 15
2020-08-13 17:12:09,271 INFO com.example.batch.BatchJobConfig$2 [task-4] 15
2020-08-13 17:12:09,283 INFO com.example.batch.BatchJobConfig$2 [task-8] 15
2020-08-13 17:12:09,306 INFO com.example.batch.BatchJobConfig$2 [task-5] 15
2020-08-13 17:12:09,311 INFO com.example.batch.BatchJobConfig$2 [task-6] 15
2020-08-13 17:12:09,319 INFO com.example.batch.BatchJobConfig$2 [task-3] 15
2020-08-13 17:12:09,331 INFO com.example.batch.BatchJobConfig$2 [task-3] 15
2020-08-13 17:12:09,347 INFO com.example.batch.BatchJobConfig$2 [task-5] 15
2020-08-13 17:12:09,348 INFO com.example.batch.BatchJobConfig$2 [task-7] 8
2020-08-13 17:12:09,357 INFO com.example.batch.BatchJobConfig$2 [task-4] 2
2020-08-13 17:12:09,361 INFO com.example.batch.BatchJobConfig$2 [task-7] 10
2020-08-13 17:12:09,378 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition1] executed in 260ms
2020-08-13 17:12:09,384 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition0] executed in 266ms
2020-08-13 17:12:09,388 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 300ms
2020-08-13 17:12:09,393 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 310ms
2020-08-13 17:12:09,398 INFO org.springframework.boot.devtools.autoconfigure.ConditionEvaluationDeltaLoggingListener [restartedMain] Condition evaluation unchanged
2020-08-13 17:12:48,825 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [Thread-99] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 17:12:49,273 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 8916 (D:\Spring-Batch\batch\target\classes started by Mani kandan in D:\Spring-Batch\batch)
2020-08-13 17:12:49,275 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 17:12:50,127 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 17:12:50,149 INFO com.example.batch.MultiResourcePartitioner [restartedMain] Saniiiiiiiiiiiiii 0 
2020-08-13 17:12:50,475 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 17:12:50,499 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 1.52 seconds (JVM running for 79.242)
2020-08-13 17:12:50,508 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 17:12:50,509 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 17:12:50,511 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 17:12:50,528 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 17:12:50,533 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 17:12:50,562 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 17:12:50,575 INFO com.example.batch.MultiResourcePartitioner [restartedMain] Saniiiiiiiiiiiiii 0 
2020-08-13 17:12:50,579 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 16ms
2020-08-13 17:12:50,628 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 87ms
2020-08-13 17:12:50,633 INFO org.springframework.boot.devtools.autoconfigure.ConditionEvaluationDeltaLoggingListener [restartedMain] Condition evaluation unchanged
2020-08-13 17:12:50,644 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [SpringContextShutdownHook] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 17:13:10,000 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 9552 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 17:13:10,007 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 17:13:10,108 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 17:13:11,776 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 17:13:11,798 INFO com.example.batch.MultiResourcePartitioner [restartedMain] Saniiiiiiiiiiiiii 0 
2020-08-13 17:13:12,347 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 17:13:12,395 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 3.105 seconds (JVM running for 4.369)
2020-08-13 17:13:12,403 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 17:13:12,406 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 17:13:12,407 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 17:13:12,458 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 17:13:12,546 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 17:13:12,636 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 17:13:12,648 INFO com.example.batch.MultiResourcePartitioner [restartedMain] Saniiiiiiiiiiiiii 0 
2020-08-13 17:13:12,662 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 25ms
2020-08-13 17:13:12,687 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 77ms
2020-08-13 17:13:12,704 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [SpringContextShutdownHook] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 17:13:29,258 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 17308 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 17:13:29,265 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 17:13:29,371 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 17:13:30,852 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 17:13:30,990 INFO com.example.batch.MultiResourcePartitioner [restartedMain] Saniiiiiiiiiiiiii 2 
2020-08-13 17:13:31,470 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 17:13:31,510 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 2.954 seconds (JVM running for 4.155)
2020-08-13 17:13:31,516 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 17:13:31,518 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 17:13:31,519 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 17:13:31,582 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 17:13:31,673 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 17:13:31,769 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 17:13:31,784 INFO com.example.batch.MultiResourcePartitioner [restartedMain] Saniiiiiiiiiiiiii 2 
2020-08-13 17:13:31,786 INFO com.example.batch.MultiResourcePartitioner [restartedMain] Saniiiiiiiiiiiiii D:\employee_working - Copy.csv 
2020-08-13 17:13:31,786 INFO com.example.batch.MultiResourcePartitioner [restartedMain] Saniiiiiiiiiiiiii D:\employee_working_hme.csv 
2020-08-13 17:13:31,931 INFO com.example.batch.BatchJobConfig [task-2] Maniiiiiiiiiiiiii D:\employee_working_hme.csv 
2020-08-13 17:13:31,952 INFO com.example.batch.BatchJobConfig [task-1] Maniiiiiiiiiiiiii D:\employee_working - Copy.csv 
2020-08-13 17:13:32,074 INFO com.example.batch.BatchJobConfig$2 [task-7] 15
2020-08-13 17:13:32,078 INFO com.example.batch.BatchJobConfig$2 [task-8] 15
2020-08-13 17:13:32,090 INFO com.example.batch.BatchJobConfig$2 [task-5] 15
2020-08-13 17:13:32,114 INFO com.example.batch.BatchJobConfig$2 [task-6] 15
2020-08-13 17:13:32,131 INFO com.example.batch.BatchJobConfig$2 [task-4] 15
2020-08-13 17:13:32,149 INFO com.example.batch.BatchJobConfig$2 [task-3] 15
2020-08-13 17:13:32,154 INFO com.example.batch.BatchJobConfig$2 [task-5] 15
2020-08-13 17:13:32,157 INFO com.example.batch.BatchJobConfig$2 [task-7] 15
2020-08-13 17:13:32,171 INFO com.example.batch.BatchJobConfig$2 [task-4] 15
2020-08-13 17:13:32,186 INFO com.example.batch.BatchJobConfig$2 [task-8] 9
2020-08-13 17:13:32,195 INFO com.example.batch.BatchJobConfig$2 [task-5] 15
2020-08-13 17:13:32,199 INFO com.example.batch.BatchJobConfig$2 [task-7] 15
2020-08-13 17:13:32,207 INFO com.example.batch.BatchJobConfig$2 [task-4] 5
2020-08-13 17:13:32,209 INFO com.example.batch.BatchJobConfig$2 [task-6] 11
2020-08-13 17:13:32,218 INFO com.example.batch.BatchJobConfig$2 [task-3] 10
2020-08-13 17:13:32,258 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition0] executed in 434ms
2020-08-13 17:13:32,281 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition1] executed in 458ms
2020-08-13 17:13:32,285 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 515ms
2020-08-13 17:13:32,294 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 552ms
2020-08-13 17:14:32,290 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [SpringContextShutdownHook] Shutting down ExecutorService 'applicationTaskExecutor'
2020-08-13 17:15:03,999 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Starting DemoApplication on LAPTOP-EU4P4HB4 with PID 7264 (D:\Spring-Batch\batch\target\classes started by Mani kandan in d:\Spring-Batch\batch)
2020-08-13 17:15:04,006 INFO org.springframework.boot.SpringApplication [restartedMain] No active profile set, falling back to default profiles: default
2020-08-13 17:15:04,115 INFO org.springframework.boot.logging.DeferredLog [restartedMain] Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
2020-08-13 17:15:05,600 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [restartedMain] Initializing ExecutorService 'applicationTaskExecutor'
2020-08-13 17:15:05,621 INFO com.example.batch.MultiResourcePartitioner [restartedMain] Saniiiiiiiiiiiiii 2 
2020-08-13 17:15:06,160 INFO org.springframework.boot.devtools.autoconfigure.OptionalLiveReloadServer [restartedMain] LiveReload server is running on port 35729
2020-08-13 17:15:06,205 INFO org.springframework.boot.StartupInfoLogger [restartedMain] Started DemoApplication in 2.9 seconds (JVM running for 4.085)
2020-08-13 17:15:06,210 INFO org.springframework.boot.autoconfigure.batch.JobLauncherApplicationRunner [restartedMain] Running default command line with: []
2020-08-13 17:15:06,214 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No datasource was provided...using a Map based JobRepository
2020-08-13 17:15:06,215 WARN org.springframework.batch.core.configuration.annotation.DefaultBatchConfigurer [restartedMain] No transaction manager was provided, using a ResourcelessTransactionManager
2020-08-13 17:15:06,264 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher [restartedMain] No TaskExecutor has been set, defaulting to synchronous executor.
2020-08-13 17:15:06,423 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] launched with the following parameters: [{}]
2020-08-13 17:15:06,486 INFO org.springframework.batch.core.job.SimpleStepHandler [restartedMain] Executing step: [parttioner]
2020-08-13 17:15:06,498 INFO com.example.batch.MultiResourcePartitioner [restartedMain] Saniiiiiiiiiiiiii 2 
2020-08-13 17:15:06,499 INFO com.example.batch.MultiResourcePartitioner [restartedMain] Saniiiiiiiiiiiiii D:\employee_working - Copy.csv 
2020-08-13 17:15:06,500 INFO com.example.batch.MultiResourcePartitioner [restartedMain] Saniiiiiiiiiiiiii D:\employee_working_hme.csv 
2020-08-13 17:15:06,598 INFO com.example.batch.BatchJobConfig [task-2] Maniiiiiiiiiiiiii D:\employee_working - Copy.csv 
2020-08-13 17:15:06,620 INFO com.example.batch.BatchJobConfig [task-1] Maniiiiiiiiiiiiii D:\employee_working_hme.csv 
2020-08-13 17:15:06,763 INFO com.example.batch.BatchJobConfig$2 [task-6] 15
2020-08-13 17:15:06,768 INFO com.example.batch.BatchJobConfig$2 [task-8] 15
2020-08-13 17:15:06,778 INFO com.example.batch.BatchJobConfig$2 [task-6] 15
2020-08-13 17:15:06,782 INFO com.example.batch.BatchJobConfig$2 [task-8] 15
2020-08-13 17:15:06,786 INFO com.example.batch.BatchJobConfig$2 [task-5] 15
2020-08-13 17:15:06,794 INFO com.example.batch.BatchJobConfig$2 [task-4] 15
2020-08-13 17:15:06,810 INFO com.example.batch.BatchJobConfig$2 [task-3] 15
2020-08-13 17:15:06,841 INFO com.example.batch.BatchJobConfig$2 [task-4] 15
2020-08-13 17:15:06,895 INFO com.example.batch.BatchJobConfig$2 [task-7] 15
2020-08-13 17:15:06,924 INFO com.example.batch.BatchJobConfig$2 [task-8] 15
2020-08-13 17:15:06,940 INFO com.example.batch.BatchJobConfig$2 [task-7] 11
2020-08-13 17:15:06,955 INFO com.example.batch.BatchJobConfig$2 [task-3] 13
2020-08-13 17:15:06,960 INFO com.example.batch.BatchJobConfig$2 [task-5] 14
2020-08-13 17:15:06,964 INFO com.example.batch.BatchJobConfig$2 [task-4] 12
2020-08-13 17:15:06,968 INFO org.springframework.batch.core.step.AbstractStep [task-1] Step: [myStep:partition1] executed in 432ms
2020-08-13 17:15:06,978 INFO org.springframework.batch.core.step.AbstractStep [task-2] Step: [myStep:partition0] executed in 442ms
2020-08-13 17:15:06,982 INFO org.springframework.batch.core.step.AbstractStep [restartedMain] Step: [parttioner] executed in 496ms
2020-08-13 17:15:06,991 INFO org.springframework.batch.core.launch.support.SimpleJobLauncher$1 [restartedMain] Job: [SimpleJob: [name=myJob]] completed with the following parameters: [{}] and the following status: [COMPLETED] in 528ms
2020-08-13 17:16:06,994 INFO org.springframework.scheduling.concurrent.ExecutorConfigurationSupport [SpringContextShutdownHook] Shutting down ExecutorService 'applicationTaskExecutor'
